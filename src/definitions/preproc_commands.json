[
  {
    "name": "@ANIM",
    "helpId": "atANIM",
    "shortDescription": "preload an animation for later use",
    "version": "2.0",
    "synopsis": "@ANIM id, filename$[, table]",
    "functionDocs": "This preprocessor command preloads the animation specified in `filename$` and assigns the identifier `id` to it.\n\nAnim formats that are supported on all platforms are IFF ANIM, GIF ANIM, AVI (uncompressed or using Motion JPEG compression), and formats you have a plugin for. Depending on the platform Hollywood is running on, more anim formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all anim formats you have datatypes for as well. On Windows, `@ANIM` can also load anim formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 4.5, `@ANIM` can also automatically create animations from an image file. If you want to use an image file with `@ANIM`, you need to specify the optional `Frames` argument. See below for more information.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the animation.\n\n- `Link`: Set this field to `False` if you do not want to have this animation linked to your executable/applet when you compile your script. This field defaults to `True` which means that the animation is linked to your to your executable/applet when Hollywood is in compile mode.\n\n- `FromDisk`: If you set this field to `True`, Hollywood will not load the whole animation into memory but it will load the single frames directly from disk when needed. This is slower but requires much less memory. For the functions of the anim library it does not matter whether the animation is completely in memory or loaded dynamically from disk. You can use all anim functions like [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) also with anims that are loaded from disk. Anim layers are also correctly handled with disk anims. (V3.0)\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the anim shall be loaded, too. Please note that most anim formats do not support alpha channels. Thus, it is advised that you create the anim manually from a PNG picture using [CreateAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CreateAnim_.html) if you need to have an alpha channel in your animation. This field defaults to `False`. (V4.5)\n\n- `X, Y, Width, Height, Frames, FPR`: This group of fields is only used when you specify an image file source. In that case, you have to use these arguments to tell `@ANIM` how it shall create the animation from the image. `Width` and `Height` define the dimensions for the animation and `Frames` specifies how many frames `@ANIM` shall read from the source image. If the frames are aligned in multiple rows in the source image, you will also have to pass the argument `FPR` (abbreviation for frames per row) to tell `@ANIM` how many frames there are in each row. Finally, you can tell `@ANIM` where in the image file it should start scanning by specifying the fields `X` and `Y` (they both default to 0). `@ANIM` will then start off at position `X` and `Y` and read `Frames` number of images with the dimensions of `Width` by `Height` from the picture specified by `filename$`. After it has read `FPR` number of images, it will advance to the next row. (V4.5)\n\n- `SkipLoopFrames`: If you set this to `True`, Hollywood will automatically skip the last two frames of the anim. This is only required for IFF ANIMs that have two loop frames at the end of the anim. Auto detection of loop frames is not possible because it would require Hollywood to decode the whole anim first. That is why you have to tell Hollywood manually whether the anim has loop frames or not. (V5.3)\n\n- `Deinterlace`: This tag allows you to specify how Hollywood should deinterlace interlaced anims. This can be set to either `#DEINTERLACE_DEFAULT` or `#DEINTERLACE_DOUBLE`. If set to `#DEINTERLACE_DEFAULT` (which is as the name implies also the default), Hollywood will combine two half-frames into one full frame. This mostly results in the best quality but can lead to visual artefacts when there is a lot of movement in the anim. If you use `#DEINTERLACE_DOUBLE` instead, Hollywood will double the lines of a half-frame to get a full frame. This leads to some quality loss but can make the anim look more smooth. The best deinterlace mode to use always depends on the anim. Note that mostly you should not have to care about this tag at all because deinterlacing is actually only required for some obscure IFF ANIM formats which store interlaced frames like ANIM16i and ANIM32i. (V5.3)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the anim will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based anim. If you want to load the alphachannel of an anim, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the anim as a palette anim. This means that you can get and modify the anim's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette animations also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the anim file (if the anim format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. An animation cannot have a mask and an alpha channel!\n\nStarting with Hollywood 9.0, this preprocessor command can also load vector anim formats if you have an appropriate plugin installed. Keep in mind, though, that if you load vector anim formats using `@ANIM`, the anim may not support all features of normal anims. See [Vector animations](https://www.hollywood-mal.com/docs/html/hollywood/VectorAnimNote_.html).\n\nIf you want to load anims manually, please use the [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this animation later in the code\n* `filename$` — the animation file you want to load\n* `table` — optional: a table that can contain a combination of the fields discussed above",
    "example": "```\n@ANIM 1, \"MyAnim.gif\"\n```\n\nLoad \"MyAnim.gif\" as animation number 1.\n\n---\n\n```\n@ANIM 1, \"MyAnim.gif\", {Transparency = $FF0000}\n```\n\nDoes the same like above but the animation is now transparent (transparency color is red=$FF0000).\n\n---\n\n```\n@ANIM 1, \"Huge_Animation.iff\", {Link = False}\n```\n\nThe code above loads the specified animation and tells Hollywood that it should never link this anim because it is so big.",
    "platforms": ["All"],
    "category": "Animation"
  },
  {
    "name": "@APPAUTHOR",
    "helpId": "atAPPAUTHOR",
    "shortDescription": "declare application author",
    "version": "2.0",
    "synopsis": "@APPAUTHOR author$",
    "functionDocs": "This preprocessor command simply allows you to include a string containing the script's author into the application. This command does not have any actual function. It just takes the specified string and saves it in the applet/executable.",
    "inputsDocs": "* `author$` — script author",
    "example": "See [APPVERSION](https://www.hollywood-mal.com/docs/html/hollywood/atAPPVERSION_.html)",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPCOPYRIGHT",
    "helpId": "atAPPCOPYRIGHT",
    "shortDescription": "declare application copyright",
    "version": "2.0",
    "synopsis": "@APPCOPYRIGHT copyright$",
    "functionDocs": "This preprocessor command simply allows you to include a string containing the script's copyright into the application. This command does not have any actual function. It just takes the specified string and saves it in the applet/executable.",
    "inputsDocs": "* `copyright$` — script copyright",
    "example": "See [APPVERSION](https://www.hollywood-mal.com/docs/html/hollywood/atAPPVERSION_.html)",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPDESCRIPTION",
    "helpId": "atAPPDESCRIPTION",
    "shortDescription": "declare application description",
    "version": "2.0",
    "synopsis": "@APPDESCRIPTION desc$",
    "functionDocs": "This preprocessor command simply allows you to include a string containing the script's description into the application. This command does not have any actual function. It just takes the specified string and saves it in the applet/executable.\n\nUnder AmigaOS, the description specified here is used as the description of the commodity that is added to Exchange.",
    "inputsDocs": "* `desc$` — script description",
    "example": "See [APPVERSION](https://www.hollywood-mal.com/docs/html/hollywood/atAPPVERSION_.html)",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPENTRY",
    "helpId": "atAPPENTRY",
    "shortDescription": "declare application entry script",
    "version": "10.0",
    "synopsis": "@APPENTRY file$",
    "functionDocs": "This preprocessor command allows you to define the entry script for a project. This is only useful if you have a project that consists of multiple scripts. In such a project you typically have a main script which uses [@INCLUDE](https://www.hollywood-mal.com/docs/html/hollywood/atINCLUDE_.html) to include several other helper scripts. By adding `@APPENTRY` to your helper scripts you can tell Hollywood the name of the main script. Whenever you run one of the helper scripts and Hollywood encounters the `@APPENTRY` definition, it will run the main script instead of the helper script.\n\nFor example, let's suppose your project consists of the following three scripts:\n\n```\nmain.hws\nengine.hws\nutils.hws\n```\n\nYou could then place the following line at the top of the helper scripts, i.e. at the top of `engine.hws` and `utils.hws`:\n\n```\n@APPENTRY \"main.hws\"\n```\n\nWith that definition Hollywood will run `main.hws` whenever you start `engine.hws` or `utils.hws` because `main.hws` has been set as the entry script. This can be very convenient, e.g. when editing helper scripts in the Hollywood IDE. If you use `@APPENTRY` you can just click on \"Run\" and the IDE will run the main script instead.",
    "inputsDocs": "* `file$` — entry script file",
    "resultsDocs": "none",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPICON",
    "helpId": "atAPPICON",
    "shortDescription": "declare application icon",
    "version": "4.7",
    "synopsis": "@APPICON table  \n@APPICON f$     (V8.0)",
    "functionDocs": "This preprocessor command can be used to specify an icon for your application. On Windows, macOS, and Linux this icon will appear in the window's border and in several elements of the window manager like the task bar. On AmigaOS 4, the icon will appear in AmiDock if your script runs as a registered AmigaOS 4 application. The icon you specify here will also be linked into the applets and executables you compile with Hollywood. By default, executables compiled by Hollywood will always use the standard Hollywood icon (the clapperboard). If you prefer to use your own icon instead, use this preprocessor command.\n\nStarting with Hollywood 8.0 there are two different ways of using this preprocessor command: You can either specify individual images for the different icon sizes in a table (see below) or you can simply pass a Hollywood icon that has been created using the [SaveIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SaveIcon_.html) function to this preprocessor command. In that case, the icon has to be passed in the `f$` parameter. Specifying a single icon instead of a whole table results in code that is more readable but of course it requires you to generate the icon using Hollywood's [SaveIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SaveIcon_.html) command first.\n\nIf you want to pass individual images for the different icon sizes, you have to pass a table in the `table` argument to this preprocessor command. The table can contain one or more of the following tags:\n\n- `Ic16x16`: Custom icon in the resolution of 16x16 pixels.\n\n- `Ic16x16s`: Selected state icon for size 16x16. (V6.0)\n\n- `Ic24x24`: Custom icon in the resolution of 24x24 pixels.\n\n- `Ic24x24s`: Selected state icon for size 24x24. (V6.0)\n\n- `Ic32x32`: Custom icon in the resolution of 32x32 pixels.\n\n- `Ic32x32s`: Selected state icon for size 32x32. (V6.0)\n\n- `Ic48x48`: Custom icon in the resolution of 48x48 pixels.\n\n- `Ic48x48s`: Selected state icon for size 48x48. (V6.0)\n\n- `Ic64x64`: Custom icon in the resolution of 64x64 pixels.\n\n- `Ic64x64s`: Selected state icon for size 64x64. (V6.0)\n\n- `Ic96x96`: Custom icon in the resolution of 96x96 pixels.\n\n- `Ic96x96s`: Selected state icon for size 96x96. (V6.0)\n\n- `Ic128x128`: Custom icon in the resolution of 128x128 pixels.\n\n- `Ic128x128s`: Selected state icon for size 128x128. (V6.0)\n\n- `Ic256x256`: Custom icon in the resolution of 256x256 pixels.\n\n- `Ic256x256s`: Selected state icon for size 256x256. (V6.0)\n\n- `Ic512x512`: Custom icon in the resolution of 512x512 pixels.\n\n- `Ic512x512s`: Selected state icon for size 512x512. (V6.0)\n\n- `Ic1024x1024`: Custom icon in the resolution of 1024x1024 pixels. (V7.0)\n\n- `Ic1024x1024s`: Selected state icon for size 1024x1024. (V7.0)\n\n- `DefaultIcon`: This tag lets you specify which icon should be the default icon. You need to pass a string here that describes an icon size from the sizes listed above, e.g. \"64x64\" designates the icon specified in the `Ic64x64` tag as the default icon. The default icon is the icon that Hollywood will show in AmiDock on AmigaOS4 if the `RegisterApplication` tag in [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) has been set to `True`. Thus, currently, the `DefaultIcon` tag only has an effect on AmigaOS 4. (V6.0)\n\nThe reason why this preprocessor command does not simply accept just a single 512x512 icon and then scales it down to all other resolutions is that very small icons like 16x16 or 24x24 do not really look very good when scaled down from a larger icon. They look much better when they are handcrafted for each size. That is why this preprocessor command accepts so many different tags.\n\nPlease note that not all sizes are currently supported on all platforms but you should make sure to provide icons for all these sizes. If you leave a size out, Hollywood might fall back to its default icon (clapperboard) for the size. So if you intend to use your own icons, make sure that you always provide it in all sizes listed above.\n\nThe image file that is required as a parameter by the tags listed above should be a PNG image with alpha channel. Images without alpha channel are supported as well, but this is not recommended because it doesn't look too good.\n\nPlease note that it is mandatory to use the `DefaultIcon` tag on AmigaOS 4 to indicate which icon size should be shown in AmiDock. If you do not pass the `DefaultIcon` tag, Hollywood will display its default icon in AmiDock (the clapperboard). If you want to show an icon in AmiDock that uses a custom size not listed above, you can use the `DockyBrush` tag that is supported by the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command. See [OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html). Please note that Hollywood supports two different docky types on AmigaOS 4: Standard dockies and app dockies. See [AmiDock information](https://www.hollywood-mal.com/docs/html/hollywood/AmiDockInfo_.html).\n\nStarting with Hollywood 6.0 you can specify two images for every icon size because on AmigaOS and compatibles icons usually contain two different states whereas on all other platforms icons are just single static images. If you only target non-Amiga systems, you do not have to provide icons for the selected state because they won't be used anyway.\n\nAlternatively, you can also use one of the [-iconXXX](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) console arguments instead of `@APPICON`.\n\nNote that this preprocessor command currently does not have any effect on Amiga systems. If you would like to change the icon that Hollywood displays when it is minimized on Workbench, use the [SetWBIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SetWBIcon_.html) command.",
    "inputsDocs": "* `f$` — name of a Hollywood icon OR\n* `table` — table containing one or more of the supported tags (see above)",
    "example": "```\n@APPICON \"icon.png\"\n```\n\nThe code above sets the icon \"icon.png\" as the icon for the application. This icon must have been created using [SaveIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SaveIcon_.html).\n\n---\n\n```\n@APPICON {Ic16x16 = \"my16x16icon.png\",\nIc24x24 = \"my24x24icon.png\",\nIc32x32 = \"my32x32icon.png\",\nIc48x48 = \"my48x48icon.png\",\nIc64x64 = \"my64x64icon.png\",\nIc96x96 = \"my96x96icon.png\",\nIc128x128 = \"my128x128icon.png\",\nIc256x256 = \"my256x256icon.png\",\nIc512x512 = \"my512x512icon.png\",\nIc1024x1024 = \"my1024x1024icon.png\"}\n```\n\nThe code above will replace all inbuilt icons with custom ones provided in the specified png images.",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPIDENTIFIER",
    "helpId": "atAPPIDENTIFIER",
    "shortDescription": "declare application identifier",
    "version": "6.1",
    "synopsis": "@APPIDENTIFIER id$",
    "functionDocs": "Specify a unique identifier for your application in reverse DNS notation. Some Hollywood commands like [LoadPrefs()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPrefs_.html) and [SavePrefs()](https://www.hollywood-mal.com/docs/html/hollywood/SavePrefs_.html) require you to provide a unique identifier for your application in reverse DNS notation, e.g. `com.airsoftsoftwair.hollywood`. This can be done using the `@APPIDENTIFIER` preprocessor command.\n\nAlso, when compiling application bundles for macOS, the identifier specified in `@APPIDENTIFIER` will automatically be written to the `Info.plist` file of the app bundle.",
    "inputsDocs": "* `id$` — application identifier in reverse DNS notation",
    "example": "See [APPVERSION](https://www.hollywood-mal.com/docs/html/hollywood/atAPPVERSION_.html)",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPTITLE",
    "helpId": "atAPPTITLE",
    "shortDescription": "declare application title",
    "version": "2.0",
    "synopsis": "@APPTITLE title$",
    "functionDocs": "This preprocessor command simply allows you to include a string containing the script's title into the application. This command does not have any actual function. It just takes the specified string and saves it in the applet/executable.\n\nUnder AmigaOS, the title specified here is used as the title of the commodity that is added to Exchange.",
    "inputsDocs": "* `title$` — script title",
    "example": "See [APPVERSION](https://www.hollywood-mal.com/docs/html/hollywood/atAPPVERSION_.html)",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@APPVERSION",
    "helpId": "atAPPVERSION",
    "shortDescription": "declare application version",
    "version": "2.0",
    "synopsis": "@APPVERSION version$",
    "functionDocs": "This preprocessor command simply allows you to include a string containing the script's version into the application. This command does not have any actual function. It just takes the specified string and saves it in the applet/executable.\n\nUnder AmigaOS, the version specified here is used as the information text of the commodity that is added to Exchange.",
    "inputsDocs": "* `version$` — script version",
    "example": "```\n@APPTITLE \"Run-away Randy\"\n@APPAUTHOR \"Andreas Falkenhahn\"\n@APPCOPYRIGHT \"(C) Copyright 2002-2005 by Airsoft Softwair.\"\n@APPVERSION \"$VER: Run-away Randy 1.0 (23-Dec-05)\"\n@APPDESCRIPTION \"A really cool jump'n'run game done with Hollywood.\"\n@APPIDENTIFIER \"com.airsoftsoftwair.runawayrandy\"\n```\n\nThis is what a complete application information sector looks like. Hollywood will save all this information in the applet/executable. When the user enter \"Version Run-away-Randy.exe\", the version string \"$VER: Run-away Randy 1.0 (23-Dec-05)\" will be returned.",
    "platforms": ["All"],
    "category": "Application"
  },
  {
    "name": "@BGPIC",
    "helpId": "atBGPIC",
    "shortDescription": "preload a background picture for later use",
    "version": "2.0",
    "synopsis": "@BGPIC id, filename$[, table]",
    "functionDocs": "This preprocessor command preloads the background picture specified in `filename$` and assigns the identifier `id` to it. If you specify 1 as the identifier, then this picture will be used as the initial background picture when Hollywood opens your display.\n\nImage formats that are supported on all platforms are PNG, JPEG, BMP, IFF ILBM, GIF, and image formats you have a plugin for. Depending on the platform Hollywood is running on, more image formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all image formats you have datatypes for as well. On Windows, `@BGPIC` can also load image formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 5.0, this function can also load vector formats like SVG if you have an appropriate plugin installed. Using a vector image as a BGPic has the advantage that when the size of the display changes (e.g. because the user is resizing the window), the BGPic can be adapted to the new size without any losses in quality because vector BGPics can be infinitely scaled without any sacrifices in quality. See [Vector BGPics](https://www.hollywood-mal.com/docs/html/hollywood/VectorBGPicNote_.html).\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) notation that shall appear transparent in the BGPic.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the image shall be loaded, too. Please note that not all pictures have an alpha channel and that not all picture formats are capable of storing alpha channel information. It is suggested that you use the PNG format if you need alpha channel data. This tag defaults to `False`. (V4.5)\n\n- `Link`: Set this field to `False` if you do not want to have this BGPic linked to your executable/applet when you compile your script. This field defaults to `True` which means that the BGPic is linked to your executable/applet when Hollywood is in compile mode.\n\n- `FillStyle`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `FillColor`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `TextureBrush`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `TextureX, TextureY`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientStyle`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientAngle`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientStartColor, GradientEndColor`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientCenterX, GradientCenterY`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientBalance`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientBorder`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `GradientColors`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.0)\n\n- `ScaleWidth, ScaleHeight`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.3)\n\n- `SmoothScale`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V5.3)\n\n- `Loader`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V6.0)\n\n- `Adapter`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V6.0)\n\n- `LoadTransparency`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V6.0)\n\n- `LoadPalette`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V9.0)\n\n- `FillPen`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V9.0)\n\n- `TransparentPen`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V9.0)\n\n- `UserTags`: See [LoadBGPic](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html). (V10.0)\n\nIf you use `Transparency`, `LoadTransparency` or `LoadAlpha`, your display will automatically adopt the transparency settings of the BGPic when it is displayed. In other words, if you want to have a display with transparency, simply load a transparent BGPic and display it.\n\nIf you set the `LoadPalette` tag to `True`, your display will become a palette display as soon as the BGPic is shown. Palette displays behave differently than normal true colour displays and there are some things to be considered when using them. See [Palette displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html).\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` tags are mutually exclusive. A BGPic can only have one transparency setting!\n\nIf you want to load background pictures manually, please use the [LoadBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this background picture later in the code; if this is 1 then the picture will be the initial display background\n* `filename$` — the picture file you want to load\n* `table` — optional: a table for setting further options; see above for explanation",
    "example": "```\n@BGPIC 1, \"MyBG.png\"\n```\n\nDeclare \"MyBG.png\" as the initial background picture (will be displayed when Hollywood starts up).\n\n---\n\n```\n@BGPIC 1, \"MyBG.png\", {Transparency = $FF0000}\n```\n\nDoes the same like above but the picture is now transparent (transparency color is red=$FF0000).\n\n---\n\n```\n@BGPIC 1, \"4MB_uncompressed_picture.bmp\", {Link = False}\n```\n\nThe code above loads the specified picture and tells Hollywood that it should never link this image because it is so big.",
    "platforms": ["All"],
    "category": "BGPic"
  },
  {
    "name": "@BRUSH",
    "helpId": "atBRUSH",
    "shortDescription": "preload a brush for later use",
    "version": "2.0",
    "synopsis": "@BRUSH id, filename$[, table]",
    "functionDocs": "This preprocessor command preloads the brush specified in `filename$` and assigns the identifier `id` to it.\n\nImage formats that are supported on all platforms are PNG, JPEG, BMP, IFF ILBM, GIF, and image formats you have a plugin for. Depending on the platform Hollywood is running on, more image formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all image formats you have datatypes for as well. On Windows, `@BRUSH` can also load image formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 5.0, this function can also load vector formats like SVG if you have an appropriate plugin installed. Keep in mind, though, that when you load vector images using this command, the brush will be a special vector brush which does not support all features of the normal brushes. You can, however, convert vector brushes to raster brushes by using the [RasterizeBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RasterizeBrush_.html) function. See [Vector brushes](https://www.hollywood-mal.com/docs/html/hollywood/VectorBrushNote_.html).\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the brush.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the image shall be loaded, too. Please note that not all pictures have an alpha channel and that not all picture formats are capable of storing alpha channel information. It is suggested that you use the PNG format if you need alpha channel data. This field defaults to `False`.\n\n- `Link`: Set this field to `False` if you do not want to have this brush linked to your executable/applet when you compile your script. This field defaults to `True` which means that the brush is linked to your executable/applet when Hollywood is in compile mode.\n\n- `X, Y, Width, Height`: These fields can be used to load only a part of the image into the brush. This is useful if you have one big image with many different small images in it and now you want to load the small images into single brushes. Using these fields you can specify a rectangle inside the image from which Hollywood will take the graphics data for the brush.\n\n- `Hardware`: If you set this tag to `True`, Hollywood will create this brush entirely in video memory for hardware-accelerated drawing in connection with a hardware double buffer. Hardware brushes are subject to several restrictions. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V5.0)\n\n- `ScaleWidth, ScaleHeight`: These fields can be used to load a scaled version of the image. If the image driver supports scaled loading, this will give you some significant speed-up for example in case you just want to load a thumbnail-sized version of a large image. If the image driver does not support scaled loading, the full image will be loaded first before it is scaled. This is not much faster than manually scaling the image after loading. You can pass an absolute pixel value or a string containing a percent specification here. (V5.3)\n\n- `SmoothScale`: If `ScaleWidth` or `ScaleHeight` is set, you can use this item to specify whether or not Hollywood shall use anti-aliased scaling. Defaults to `False` which means no anti-aliasing. Note that anti-aliased scaling is much slower than normal scaling. (V5.3)\n\n- `Display`: If you specify the identifier of a display here, Hollywood will create a display-dependent hardware brush for you. Display-dependent hardware brushes can only be drawn to the display they belong to. This tag is only handled if the `Hardware` tag has been set to `True`. Also note that Hollywood's inbuilt display adapter does not support display-dependent hardware brushes, but plugins can install custom display adapters which support display-dependent hardware brushes. This tag defaults to the identifier of the currently active display. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this brush. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the image will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based image. If you want to load the alphachannel of an image, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the brush as a palette brush. This means that you can get and modify the brush's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette brushes also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the image file (if the image format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. A brush can only have one transparency setting!\n\nIf you want to load brushes manually, please use the [LoadBrush()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBrush_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this brush later in the code\n* `filename$` — the picture file you want to load\n* `table` — optional argument specifying further options",
    "example": "```\n@BRUSH 1, \"MyBrush.png\"\n```\n\nLoad \"MyBrush.png\" as brush 1 with no transparency.\n\n---\n\n```\n@BRUSH 1, \"MyBrush.png\", {Transparency = $FF0000}\n```\n\nDoes the same like above but the brush is now transparent (transparency color is red=$FF0000).\n\n---\n\n```\n@BRUSH 1, \"Sprites.png\", {X = 64, Y = 32, Width = 32, Height = 32}\n```\n\nLoads an image of 32x32 pixels from \"Sprites.png\" starting at X=64 and Y=32.",
    "platforms": ["All"],
    "category": "Brush"
  },
  {
    "name": "@WARNING",
    "helpId": "atWARNING",
    "shortDescription": "send a warning message to the debug device",
    "version": "6.1",
    "synopsis": "@WARNING msg$",
    "functionDocs": "This preprocessor command will send the specified warning message to the debug device right before running the script. This allows you to conveniently store important information like to do lists, \"fix me\" parts, etc. alongside your source code and you will be reminded of them whenever you run your script.\n\nThis preprocessor command can be disabled by specifying the `-nodebug` console argument when running a script or applet. In that case, this preprocessor command will do nothing at all. See [Console arguments](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html).",
    "inputsDocs": "* `msg$` — error message to show",
    "example": "```\n@WARNING \"FIXME: support other image formats\"\n```\n\nThe code above will send the string \"FIXME: support other image formats\" to the debug device right before Hollywood runs the script.",
    "platforms": ["All"],
    "category": "Debug"
  },
  {
    "name": "@BACKFILL",
    "helpId": "atBACKFILL",
    "shortDescription": "configure backfill settings for script",
    "version": "4.5",
    "synopsis": "@BACKFILL table",
    "functionDocs": "Important note: This preprocessor command is deprecated since Hollywood 6.0. As Hollywood 6.0 introduced support for multiple monitors, there could also be multiple backfills (one for every display as displays could be on separate monitors). That is why backfills should be set up using the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command or the [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) function now. You can still use this preprocessor command but it will affect the first display only.\n\nThis preprocessor command can be used to configure the backfill settings for your script. Backfills can be used to create a shielding window that covers the whole area not occupied by your main display. You can use a static color as a backfill, a gradient, an image, or a texture. Before Hollywood 4.5, backfills were configured using the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command. Hollywood 4.5, however, introduced multiple displays which made it necessary to move the backfill settings into its own preprocessor command because there can be only a single backfill per script.\n\nYou have to pass a table to this command. The following table tags are currently recognized:\n\n- `Type`: This field is obligatory. It can be `Color`, `Gradient`, `Texture` or `Picture`. The type must be passed as a string here.\n\n- `Color`: If you've specified `Color` as backfill type, pass the desired backfill color in this field.\n\n- `StartColor, EndColor`: If you've specified `Gradient` as backfill type, use these two fields to define the start and end colors for the gradient.\n\n- `Brush`: If you've specified `Texture` or `Picture` as backfill type, specify the identifier of the brush to use as the source image here. If you want to pass the file name directly, use the `BrushFile` tag instead.\n\n- `X,Y`: If you've specified `Picture` as backfill type, you can use these two fields to position the picture on the screen. They both default to `#CENTER`.\n\n- `BrushFile`: If you've specified `Texture` or `Picture` as backfill type, you can specify the file name of the brush to use as the source image here. The file specified here will be linked to the applet/executable on compilation unless you set `LinkBrushFile` to `False`. If you want to pass a brush identifier, use the `Brush` tag instead. (V4.0)\n\n- `LinkBrushFile`: If `BrushFile` has been specified this tag can be used to declare whether or not the brush file shall be linked into the applet/executable on compilation. Defaults to `True` which means that the brush file will be linked. (V4.0)\n\n- `Transparency`: If backfill type is `Picture` you can specify an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) here that shall be shown transparently. Defaults to `#NOTRANSPARENCY`. (V4.0)\n\n- `ScalePicture`: If backfill type is `Picture` you can use this tag to define whether or not the picture shall be scaled to fit the backfill window's dimensions. Defaults to `False`. (V4.0)\n\n- `SmoothScale`: Set this tag to `True` if you want to have interpolated scaling of the picture that should be used as a backfill image. This tag is only handled if `ScalePicture` has been set to `True`. Defaults to `False`. (V6.0)\n\nAlternatively, backfill settings can also be configured from the [command line](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html). If you want to disable that, you should compile your scripts using the [-locksettings](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) console argument.\n\nYou might also want to specify the `HideTitleBar` tag in [@SCREEN](https://www.hollywood-mal.com/docs/html/hollywood/atSCREEN_.html). If you specify `HideTitleBar`, the backfill will also shield the current screen's title bar (Amiga) or Finder's menu bar (macOS).",
    "inputsDocs": "* `table` — table declaring the style of the script's backfill",
    "example": "```\n@BACKFILL {Type = \"Gradient\", StartColor = #BLACK, EndColor = #BLUE}\n```\n\nThis declaration will install a gradient from black to blue as the backfill.",
    "platforms": ["All"],
    "category": "Display"
  },
  {
    "name": "@DISPLAY",
    "helpId": "atDISPLAY",
    "shortDescription": "create new display",
    "version": "2.0",
    "synopsis": "@DISPLAY [id,] table",
    "functionDocs": "This preprocessor command creates a new display using the attributes specified in the optional table argument. Specifying an identifier for the display is only needed if your script uses multiple displays. If you are using just a single display, you can leave out the identifier completely and Hollywood will then use the identifier 1 for the display. If you are using multiple displays, style guide suggests that you use the identifier 1 for your first/main display.\n\nIf you want to create displays dynamically at run time, you can use the function [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) for this.\n\nThe style of the new display is configured by setting a number of tags in the optional table argument. The following style tags are currently supported by `@DISPLAY`:\n\n- `Title`: Use this field to set the title for this display. This title will be shown then in display's window bar (if the window has a border). Default title is \"Hollywood\".\n\n- `X,Y`: These two allow you to define where on the host screen this display should open. Using absolute values here is rather counterproductive because you mostly do not know the size of the screen your window will be opened on (except you are using full screen mode). It is wiser to use Hollywood's [special coordinate constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgInbuiltCst_.html) here. If you do not set these fields, the display will always be opened in the center of the screen. You can also move the display later by calling [MoveDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/MoveDisplay_.html).\n\n- `BGPic`: Specifies the BGPic that shall be attached to the new display. Every display needs an associated BGPic. Thus, if you do not specify this tag, Hollywood will create a new BGPic for this display automatically using the fill style specified in the `FillStyle` tag (see below) and the size specified in `Width` and `Height`. An exception is made for the display that uses the identifier 1: For reasons of compatibility the display number 1 will automatically be associated with the BGPic number 1 if there is one. (V4.5)\n\n- `Width, Height`: You only have to use these fields if you did not specify a background picture in `BGPic` (see above) and if you want your display size's dimensions to be different from the default size 640x480. If this applies, set these fields to the desired dimensions and Hollywood will open such an initial display for you. These tags are ignored if you specify a BGPic. Starting with Hollywood 7.0 you can also set these tags to the special constant `#NATIVE`. In that case, Hollywood will use the dimensions of the display's host device.\n\n- `Desktop`: If you set this field to `True`, the initial background picture will be a copy of your desktop screen. This can be used for some nice effects with that screen. Hollywood will also automatically open a borderless window if this field is `True`.\n\n- `Mode`: This tag allows you to specify the mode the display should be opened in. You have to pass one of the following strings to this tag:\n\n  - `\"Windowed\"` Open display in windowed mode.\n\n  - `\"FullScreen\"` Open in full screen mode. This can change your monitor's resolution to the dimensions which fit best to your display's dimensions. If you don't want that, take a look at the `FullScreenScale` and `FakeFullScreen` modes below.\n\n  - `\"FullScreenScale\"` This is a special full screen mode which won't change your monitor's resolution. Instead, Hollywood's display will be resized to fit your monitor's dimensions. Additionally, this full screen mode will activate the auto scaling engine so that your display is automatically scaled to fit your monitor's dimensions. `FullScreenScale` will use auto scaling by default. If you would like it to use layer scaling, you have to set `ScaleMode` to `#SCALEMODE_LAYER` as well. `FullScreenScale` is especially useful on mobile devices whose display hardware has a hard-coded resolution and doesn't support resolution changes in the same way as an external monitor connected to a desktop computer does. The downside of `FullScreenScale` is that it is slower because Hollywood has to scale all rendering operations to the monitor's dimensions. (V7.0)\n\n  - `\"AutoFullScreen\"` This will put the display into full screen mode using the auto scaling engine instead of changing the monitor's resolution but only when running Hollywood on systems that support GPU-accelerated scaling. On all other platforms a normal full screen mode will be used, i.e. Hollywood will change the monitor's resolution to fit the current display dimensions. Currently, GPU-accelerated scaling is supported on Windows, macOS, Android, and iOS which means that on those platforms no monitor resolution change will occur because Hollywood can simply scale the graphics to fit to the current monitor dimensions. On AmigaOS compatibles and Linux, however, there will still be a monitor resolution change with this mode because Hollywood doesn't support GPU-accelerated scaling on those platforms. (V9.1)\n\n  - `\"LayerFullScreen\"` This will put the display into full screen mode using the layer scaling engine instead of changing the monitor's resolution but only when running Hollywood on systems that support GPU-accelerated scaling. On all other platforms a normal full screen mode will be used, i.e. Hollywood will change the monitor's resolution to fit the current display dimensions. Currently, GPU-accelerated scaling is supported on Windows, macOS, Android, and iOS which means that on those platforms no monitor resolution change will occur because Hollywood can simply scale the graphics to fit to the current monitor dimensions. On AmigaOS compatibles and Linux, however, there will still be a monitor resolution change with this mode because Hollywood doesn't support GPU-accelerated scaling on those platforms. (V9.1)\n\n  - `\"FakeFullScreen\"` Open in fake full screen mode. This means that Hollywood will not change the monitor's resolution but the backfill window will be configured to shield the desktop completely. Thus, the user gets the impression as if Hollywood was running full screen, although it is running on the desktop.\n\n  - `\"ModeRequester\"` This will open a display mode requester allowing the user to choose the desired full screen mode for this display.\n\n  - `\"Ask\"` This will open a requester asking the user to choose between windowed and full screen mode.\n\n  - `\"SystemScale\"` If you choose this display mode, the host system's scaling factor will automatically be applied to your display. This can be useful on systems with high-DPI monitors. For example, if your display normally opens in 640x480 pixels and you run it on a monitor that uses twice as many dots per inch (DPI), using `SystemScale` mode will automatically scale your script to 1280x960 pixels so that it doesn't look tiny just because the system uses a high-DPI monitor. Note that by default, using `SystemScale` will activate the auto scaling engine. If you want it to use layer scaling instead, just use the `ScaleMode` tag to change this to layer scaling. Note that `SystemScale` uses the same scale mode as `ScaleFactor` internally, so displays using `SystemScale` will behave as if `ScaleFactor` was specified. It is even possible to specify the `ScaleFactor` tag on top of `SystemScale`, in that case the value specified in `ScaleFactor` will be multiplied by host system's default scaling factor. See [Scaling engines](https://www.hollywood-mal.com/docs/html/hollywood/AutoScalingInfo_.html). Note that on Windows you must also set the `DPIAware` tag to `True` in the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command in order to use `SystemScale`. See [OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html). (V8.0)\n\n  By default, windowed mode will be used.\n\n- `Borderless`: Set this field to `True` if this display shall be a borderless window. Defaults to `False`.\n\n- `Sizeable`: Set this field to `True` if this display shall be resizeable by the user. If `Borderless` is also set to `True`, the size widget will be invisible in the bottom right window corner. Defaults to `False`.\n\n- `Fixed`: If you set this field to `True`, Hollywood will create a fixed, non-draggable window. This is especially useful on full screen displays. Defaults to `False`.\n\n- `Backfill`: This tag can be used to configure the backfill settings for this display. Backfills can be used to create a shielding window that covers the whole area not occupied by your main display. They are only supported if `Mode` has been set to `FullScreen` or `FakeFullScreen`. You can use a static color as a backfill, a gradient, an image, or a texture. You have to pass a table in this tag. The following table tags are currently recognized:\n\n  - `Type`: This field is obligatory. It can be `Color`, `Gradient`, `Texture` or `Picture`. The type must be passed as a string here.\n\n  - `Color`: If you've specified `Color` as backfill type, pass the desired backfill color in this field.\n\n  - `StartColor, EndColor`: If you've specified `Gradient` as backfill type, use these two fields to define the start and end colors for the gradient.\n\n  - `Brush`: If you've specified `Texture` or `Picture` as backfill type, specify the identifier of the brush to use as the source image here. If you want to pass the file name directly, use the `BrushFile` tag instead.\n\n  - `X,Y`: If you've specified `Picture` as backfill type, you can use these two fields to position the picture on the screen. They both default to `#CENTER`.\n\n  - `HideTitleBar`: If you set this tag to `True`, the backfill will also shield the host screen's title bar (for example Finder's title bar on macOS or the Workbench title bar on AmigaOS compatibles). Note that you can also specify `HideTitleBar` outside the `Backfill` tag because on Android and iOS `HideTitleBar` can also be used without a backfill. When used without a backfill, `HideTitleBar` hides the device's status bar on Android and iOS.\n\n  - `BrushFile`: If you've specified `Texture` or `Picture` as backfill type, you can specify the file name of the brush to use as the source image here. The file specified here will be linked to the applet/executable on compilation unless you set `LinkBrushFile` to `False`. If you want to pass a brush identifier, use the `Brush` tag instead. (V4.0)\n\n  - `LinkBrushFile`: If `BrushFile` is specified this tag can be used to declare whether or not the brush file shall be linked into the applet/executable on compilation. Defaults to `True` which means that the brush file will be linked. (V4.0)\n\n  - `Transparency`: If backfill type is `Picture` you can specify a [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) here that shall be shown transparently. Defaults to `#NOTRANSPARENCY`. (V4.0)\n\n  - `ScalePicture`: If backfill type is `Picture` you can use this tag to define whether or not the picture shall be scaled to fit the backfill window's dimensions. Defaults to `False`. (V4.0)\n\n  - `SmoothScale`: Set this tag to `True` if you want to have interpolated scaling of the picture that should be used as a backfill image. This tag is only handled if `ScalePicture` has been set to `True`. Defaults to `False`. (V6.0)\n\n- `ScrWidth, ScrHeight`: If `Mode` has been set to `FullScreen`, these tags allows you to set the desired dimensions for the full screen mode. Defaults to what has been set when creating the display. Starting with Hollywood 7.0 you can also set these tags to the special constant `#NATIVE`. In that case, Hollywood will use the dimensions of the display's host device. (V3.0)\n\n- `ScrDepth`: If `Mode` has been set to `FullScreen`, this tag allows you to set the desired depth for the full screen mode. Defaults to what has been set when creating the display. (V3.0)\n\n- `HidePointer`: If you specify this field, the mouse pointer will automatically be hidden as soon as Hollywood enters full screen or fake full screen mode. This argument has the advantage over the [HidePointer()](https://www.hollywood-mal.com/docs/html/hollywood/HidePointer_.html) command in that it only hides the mouse pointer in full screen mode. If Hollywood opens in windowed mode, the mouse pointer will remain visible because hiding the mouse pointer in windowed mode usually causes confusion with the user. Defaults to `False`. (V3.0)\n\n- `NoModeSwitch`: If you set this tag to `True`, it will not be possible to switch this display between windowed and full screen mode by pressing the CMD+RETURN (LALT+RETURN on Windows) hotkey. If `NoModeSwitch` is specified, this display will always remain in its initial display mode and no switches between windowed and full screen will be allowed. Defaults to `False`. (V3.0)\n\n- `NoHide`: Set this tag to `True` if you do not want this display to have an iconify widget. If you do not specify this tag, your display will always get an iconify widget. Defaults to `False`. (V4.5)\n\n- `ScaleMode`: By setting this argument, you can choose a scaling engine for this display. `ScaleMode` can be set to one of the following parameters: `#SCALEMODE_LAYER` (uses layer scale engine), `#SCALEMODE_AUTO` (uses auto scaling engine) or `#SCALEMODE_NONE` (uses no scaling engine). If `ScaleMode` is not specified, the display's scaling mode will be set to `#SCALEMODE_NONE`, i.e. no scaling is active. When specifying `ScaleMode`, you will usually also want to set either the `ScaleWidth` and `ScaleHeight` arguments or the `ScaleFactor` or the `SystemScale` display mode to define the scaling dimensions (see below). See [Scaling engines](https://www.hollywood-mal.com/docs/html/hollywood/AutoScalingInfo_.html). (V4.5)\n\n- `ScaleWidth, ScaleHeight`: These two can be used to specify the desired scaling dimensions if a scaling engine is active (check the documentation of `ScaleMode` above). You can pass the size either as a direct value or you can pass a percentage string (i.e. `ScaleWidth`=\"200%\"). If you pass a percentage string, the scaling size is set relative to the original size (i.e. `ScaleWidth`=\"200%\" means twice the original width). Starting with Hollywood 7.0 you can also set these tags to the special constant `#NATIVE`. In that case, Hollywood will use the dimensions of the display's host device. (V4.5)\n\n- `SmoothScale`: If `ScaleMode` is set, you can use this argument to specify whether or not Hollywood shall use anti-aliased scaling. Defaults to `False` which means no anti-aliasing. Note that anti-aliased scaling is much slower than normal scaling. (V4.5)\n\n- `Hidden`: Set this to `True` if you want this display to be initially hidden. If you set this to `True`, the display will not be shown until you call [OpenDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/OpenDisplay_.html) on it. You could also use this tag to run a Hollywood script that does not open a display at all but please keep in mind that some commands (e.g. [WaitLeftMouse()](https://www.hollywood-mal.com/docs/html/hollywood/WaitLeftMouse_.html)) only work with a visible display. (V4.5)\n\n- `Active`: This tag allows you to specify the display that will be active on startup. Please note that only one display can be the active one so it is not valid to set `Active` to `True` for multiple displays. This will yield undefined results. If you do not specify `Active` for any of your displays, Hollywood will make the display number 1 the active one by default. (V4.5)\n\n- `DragRegion`: This tag allows you to define a custom drag region for this display. Custom drag regions are only supported for borderless displays, so you need to set `Borderless` to `True` too if you use this tag. You can define multiple drag regions with this tag; this is why you have to pass a table which contains a list of tables, each defining a single rectangular region, to this tag. Each table in the list must have the following tags specified: `Type`, `X`, `Y`, `Width`, and `Height`. `Type` currently must always be set to `#BOX` because currently, only rectangular regions are supported. This might sound pretty complicated, but in fact it is really easy. All you have to remember is to pass a list of tables to this tag. Even if you only want a single rectangular drag region, you have to pass a list. See below for an example. (V4.5)\n\n- `SizeRegion`: This tag allows you to define a custom size region for this display. Custom size regions are only supported for borderless displays, so you need to set `Borderless` to `True`, too if you use this tag. You can define multiple size regions with this tag; this is why you have to pass a table which contains a list of tables, each defining a single rectangular region, to this tag. Each table in the list must have the following tags specified: `Type`, `X`, `Y`, `Width`, and `Height`. `Type` currently must always be set to `#BOX` because currently, only rectangular regions are supported. This might sound pretty complicated, but in fact it is really easy. All you have to remember is to pass a list of tables to this tag. Even if you only want a single rectangular size region, you have to pass a list. See below for an example. (V4.5)\n\n- `Layers`: Set this tag to `True` if you want to enable layers for this display. If you set this tag to `True`, you do not have to call [EnableLayers()](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) for this display again. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).. This tag is set to `False` by default. (V4.5)\n\n- `UseQuartz`: This tag is only supported if Hollywood is running on macOS. If you set this tag to `True`, this display will draw its graphics using the Quartz 2D API. If it is set to `False`, QuickDraw will be used. Note that this argument is only supported by the PowerPC version of Hollywood. The x86/x64 versions of Hollywood for macOS will always use Quartz 2D. Defaults to `False`. (V4.5)\n\n- `NoClose`: Set this tag to `True` if this display shall not have a close box in its window frame. Think twice before using this tag because it might confuse the user and you must provide a replacement for closing the display (e.g. by listening to the escape key etc.). Defaults to `False`. (V4.5)\n\n- `FitScale`: This tag is only handled when either `#SCALEMODE_AUTO` or `#SCALEMODE_LAYER` is active in `ScaleMode` (see above). In that case, setting `FitScale` to `True` will set the scaling resolution of the display to the current screen's resolution so that the script will always fill out the whole screen. This is basically the same as passing the current screen's dimensions in `ScaleWidth` and `ScaleHeight`. Note that using `FitScale` might distort the appearance of your script in case the current screen resolution uses a different aspect-ratio than your script. To prevent distortion, you have to use `KeepProportions` (see below). Defaults to `False`. (V4.7)\n\n- `KeepProportions`: This tag is only handled when either `#SCALEMODE_AUTO` or `#SCALEMODE_LAYER` is active in `ScaleMode` (see above). In that case, passing `True` here will not allow the user to distort the resolution of the current script by resizing the window to odd sizes. Instead, black borders will be used to pad the non-proportional window regions. The display itself will always keep its aspect-ratio. This is very useful for scripts that should not be distorted. (V4.7)\n\n- `FillStyle`: This tag allows you to define a background fill style for this display. This tag is only handled if the `BGPic` tag is not specified. The default setting for this tag is `#FILLCOLOR`. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). (V5.0)\n\n- `Color`: This tag is only handled if you did not specify a BGPic and fill style is set to `#FILLCOLOR`. In that case, you can use this tag to specify the color for the background picture that will be automatically created for this display.\n\n- `TextureBrush`: If the `FillStyle` tag has been set to `#FILLTEXTURE`, you can use this tag to specify the identifier of the brush that shall be used for texturing. (V5.0)\n\n- `TextureX, TextureY`: These tags control the start offset inside the texture brush and are only supported if `FillStyle` has been set to `#FILLTEXTURE`. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). (V5.0)\n\n- `GradientStyle`: If the `FillStyle` tag has been set to `#FILLGRADIENT`, you can use this tag to specify the gradient type to use. This can be `#LINEAR`, `#RADIAL`, or `#CONICAL`. (V5.0)\n\n- `GradientAngle`: Specifies the orientation of the gradient if filling style style is set to `#FILLGRADIENT`. The angle is expressed in degrees. Only possible for `#LINEAR` and `#CONICAL` gradients. (V5.0)\n\n- `GradientStartColor, GradientEndColor`: Use these two to configure the colors of the gradient if filling style is set to `#FILLGRADIENT`. (V5.0)\n\n- `GradientCenterX, GradientCenterY`: Sets the center point for gradients of type `#RADIAL` or `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBalance`: This tag controls the balance point for gradients of type `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBorder`: This tag controls the border size for gradients of type `#RADIAL`. Must be a floating point value between 0.0 and and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientColors`: This tag can be used to create a gradient between more than two colors. This has to be set to a table that contains sequences of alternating color and stop values. If this tag is used, the `GradientStartColor` and `GradientEndColor` tags are ignored. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `KeepScreenOn`: This tag is only supported if Hollywood is running on Android and iOS. If you set this tag to `True`, battery saving mode will be disabled on mobile devices. This means that the device's screen will never be dimmed or turned off to save energy. Useful for scripts that do not require user input. Defaults to `False`. (V5.1)\n\n- `PubScreen`: This tag can be used to specify the public screen this display should be opened on. You have to pass a string that contains the name of the public screen to use here. This is only supported on AmigaOS compatible operating systems. Please note that if you use multiple displays on multiple public screens, it is absolutely mandatory that the individual public screens use the same pixel format, i.e. it is not allowed to have one display on a 16-bit public screen while the other display is on a 32-bit public screen. The pixel format must be identical for all public screens. (V5.2)\n\n- `HideFromTaskbar`: This tag is only supported if Hollywood is running on Windows. If you set this tag to `True`, your display will not get an entry in the Windows taskbar. This is useful if your application has added an icon to the system tray and you want it to be accessible from the system tray only. Defaults to `False`. (V5.3)\n\n- `HideOptionsMenu`: This tag is only supported on Android devices. When the user opens the options menu on Android devices, Hollywood will allow the user to configure several display parameters like enabling or disabling autoscaling or layerscaling. If you do not want to give the user this possibility to change the display parameters via the app's options menu, set this tag to `True`. Defaults to `False`. (V5.3)\n\n- `Orientation`: This tag is only supported on mobile platforms. It allows you to specify a hard-coded orientation for your script. If you set this tag, Hollywood will not react to orientation changes when the user rotates the device. Instead, it will keep the orientation mode that you specified here. The following values are possible:\n\n  ```\n  #ORIENTATION_NONE\n  #ORIENTATION_PORTRAIT\n  #ORIENTATION_LANDSCAPE\n  #ORIENTATION_PORTRAITREV\n  #ORIENTATION_LANDSCAPEREV\n  ```\n\n  Defaults to `#ORIENTATION_NONE` which means that there is no fixed orientation and that Hollywood should dynamically adapt to orientation changes. (V5.3)\n\n- `NoHardwareScale`: This tag is only supported on Android. For performance reasons Hollywood will try to use hardware-accelerated scaling when autoscaling is enabled on Android devices by default. Some devices, however, do not implement hardware-accelerated scaling properly so if you experience strange behaviour when using autoscale mode, try to disable hardware-accelerated scaling using this tag and see if it helps. This tag is obsolete since Hollywood 8.0. Hollywood will always use hardware-accelerated scaling now. (V5.3)\n\n- `DisableBlanker`: Set this tag to `True` if you want to disable the screen blanker while this display is open. Defaults to `False`. (V6.0)\n\n- `Menu`: This tag can be used to attach a menu strip to this display. You have to pass the identifier of a menu strip that has been created using the [@MENU](https://www.hollywood-mal.com/docs/html/hollywood/atMENU_.html) preprocessor command or the [CreateMenu()](https://www.hollywood-mal.com/docs/html/hollywood/CreateMenu_.html) function to this tag. It is also possible to attach a single menu strip to multiple displays. See [MENU](https://www.hollywood-mal.com/docs/html/hollywood/atMENU_.html). (V6.0)\n\n- `Monitor`: This tag allows you to specify the monitor this display should be opened on. Monitors are counted from 1 to the number of monitors available to the system. Please note that if you set this tag, functions that accept display coordinates, e.g. [MoveDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/MoveDisplay_.html), will interpret them as values relative to the origin of the monitor specified in the `Monitor` tag. This tag defaults to 1 which means that the display should open on the primary monitor. (V6.0)\n\n- `XServer`: This tag can be used to specify the X Server that should host this display. By default, Hollywood will use the X Server that has been specified in the `DISPLAY` environment variable. If you want Hollywood to use a different X Server for your display, use this tag. This tag is only available in the Linux version of Hollywood. (V6.0)\n\n- `ScreenTitle`: On AmigaOS, this tag can be used to set the text that should be shown in the screen's title bar whenever the display is active. By default, \"Workbench screen\" will be shown. This tag is only available in the AmigaOS compatible versions of Hollywood. (V6.0)\n\n- `ScreenName`: If this display is to be opened in full screen mode, you can set the desired public screen name of the display's own screen with this tag. By default, Hollywood will use \"HOLLYWOOD.X\" where \"X\" is replaced by a vacant index. This tag is only available in the AmigaOS compatible versions of Hollywood. (V6.0)\n\n- `RememberPosition`: Set this to `True` if you want this display to remember its position and size. This is obviously only possible with windowed displays. It won't work for full screen displays. You also have to specify a unique identifier for your application using the [@APPIDENTIFIER](https://www.hollywood-mal.com/docs/html/hollywood/atAPPIDENTIFIER_.html) preprocessor command if you want to use this tag. The display also must use a numeric identifier, i.e. you cannot use this tag for displays which use [automatic id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html). Note that this tag can be overridden by the `-overrideplacement` argument. If you start Hollywood or your compiled script using the `-overrideplacement` argument, any saved position or size information is ignored. See [Console arguments](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html). (V6.1)\n\n- `Maximized`: If you set this tag to `True`, the display will open in maximized mode. This is only possible if the display is sizeable. This tag is currently only supported on Windows. (V7.0)\n\n- `TrapRMB`: On AmigaOS, if this is set to `True`, Hollywood will deliver right mouse button events also when a menu strip is associated with this display. The downside is that menu access will only be possible via the screen's title bar then. This tag is only handled in case your display has a menu strip, otherwise it has no effect at all. `TrapRMB` defaults to `False` which means that when a menu strip is associated with a display, right mouse button events aren't generated. This tag is only available in the AmigaOS compatible versions of Hollywood. (V7.0)\n\n- `NoScaleEngine`: This tag is only handled if `Mode` is set to `FullScreenScale` for your display. In that case Hollywood will not use any scaling engine but will simply open your display in the same dimensions as the monitor's resolution. Your script then needs to manually adapt to the monitor's resolution. This allows you to write scripts which can dynamically adapt to different resolutions without simply scaling their graphics. (V7.0)\n\n- `NoLiveResize`: On many platforms Hollywood will use live resizing when the user is resizing a display. This means that the display's contents will be automatically scaled while the user is resizing the display. If you don't want this, you can set this tag to `True`. (V7.0)\n\n- `NativeUnits`: If you set this tag to `True`, Hollywood will use the host system's native coordinate space and units instead of pixels. This currently only has an effect on macOS and iOS because both operating systems use custom units instead of pixels when running on a Retina device. By default, Hollywood will enforce the use of pixels on Retina Macs and iOS devices for cross-platform compatibility reasons but you may want to override this setting by using this tag. (V7.0)\n\n- `AlwaysOnTop`: If you set this tag to `True`, the display will always stay on top of other windows. Use this tag with care because it can be quite annoying to the user. (V7.1)\n\n- `NoCyclerMenu`: On Android, Hollywood will automatically add a cycler menu to the options menu in the app's action bar whenever more than one Hollywood display is open. You can then use this cycler menu to conveniently switch to other displays. If you don't want Hollywood to add such a cycler menu, set this tag to `False`. This is supported only on Android. Defaults to `False`. (V8.0)\n\n- `HideTitleBar`: Set this to `True` to hide the status bar on iOS or the action bar on Android. By default, both the status bar and the action bar are always visible. Defaults to `False`. (V8.0)\n\n- `Subtitle`: This tag allows you to set the display's subtitle. This is only supported on Android. The display subtitle is shown in the app's action bar below the display title set using the `Title` tag above. By default, there is no subtitle. (V8.0)\n\n- `SingleMenu`: This tag allows you to place menu items in the root level of the action bar's options menu on Android. Normally, this is not possible because on desktop systems menu items always have to be members of certain root groups (e.g. \"File\", \"Edit\", \"View\", etc.) When using menu strips on Android, Hollywood will of course replicate the desktop menu behaviour by creating individual submenus for those root groups. This means that the user has to tap at least twice to select a menu item because there won't be any menu items in the root level, they will always be in submenus instead. If you don't want Hollywood to create those submenus but just place all items in the root level, set this tag to `True`. This is especially useful if there are only a few menu items and it doesn't make sense to place them in submenus. This tag is only available on Android. Defaults to `False`. (V8.0)\n\n- `ScaleFactor`: If a scaling engine has been activated using the `ScaleMode` tag (see above), this tag can be used to apply a global scaling factor to your display. The scaling factor must be specified as a fractional number indicating the desired scaling coefficient, e.g. a value of 0.5 shrinks everything to half of its size whereas a value of 2.0 scales everything to twice its size. Note that setting `ScaleFactor` will make the script behave slightly different than setting `ScaleWidth` and `ScaleHeight` (see above). The latter will enforce a fixed display size which will never be changed unless the user manually uses the mouse to change the display size. Setting `ScaleFactor`, however, will apply the scale factor to all new BGPics and display sizes so the display size may change if the BGPic size changes or the script changes the display size. Thus, using `ScaleFactor` is perfect for scaling a script for a high dpi display because it makes sure that the script behaves exactly the same but just appears larger (or smaller if you want!). You can also set the `Mode` tag to `SystemScale` to automatically apply the host system's scaling factor to your display (see above). See [Scaling engines](https://www.hollywood-mal.com/docs/html/hollywood/AutoScalingInfo_.html). (V8.0)\n\n- `ImmersiveMode`: On Android, this tag allows you to put the display into immersive mode. Immersive mode is a special full screen mode that hides most system UI components (like the status bar) to give your application as much screen space as possible. If you want your display to use immersive mode, you have to set `ImmersiveMode` to one of the following tags. All those modes only differ in the way the user can bring back the system bars and whether or not your script is notified about it.\n\n  - `#IMMERSIVE_NORMAL`: Normal immersive mode. Users can bring back the system bars by swiping from any edge where there is a hidden system bar. You will be notified about system bar visibility changes via the `ShowSystemBars` and `HideSystemBars` event handlers.\n\n  - `#IMMERSIVE_LEANBACK`: Lean back immersive mode. In this mode, system bars can be brought back by tapping anywhere on the screen. You will be notified about system bar visibility changes via the `ShowSystemBars` and `HideSystemBars` event handlers.\n\n  - `#IMMERSIVE_STICKY`: Sticky immersive mode. This is the same as `#IMMERSIVE_NORMAL` except that there will be no notification when the system bar visibility changes. Instead, the raw swipe events will be forwarded to you even if they caused the system bars to reappear.\n\n  Note that both `#IMMERSIVE_NORMAL` and `#IMMERSIVE_LEANBACK` will notify your script about system bar visibility changes using the `ShowSystemBars` and `HideSystemBars` event handlers. You can listen to those events using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). (V9.0)\n\n- `Palette`: If this tag is set to the identifier of a palette, Hollywood will create a palette display for you. Palettes can be created using functions like [CreatePalette()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePalette_.html) or [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html). Alternatively, you can also set this tag to one of Hollywood's inbuilt palettes, e.g. `#PALETTE_AGA`. See [SetStandardPalette](https://www.hollywood-mal.com/docs/html/hollywood/SetStandardPalette_.html). (V9.0)\n\n- `FillPen`: If the `Palette` tag is set (see above), you can use the `FillPen` tag to set the pen that should be used for filling the display's background. (V9.0)\n\n- `SoftwareRenderer`: On Windows systems, you can set this tag to `True` to disable Hollywood's GPU-accelerated Direct2D renderer on Windows systems. Hollywood will use its CPU-based renderer for maximum compatibility then. This is mostly useful for testing purposes. Normally, there shouldn't be any reason for setting this tag to `True`. (V9.0)\n\n- `VSync`: On Windows systems, this tag can be set to `True` to force Hollywood's renderer to throttle refresh to the monitor's refresh rate. This means that you'll no longer have to use functions like [VWait()](https://www.hollywood-mal.com/docs/html/hollywood/VWait_.html) to throttle drawing. However, do note that if you set this to `True`, you must make sure to draw in full frames only otherwise drawing will become extremely slow. Full frame drawing can be achieved e.g. by either using a double buffer or by using [BeginRefresh()](https://www.hollywood-mal.com/docs/html/hollywood/BeginRefresh_.html) and [EndRefresh()](https://www.hollywood-mal.com/docs/html/hollywood/EndRefresh_.html). Also note that `VSync` is currently only supported on Windows and only if Hollywood uses its Direct2D backend. Direct2D is not available before Windows Vista SP2. (V9.0)\n\n- `ScaleSwitch`: When switching a display between windowed and full screen mode by pressing the CMD+RETURN (LALT+RETURN on Windows) hotkey or passing the `#DISPMODE_MODESWITCH` mode to [ChangeDisplayMode()](https://www.hollywood-mal.com/docs/html/hollywood/ChangeDisplayMode_.html), Hollywood will not change the monitor's screen mode on systems where hardware-accelerated scaling is available. On those systems, Hollywood will just simulate full screen mode by scaling the display to the monitor's current resolution. Only on older systems or platforms that don't support hardware-accelerated scaling will Hollywood switch the monitor to a new resolution. The reason why switching the monitor's resolution is no longer done by default is that it often takes considerable time for the monitor to do so and not all display devices support it (e.g. laptop screens often don't support it). If you want to force Hollywood to always change the monitor's resolution when going full screen and never simulate full screen mode by scaling, just set this tag to `True`. Defaults to `False`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to display adapter plugins. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to display adapter plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nMany of the tags from above - especially the ones used to configure the appearance of the display - are also available from the [command line](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) to give the user some flexibility in controlling the appearance of the script. For example, it is possible to change the display mode of your script (windowed, full screen, etc.) or window style (borderless, sizeable, etc.) from the command line as well. If you do not want that, you have to use the [-locksettings](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) argument when compiling your scripts. This will forbid any user changes to the settings defined by you in this preprocessor command.",
    "inputsDocs": "* `table` — a table containing one or more of the fields listed above",
    "example": "```\n@DISPLAY {Title = \"My App\", X = #LEFT, Y = #TOP, Width = 320,\n    Height = 240, Color = #WHITE}\n```\n\nThe above declaration opens a 320x240 sized display with a white colored background. The display is positioned at top-left edge of the host screen. The window title will be \"My App\".\n\n---\n\n```\n@DISPLAY {Width = 640, Height = 480, Borderless = True,\nDragRegion = {\n{Type = #BOX, X=0, Y=460, Width=640, Height=20}, ; bottom drag bar\n{Type = #BOX, X=0, Y=0, Width=20, Height=480} ; left drag bar\n}\n}\n```\n\nThe code above will open a borderless 640x480 display. The drag bar of the display will not be in the top region of the display but it will be put into the bottom and the left regions of the display by specifying a custom drag region using the `DragRegion` tag. Note that the `DragRegion` tag always requires you to pass a list of rectangular regions, even if you are only using a single region. See above for more information.",
    "platforms": ["All"],
    "category": "Display"
  },
  {
    "name": "@SCREEN",
    "helpId": "atSCREEN",
    "shortDescription": "configure screen mode for script",
    "version": "4.5",
    "synopsis": "@SCREEN table",
    "functionDocs": "Important note: This preprocessor command is deprecated since Hollywood 6.0. As Hollywood 6.0 introduced support for multiple monitors, there can also be multiple displays in full screen mode on separate monitors. That is why a single `@SCREEN` preprocessor command is no longer sufficient. Instead, display mode parameters should now be configured using the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command or the [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) function. You can still use this preprocessor command but it will affect the first display only.\n\nThis preprocessor command can be used to configure the initial screen mode for your script. By default, all Hollywood scripts will open in a window. If you want your script to open in full screen mode by default, you can use this preprocessor command to achieve this.\n\nBefore Hollywood 4.5, screen mode was configured using the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command. Hollywood 4.5, however, introduced multiple displays which made it necessary to move the screen mode settings into its own preprocessor command because it is impossible to have multiple displays running in full screen mode.\n\nYou have to pass a table to this command. The following table tags are currently recognized:\n\n- `Mode`: Defines which display mode your script should start in. This can be either `Windowed`, `FullScreen`, `FullScreenScale`, `FakeFullScreen`, or `Ask`. See [Console arguments](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html). If you specify `Ask`, Hollywood will ask the user if the script should be run in full screen or windowed mode. Defaults to `Windowed`.\n\n- `HideTitleBar`: This field can be used to hide the screen's title bar. It is only effective when Hollywood opens on its own screen or when you use a backfill. Defaults to `False`.\n\n- `Desktop`: If you set this field to `True`, the initial background picture will be a copy of your desktop screen. This can be used for some nice effects with that screen. Hollywood will also automatically open a borderless window if this field is `True`. Note that setting this attribute puts Hollywood in a special mode and you must not open any other displays.\n\n- `Width, Height`: If `Mode` is set to `FullScreen`, you can use these two to specify the dimensions for the screen that Hollywood should open. If you pass 0 in here, Hollywood will use the dimensions of the desktop screen. If you do not specify them at all, Hollywood will automatically determine a screen size that fits.\n\n- `Depth`: This field can be used to specify the color depth of the screen that Hollywood should open. Thus, it can only be used when Hollywood opens in full screen mode. If you do not specify this field, Hollywood will use the color depth of the desktop screen for the new screen. Normally, you should not use this field and leave the choice to Hollywood to detect an appropriate depth for the current system.\n\nAlternatively, screen mode settings can also be configured from the [command line](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html). If you want to disable this, you should compile your scripts using the [-locksettings](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) console argument.\n\nYou can also switch between full screen and windowed mode at run time using the [ChangeDisplayMode()](https://www.hollywood-mal.com/docs/html/hollywood/ChangeDisplayMode_.html) command.",
    "inputsDocs": "* `table` — table declaring the initial screen mode for the script",
    "example": "```\n@SCREEN {Mode = \"FullScreen\", Width = 800, Height = 600}\n```\n\nThis declaration will set up 800x600 as the initial screen mode for the script.",
    "platforms": ["All"],
    "category": "Display"
  },
  {
    "name": "@DIRECTORY",
    "helpId": "atDIRECTORY",
    "shortDescription": "link whole directory into applet or executable",
    "version": "8.0",
    "synopsis": "@DIRECTORY id, dir$[, table]",
    "functionDocs": "This preprocessor command can be used to link the whole directory specified in `dir$` into your applet or executable when compiling your script. This makes it possible to conveniently link a lot of files into your applet or executable when compiling your script because you only need to add one additional line to your script instead of individual lines for each file.\n\nNote that if you use `@DIRECTORY` you have to use the [GetDirectoryEntry()](https://www.hollywood-mal.com/docs/html/hollywood/GetDirectoryEntry_.html) function to access individual files and subdirectories stored in the directory that you have linked to your applet or executable. See below for an example. In case you are just running your script using the Hollywood interpreter, [GetDirectoryEntry()](https://www.hollywood-mal.com/docs/html/hollywood/GetDirectoryEntry_.html) will simply return the string you passed to it so that the script will work identically no matter if you're running it as a script using the Hollywood interpreter or if you've compiled it as an applet or executable. See [GetDirectoryEntry](https://www.hollywood-mal.com/docs/html/hollywood/GetDirectoryEntry_.html).\n\nThis preprocessor command also accepts an optional table argument that can be used to configure further options. The following tags are currently supported by the optional table argument:\n\n- `Recursive`: If this tag is set to `True`, `@DIRECTORY` will link all files in subdirectories of `dir$` as well. This is the default. Set it to `False` if you don't want `@DIRECTORY` to recurse into subdirectories as well.\n\n- `Link`: Set this field to `False` if you do not want to have this directory linked to your executable/applet when you compile your script. This field defaults to `True` which means that the directory will be linked to your executable/applet when Hollywood is in compile mode.\n\nNote that `@DIRECTORY` doesn't only link all files and subdirectories inside `dir$` into your applet or executable, it will also create a directory object which can then be used with all functions that support directory objects, e.g. [NextDirectoryEntry()](https://www.hollywood-mal.com/docs/html/hollywood/NextDirectoryEntry_.html) and [RewindDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/RewindDirectory_.html). It is even possible to iterate over all files and subdirectories linked by `@DIRECTORY` to your script. See below for an example.\n\nFinally, please note that only file/directory names, sizes, and the files' actual content will be linked to your applet or executable. File attributes like protection flags, date stamps, and comments won't be linked so if you try to query them, you'll get some default values instead.\n\nIf you want to open directories at runtime, please use the [OpenDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/OpenDirectory_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this directory later in the code\n* `dir$` — the directory you want to have linked to your applet or executable\n* `table` — optional: a table containing further options (see above)",
    "example": "```\n@DIRECTORY 1, \"data\"\nLoadBrush(1, GetDirectoryEntry(\"data/title.png\"))\n```\n\nThe code above shows how to link all files and subdirectories inside the `data` directory to your applet or executable and then load the file `title.png` from this directory into brush 1. Note that in case the script hasn't been compiled as an applet or executable, [LoadBrush()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBrush_.html) will simply load the file from `data/title.png`. In case the script has been compiled as an applet or executable, however, the file `title.png` is loaded directly from the applet or executable because it has been linked to it.\n\n---\n\n```\n@DIRECTORY 1, \"data\"\n\nFunction p_DumpDirs(d$, indent)\n    Local handle\n    If d$ <> \"\"\n        handle = OpenDirectory(Nil, GetDirectoryFile(1, d$))\n    Else\n        handle = 1\n    EndIf\n    Local e = NextDirectoryEntry(handle)\n    While e <> Nil\n        If e.Type = #DOSTYPE_DIRECTORY Then e.size = 0\n        NPrint(RepeatStr(\" \", indent) .. IIf(e.type = #DOSTYPE_FILE,\n            \"File:\", \"Directory:\") .. \" \" .. e.name .. \" \" .. e.size\n            .. \" \" .. HexStr(e.flags) .. \" \" .. e.time)\n        If e.Type = #DOSTYPE_DIRECTORY Then p_DumpDirs(FullPath(d$,\n            e.name), indent + 4)\n        e = NextDirectoryEntry(handle)\n    Wend\n    If GetType(handle) = #LIGHTUSERDATA Then CloseDirectory(handle)\nEndFunction\n\np_DumpDirs(\"\", 0)\n```\n\nThe code above shows how to recursively print all files and directories in a directory that has been linked to the applet or executable.",
    "platforms": ["All"],
    "category": "Dos"
  },
  {
    "name": "@FILE",
    "helpId": "atFILE",
    "shortDescription": "open a file for later use",
    "version": "2.0",
    "synopsis": "@FILE id, filename$[, table]",
    "functionDocs": "This preprocessor command can be used to open a file so you can use it later. The file will not be loaded completely into memory, it will just be opened as if you called [OpenFile()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFile_.html). The file will always be opened in read-only mode. You cannot use this preprocessor command to write to files.\n\nThe innovative feature of the `@FILE` preprocessor command is that when you compile your script, the file will be linked to it and you can still access it in the same way as if it were a normal file on your harddisk, i.e. you can use the normal functions of the DOS library on the file.\n\nThe third argument is optional. It is a table that can be used to set further options for the operation. The following fields of the table can be used:\n\n- `Link`: Set this field to `False` if you do not want to have this file linked to your executable/applet when you compile your script. This field defaults to `True` which means that the file is linked to your executable/applet when Hollywood is in compile mode.\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to file adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nIf you want to open the file manually, please use the [OpenFile()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFile_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this file later in the code\n* `filename$` — the file you want to have opened\n* `table` — optional: a table containing further options",
    "example": "```\n@FILE 1, \"Highscore.txt\"\n```\n\nThe declaration above opens the file \"Highscore.txt\" for further processing in the script.",
    "platforms": ["All"],
    "category": "Dos"
  },
  {
    "name": "@ERROR",
    "helpId": "atERROR",
    "shortDescription": "abort compilation with an error message",
    "version": "6.1",
    "synopsis": "@ERROR msg$",
    "functionDocs": "Whenever the preprocessor reaches this command, compilation will be immediately aborted and the specified error message will be shown. This is only useful for debugging purposes.",
    "inputsDocs": "* `msg$` — error message to show",
    "resultsDocs": "none",
    "platforms": ["All"],
    "category": "ErrorManagement"
  },
  {
    "name": "@ICON",
    "helpId": "atICON",
    "shortDescription": "preload an icon for later use",
    "version": "8.0",
    "synopsis": "@ICON id, filename$[, table]  \n@ICON id, table",
    "functionDocs": "This preprocessor command can be used to preload an icon for later use, either from image file sources or from brush sources. In Hollywood, an icon is a collection of the same image in different sizes and color depths.\n\nBy using individually designed images for each size instead of just scaling one and the same image to each size, a better quality is achieved, especially when it comes to smaller image sizes, which look much better when they are specifically designed for their resolution. Typical sizes for the individual images within an icon are 16x16, 24x24, 32x32, 48x48, 64x64, 96x96, 128x128, 256x256, and 512x512, but they can also be completely arbitrary. The advantage of having the same image in different sizes in an icon is that Hollywood can choose an appropriate size depending on the screen resolution.\n\nFurthermore, images inside Hollywood icons can also be specifically designed for different color depths. For example, you can provide 24x24 images in various color depths, e.g. in 256 colors (8 bits) and in true color with alpha channel (32 bits). Thus, it is possible to have images of the same size inside an icon as long as they differ in their color depth. This once again gives Hollywood the advantage of choosing the best image from an icon for a certain screen resolution and color depth.\n\nFinally, each image inside an icon set can have two different states: normal and selected. Normally, you only ever need the normal state, but on AmigaOS and compatibles the selected state is sometimes used as well.\n\nThis preprocessor command can be used in two different ways: You can either specify a single file in `filename$` to be loaded as a Hollywood icon or you can specify a table to create a Hollywood icon from individual images which may be specified as either brushes or external files.\n\nIn case you use the first syntax, i.e. you pass a single file in `filename$`, `@ICON` expects the file to be in Hollywood's custom PNG icon format and `@ICON` does the same as the [LoadIcon()](https://www.hollywood-mal.com/docs/html/hollywood/LoadIcon_.html) command in that case, except that the icon is preloaded and will be linked to the applet or executable on compiling. See [LoadIcon](https://www.hollywood-mal.com/docs/html/hollywood/LoadIcon_.html).\n\nThe first syntax also accepts a table argument that follows the `filename$` parameter. The following fields in the table can be set in case you use the first syntax:\n\n- `Link`: Set this field to `False` if you do not want to have this icon linked to your executable/applet when you compile your script. This field defaults to `True` which means that the icon is linked to your executable/applet when Hollywood is in compile mode.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this icon. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nAlternatively, you can use the second syntax which allows you to create an icon from a set of source images which may either be external files or Hollywood brushes. In that case, you have to specify a single table argument which must contain a number of subtables, one for each image size you wish to add to the icon. This is similar to the way the [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) command works. See [CreateIcon](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html).\n\nThe individual subtables can use the following tags:\n\n- `Type`: This tag allows you to set the source type of the image you wish to add to the icon. This can be `#BRUSH` if you want to add a brush, or `#FILE` if you would like to add an image from an external file source. The default is `#FILE`. Note that that default is different to the default used by [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) and [AddIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/AddIconImage_.html), which is `#BRUSH`.\n\n- `Image`: This tag specifies the actual image source and must be set in every subtable. If `Type` has been set to `#BRUSH`, you have to set this tag to the identifier of a brush you want to add to the icon. The brush can be an RGB or palette brush. Otherwise, `Image` needs to be set to the path of an image file that should be added to the icon. The image file may be in any of the image file formats supported by Hollywood. Note that if the image file specified here has an alpha channel, the alpha channel data is loaded automatically. If it is a palette image and the `LoadPalette` tag is set to `True` (see below), the image's transparent pen will also be loaded automatically. Also note that in every icon, each image size must only be used once for each color depth, i.e. it is not possible to add two 48x48 images that use the same color depth to a single icon. There can only be one image for each size and color depth in every icon. Note that if the image you specify here is in a vector graphics format, i.e. either a vector brush or a file in a vector image format, you mustn't pass any other images because in the case of vector graphics, one image is used for all sizes and Hollywood will automatically render it to all sizes it needs. So if you use vector instead of raster graphics, there must only be one subtable in the table you pass to `@ICON`.\n\n- `SelImage`: This tag allows you to include an additional image that should be used as a selected version of the image specified in `Image`. This tag is optional. If you set it, the image specified here must be of exactly the same size as the one specified in `Image`. Besides that, `SelImage` is used in the very same way as `Image`, i.e. it depends on the image type set in `Type` what you have to pass here, either a brush identifier or a path to an external image file.\n\n- `Standard`: This tag allows you to set the image specified in this subtable as the standard size for the icon. Setting a standard size is important in some contexts, so that Hollywood knows which image to pick for higher resolutions, e.g. if you designate a 64x64 image inside an icon as the standard size, Hollywood knows to pick the 128x128 image in case the monitor's resolution uses a DPI setting that is twice as high as the normal setting. Obviously, there can be only one standard image inside every icon, so setting this tag to `True` twice will result in an error. Also note that it is not necessary to declare a standard icon size, but for many use cases it is recommended to do it.\n\n- `Link`: Set this field to `False` if you do not want to have the image files specified in `Image` and `SelImage` linked to your executable/applet when you compile your script. This field defaults to `True` which means that the image files specified in `Image` and `SelImage` will be linked to your executable/applet when Hollywood is in compile mode. Obviously, this tag is only used when `Type` is set to `#FILE`.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load the image files specified in `Image` and `SelImage`. If specified, this must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). Obviously, this tag is only used when `Type` is set to `#FILE`.\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the files specified in `Image` and `SelImage`. If specified, this must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). Obviously, this tag is only used when `Type` is set to `#FILE`.\n\n- `LoadPalette`: If this tag is set to `True` and `Type` is set to `#FILE`, Hollywood will try to load the image's palette and store the image as a palette image within the icon. If the image has a transparent pen, that transparent pen will be loaded automatically. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nTo load or create icons at runtime, take a look at the [LoadIcon()](https://www.hollywood-mal.com/docs/html/hollywood/LoadIcon_.html) and [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) commands.\n\nTo add and remove individual images from an icon, use the [AddIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/AddIconImage_.html) and [RemoveIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveIconImage_.html) functions.",
    "inputsDocs": "* `id` — a value that is used to identify this icon later in the code\n* `filename$` — optional: the icon file you want to load (see above)\n* `table` — optional or mandatory, depending on which syntax you use (see above for a discussion)",
    "example": "```\n@ICON 1, \"MyIcon.png\"\n```\n\nLoads \"MyIcon.png\" as icon 1.\n\n---\n\n```\n@ICON 1, {\n    {Image = \"ic16x16.png\"},\n    {Image = \"ic24x24.png\"},\n    {Image = \"ic32x32.png\"},\n    {Image = \"ic48x48.png\"},\n    {Image = \"ic64x64.png\"},\n    {Image = \"ic96x96.png\"},\n    {Image = \"ic128x128.png\"},\n    {Image = \"ic256x256.png\"},\n    {Image = \"ic512x512.png\"},\n    {Image = \"ic1024x1024.png\"}}\n```\n\nThe code above creates icon 1 from a set of external images in different sizes ranging from 16x16 pixels to 1024x1024 pixels.\n\n---\n\n```\n@ICON 1, {{Image = \"icon.svg\"}}\n```\n\nThe code above creates icon 1 and uses just a single image because the image is in a vector graphics format (SVG) and in that case only a single image must be specified (see above).",
    "platforms": ["AmigaOS 4"],
    "category": "Icon"
  },
  {
    "name": "@CATALOG",
    "helpId": "atCATALOG",
    "shortDescription": "preload a catalog for later use",
    "version": "9.0",
    "synopsis": "@CATALOG name$[, table]",
    "functionDocs": "This preprocessor command can be used to preload the specified catalog in the user's language. If a catalog in the user's language does not exist, this preprocessor command will not show an error. This is normal behaviour because you always have to provide default English strings for every entry you try to get from a catalog using the [GetCatalogString()](https://www.hollywood-mal.com/docs/html/hollywood/GetCatalogString_.html) function. Thus, it's not a problem if `@CATALOG` specifies a catalog that doesn't exist. In that case, [GetCatalogString()](https://www.hollywood-mal.com/docs/html/hollywood/GetCatalogString_.html) will simply fall back to the default English strings without throwing an error.\n\nNote that there currently can only be a single catalog per application. Thus, `@CATALOG` should only be used once per script. Also note that `name$` must not be a filename but the name of a catalog that is stored within a Hollywood catalog directory structure. See [OpenCatalog](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html).\n\nThe advantage of using `@CATALOG` instead of [OpenCatalog()](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html) is that if you use `@CATALOG`, the catalogs for all available languages will be linked into your executable or applet when you compile your script. This makes it easier to distribute your project because you don't have to include the catalog directory structure with your application. Also, when compiling Hollywood applets for mobile systems like Android or iOS, it's much better to have all external files linked into the applet.\n\nIn addition to the `name$` parameter, `@CATALOG` also accepts an optional table argument. The following fields in the table argument are currently available:\n\n- `Link`: Set this field to `False` if you do not want to have this catalog linked to your executable/applet when you compile your script. This field defaults to `True` which means that the catalog will be linked to your executable/applet when Hollywood is in compile mode.\n\nTo load a catalog at runtime, use the [OpenCatalog()](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html) function. See [OpenCatalog](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html).",
    "inputsDocs": "* `name$` — name of the catalog to open\n* `table` — optional: table containing further options",
    "example": "```\n@CATALOG \"Hollywood.catalog\"\n\n; this is our default English catalog\ndef$ = {}\ndef$[0] = \"Welcome to Hollywood!\"\ndef$[1] = \"Written by Andreas Falkenhahn\"\ndef$[2] = \"What do you wanna do?\"\n\n; if Hollywood.catalog is not available in the\n; user's language; the English strings will be\n; used\nFor k = 0 To 2\n   c$[k] = GetCatalogString(k, def$[k])\nNext\n```\n\nThe code above opens \"Hollywood.catalog\" and prints the first three entries from that catalog.",
    "platforms": ["All"],
    "category": "Locale"
  },
  {
    "name": "@MENU",
    "helpId": "atMENU",
    "shortDescription": "create a menu strip",
    "version": "6.0",
    "synopsis": "@MENU id, table",
    "functionDocs": "This preprocessor command can be used to create a menu strip that can later be attached to one or more displays by calling [SetDisplayAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetDisplayAttributes_.html) on an existing display or by specifying the `Menu` tag in the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command or in the [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) call.\n\nYou need to pass an identifier for the menu strip to this preprocessor command as well as the actual menu definition. Menus are defined as a tree structure that is composed of a master table that contains various subtables. There are two different types of subtables:\n\n1. Menu tables: These tables contain a heading for the menu in the table element at index 0 and a list of single menu items in the table element at index 1. The list of single menu items, of course, is another subtable that is composed of another number of tables that describe a menu item each (see below). The table you pass to `@MENU` must start with a number of menu tables because every menu item needs a parent menu that it belongs it. These parent menus are described in the menu tables. You can also nest menus, i.e. it is possible to insert a submenu among a number of menu items.\n\n2. Menu item tables: A menu item subtable is a table that describes a single menu item. The name of the menu item that is to be shown in the menu has to be passed at table index 0. If you pass an empty string (\"\") at table index 0, Hollywood will insert a horizontal divider bar instead of a selectable menu item. These divider bars can be used to group related menu items together. There must not be any element at table index 1 for menu item tables. Instead, you can use a number of other tags to configure things like menu item type, hotkey, and identifier. See below for a list of possible tags.\n\nMenu item tables recognize the following tags:\n\n- `ID`: Here you can specify a string that identifies this menu item. This string will be passed to your event handler callback so that you know which menu item has been selected by the user. The identifier specified here is also necessary if you want to use functions like [DisableMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/DisableMenuItem_.html) or [SelectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMenuItem_.html) to manually modify the state of menu items.\n\n- `Flags`: This tag allows you to set some flags for this menu item. This can be set to a bitmask containing one or more of the following flags:\n\n  - `#MENUITEM_TOGGLE`: If this flag is set, this menu item will be created as a toggle menu item. Toggle menu items have two different states (selected and deselected) and the window manager usually renders them with a checkmark indicating their current state. You can manually modify the toggle state of a menu item by calling the functions [SelectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMenuItem_.html) and [DeselectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/DeselectMenuItem_.html) or by setting the `#MENUITEM_SELECTED` flag (see below). The toggle state can be checked by calling the [IsMenuItemSelected()](https://www.hollywood-mal.com/docs/html/hollywood/IsMenuItemSelected_.html) function.\n\n  - `#MENUITEM_RADIO`: Set this flag to make the menu item part of a radio group. All neighbouring menu items which have `#MENUITEM_RADIO` set, will be included in the same radio group. All menu items inside a radio group will be mutually exclusive, i.e. only one menu item of a radio group can be active at a time. You can manually modify the state of a radio menu item by calling the functions [SelectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMenuItem_.html) or by setting the `#MENUITEM_SELECTED` flag (see below). The radio state can be checked by calling the [IsMenuItemSelected()](https://www.hollywood-mal.com/docs/html/hollywood/IsMenuItemSelected_.html) function. Since radio groups always need an active item, it is not possible to call [DeselectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/DeselectMenuItem_.html) on a radio menu item. If you want to deselect a radio menu item, you need to select a different radio menu item using [SelectMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMenuItem_.html) and then the previously selected radio menu item will automatically be deselected. (V7.1)\n\n  - `#MENUITEM_SELECTED`: If you have set the `#MENUITEM_TOGGLE` or `#MENUITEM_RADIO` flag to create a toggle or a radio menu item, you can set this flag to put the menu item into selected state. See above for more information on toggle and radio menu items.\n\n  - `#MENUITEM_DISABLED`: If you set this flag, the menu item will be grayed out so that the user won't be able to select it. You can also manually disable a menu item by calling the function [DisableMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/DisableMenuItem_.html). To enable a disabled menu item, use [EnableMenuItem()](https://www.hollywood-mal.com/docs/html/hollywood/EnableMenuItem_.html). The disabled state of a menu item can be checked by calling the [IsMenuItemDisabled()](https://www.hollywood-mal.com/docs/html/hollywood/IsMenuItemDisabled_.html) function.\n\n- `Hotkey`: This tag can be set to a character that acts as a key shortcut for this menu item. For the best cross-platform compatibility, this tag should be set to a string that contains one character only, e.g. \"q\" for a quit shortcut. Some platforms also support custom hotkeys like \"CTRL+F1\" but in that case you often have to implement the key handling on your own because the window manager does not support listening to these special shortcuts. If you pass a one character string, however, automatic hotkey listening will work on all platforms.\n\nMenu strips can also be created at runtime by using the [CreateMenu()](https://www.hollywood-mal.com/docs/html/hollywood/CreateMenu_.html) command. See [CreateMenu](https://www.hollywood-mal.com/docs/html/hollywood/CreateMenu_.html).\n\nYou can attach menu strips to displays by using the [SetDisplayAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetDisplayAttributes_.html) function or by specifying the `Menu` tag in the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command or in the [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) call. To detach a menu strip from a display, call [SetDisplayAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetDisplayAttributes_.html) passing the special value -1 in the `Menu` tag.\n\nTo get notified when the user selects items from the menu, you have to listen to the `OnMenuSelect` event handler. This can be done by installing a listener callback for this event using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\nPlease note that menu strips are not supported for displays in fullscreen mode. They will only work if your display is in windowed mode.\n\nNote that on Android, it's normally not possible to place menu items in the root level of the action bar's options menu because on desktop systems menu items always have to be members of certain root groups (e.g. \"File\", \"Edit\", \"View\", etc.) There can't be any menu items outside such root groups. When using menu strips on Android, Hollywood will of course replicate the desktop menu behaviour by creating individual submenus for those root groups. This means, however, that the user has to tap at least twice to select a menu item because there won't be any menu items in the root level, they will always be in submenus instead. So if you don't want Hollywood to create those submenus but just place all items in the root level, set the `SingleMenu` tag in the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command to `True`. This is especially useful if there are only a few menu items and it doesn't make sense to place them in submenus.\n\nAlso note that menu strips are currently unsupported on Linux and iOS.",
    "inputsDocs": "* `id` — a value that is used to identify this menu strip\n* `table` — menu tree definition (see above)",
    "example": "```\n@MENU 1, {\n    {\"File\", {\n        {\"New\", ID = \"new\"},\n        {\"Open...\", ID = \"open\"},\n        {\"\"},\n        {\"Close\", ID = \"close\", Flags = #MENUITEM_DISABLED},\n        {\"\"},\n        {\"Save\", Flags = #MENUITEM_DISABLED, Hotkey = \"S\"},\n        {\"Compress\", ID = \"cmp\", Flags = #MENUITEM_TOGGLE},\n        {\"\"},\n        {\"Export image...\", {\n            {\"JPEG...\", ID = \"jpeg\"},\n            {\"PNG...\", ID = \"png\"},\n            {\"BMP...\", ID = \"bmp\"}}},\n        {\"\"},\n        {\"Dump state\", ID = \"dump\"},\n        {\"\"},\n        {\"Quit\", ID = \"quit\", Hotkey = \"Q\"}}},\n\n    {\"Edit\", {\n        {\"Cut\", ID = \"cut\"},\n        {\"Copy\", ID = \"copy\"},\n        {\"Paste\", ID = \"paste\"}}},\n\n    {\"?\", {\n        {\"About...\", ID = \"about\"}}}\n    }\n\n@DISPLAY {Menu = 1}\n```\n\nThe code above creates a menu strip that is attached then attached to the default display.",
    "platforms": ["All"],
    "category": "Menu"
  },
  {
    "name": "@PALETTE",
    "helpId": "atPALETTE",
    "shortDescription": "define a palette for later use",
    "version": "9.0",
    "synopsis": "@PALETTE id[, filename$][, table]",
    "functionDocs": "This preprocessor command can be used to define a palette for later use. The palette can either be loaded from a file, it can be one of Hollywood's predefined palettes, or you can define your own palette by specifying a collection of colors.\n\nIf you pass the `filename$` argument, the palette will be loaded from that file. The file specified in `filename$` can either be in the IFF ILBM palette format, as established by Deluxe Paint, or, alternatively, `filename$` can also be a normal image file that contains a palette. In that case, `@PALETTE` will simply extract the palette from the image file. Be advised, though, that if you pass a full image file to `@PALETTE` and compile your script into an applet or executable, Hollywood will link the whole image file to your applet or executable, which will increase the output file size. Thus, it is advised to only use palette files in the IFF ILBM format with `@PALETTE` because those are really small as they don't contain any image data.\n\nIf you don't pass the `filename$` argument, you need to set either the `Type` or `Colors` tag in the optional table argument to define the palette (see below). The optional table argument recognizes the following tags:\n\n- `Type`: Set this tag if you want to use one of Hollywood's predefined palettes. In that case, you must set `Type` to the identifier of the desired inbuilt palette. See [SetStandardPalette](https://www.hollywood-mal.com/docs/html/hollywood/SetStandardPalette_.html). If you set this tag, you must not pass `filename$` or `Colors`.\n\n- `Colors`: This tag can be used to define a custom palette. If you set `Colors`, you must not pass `filename$` or `Type`. To define a custom palette, set `Colors` to a table containing the desired colors for the palette. The palette depth is calculated automatically from the number of colors in the table. Alternatively, you can also set the `Depth` tag to define the palette depth (see below).\n\n- `Depth`: The desired depth for the palette. This must be between 1 (= 2 colors) and 8 (= 256 colors). The default is 8. This must only be specified when also setting the `Colors` tag. If `Depth` specifies more colors than you pass in the table in the `Colors` tag, the remaining colors will be initialized to black.\n\n- `TransparentPen`: This tag can be used to specify the pen that shall be transparent in the palette. This defaults to `#NOPEN` which means that no pen shall be made transparent. This must only be used when the `Type` or `Colors` tag is passed as well.\n\n- `Link`: Set this field to `False` if you do not want to have `filename$` linked to your executable/applet when you compile your script. This field defaults to `True` which means that the palette will be linked to your executable/applet when Hollywood is in compile mode. If you use this tag, you must also pass `filename$`.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load the file specified in `filename$`. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). If you use this tag, you must also pass `filename$`.\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the file specified in `filename$`. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). If you use this tag, you must also pass `filename$`.\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nTo load or create palettes at runtime, take a look at the [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html) and [CreatePalette()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePalette_.html) commands.",
    "inputsDocs": "* `id` — a value that is used to identify this palette later in the code\n* `filename$` — the palette file you want to load\n* `table` — optional: table containing further options",
    "example": "```\n@PALETTE 1, \"DPaint32.pal\"\n```\n\nPreloads \"DPaint32.pal\" as palette 1.\n\n---\n\n```\n@PALETTE 1, {Colors = {#WHITE, #BLACK, $7777CC, $BBBBBB}}\n```\n\nDefines a custom palette as palette 1.\n\n---\n\n```\n@PALETTE 1, {Type = #PALETTE_CGA}\n```\n\nDefines the standard CGA palette as palette 1.",
    "platforms": ["All"],
    "category": "Palette"
  },
  {
    "name": "@REQUIRE",
    "helpId": "atREQUIRE",
    "shortDescription": "declare a plugin dependency",
    "version": "5.0",
    "synopsis": "@REQUIRE plugin$[, table]",
    "functionDocs": "This preprocessor command allows you to declare an external plugin dependency which your script requires to run. If you use this preprocessor command, Hollywood will make sure that the specified plugin is installed before running your script. Optionally, you can pass additional parameters to the plugin which allows you to control how the plugin is initialized.\n\nPlease note that although Hollywood loads all plugins automatically on startup, many plugins require you to call `@REQUIRE` before they can be used. This is because these plugins need custom initialization code which is only run if you explicitly call `@REQUIRE` on them. For example, plugins which install a display adapter will not be activated unless you call `@REQUIRE` on them. Plugins which just add a loader or saver for additional file formats, however, will be automatically activated even if you don't call `@REQUIRE` on them.\n\nThis preprocessor command can also be used to load plugins which have been exempt from automatic loading at startup. Plugins can be exempt from auto-loading by prefixing their filename with an underscore character ('_') or by using the `-skipplugins` console argument. If you want to load a plugin that has been skipped by the auto loader, just call `@REQUIRE` on it from your script and it will be loaded by the preprocessor. Alternatively, you can also load these plugins using the [LoadPlugin()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPlugin_.html) function.\n\nStarting with Hollywood 6.0 this preprocessor command accepts an optional table argument which allows you to pass additional parameters to the plugin's initialization routine. The parameters accepted here vary from plugin to plugin. Please consult the documentation of the plugin to find out if it accepts any additional parameters that can be passed to `@REQUIRE`. The following two parameters are supported for every plugin:\n\n- `Version`: Minimum plugin version required. Hollywood will fail if the installed plugin does not have at least this version number. This defaults to 0 which means that any version will do. (V6.0)\n\n- `Revision`: Minimum plugin revision required. Hollywood will fail if the installed plugin does not have at least this revision number. This defaults to 0 which means that any revision will do. (V6.0)\n\n- `Link`: If this tag is set to `True`, the specified plugin will be linked into your executable when compiling your script. This will only work if you've set up the plugin linker infrastructure correctly. See [Linking plugins](https://www.hollywood-mal.com/docs/html/hollywood/LinkingPlugins_.html). Make sure to carefully read the licenses of all plugins you link to your executable because licenses like LGPL affect your project if you statically link against LGPL software. This tag defaults to `False` which means that the plugin won't be linked. (V7.0)\n\nPlease note that you must not specify an absolute path in `plugin$`. Just pass the name of the plugin.\n\nSee [Plugins](https://www.hollywood-mal.com/docs/html/hollywood/Plugins_.html).",
    "inputsDocs": "* `plugin$` — name of the required plugin\n* `table` — optional: table containing further options to be passed to the plugin (V6.0)",
    "example": "```\n@REQUIRE \"xml\"\n```\n\nDeclares that your script requires the \"xml.hwp\" plugin to be installed. Any version will be accepted.\n\n---\n\n```\n@REQUIRE \"myplugin\", {Version = 2, Revision = 1, User = \"John\"}\n```\n\nThe code above checks for version 2.1 of \"myplugin.hwp\" and also passes the additional argument \"User=John\" to the plugin's initialization code.",
    "platforms": ["All"],
    "category": "Plugin"
  },
  {
    "name": "@MUSIC",
    "helpId": "atMUSIC",
    "shortDescription": "preload a music file for later use",
    "version": "2.0",
    "synopsis": "@MUSIC id, filename$[, table]",
    "functionDocs": "Use this preprocessor command to preload a music object which you want to play later using [PlayMusic()](https://www.hollywood-mal.com/docs/html/hollywood/PlayMusic_.html). The music file can be in any format supported by Hollywood. Please have a look at the [OpenMusic()](https://www.hollywood-mal.com/docs/html/hollywood/OpenMusic_.html) documentation for information on supported music formats. If the music file is in a streaming format, this preprocessor command will only initialize the music object for later playback. It will not load large music objects completely into memory but they will be played as a sound stream buffered from disk.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Link`: Set this field to `False` if you do not want to have this music file linked to your executable/applet when you compile your script. This field defaults to `True` which means that the music file is linked to your executable/applet when Hollywood is in compile mode.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this music file. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nMusic formats that are supported on all platforms are RIFF WAVE, IFF 8SVX, IFF 16SV, Protracker modules, and formats you have a plugin for. Depending on the platform Hollywood is running on, more music formats might be supported. For example, on Windows, Hollywood supports all formats that DirectShow can load, and on macOS, all formats recognized by Apple's AudioFile interface are supported.\n\nIf you want to open the music file manually, please use the [OpenMusic()](https://www.hollywood-mal.com/docs/html/hollywood/OpenMusic_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this music object later in the code\n* `filename$` — the file you want to have loaded\n* `table` — optional: a table configuring further options (see above)",
    "example": "```\n@MUSIC 1, \"TurricanII_Remix.mod\"\n```\n\nThe code above opens \"TurricanII_Remix.mod\" so that it can be played later using [PlayMusic()](https://www.hollywood-mal.com/docs/html/hollywood/PlayMusic_.html).",
    "platforms": ["All"],
    "category": "Sound"
  },
  {
    "name": "@SAMPLE",
    "helpId": "atSAMPLE",
    "shortDescription": "preload a sound sample for later use",
    "version": "2.0",
    "synopsis": "@SAMPLE id, filename$[, table]",
    "functionDocs": "Use this preprocessor command to preload a sound sample which you want to play later using [PlaySample()](https://www.hollywood-mal.com/docs/html/hollywood/PlaySample_.html).\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Link`: Set this field to `False` if you do not want to have this sample linked to your executable/applet when you compile your script. This field defaults to `True` which means that the sample is linked to your executable/applet when Hollywood is in compile mode.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this sample. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nSample formats that are supported on all platforms are RIFF WAVE, IFF 8SVX, IFF 16SV, and sample formats you have a plugin for. Depending on the platform Hollywood is running on, more sample formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all sample formats you have datatypes for as well.\n\nIf you want to load the sample manually, please use the [LoadSample()](https://www.hollywood-mal.com/docs/html/hollywood/LoadSample_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this sample later in the code\n* `filename$` — the sound sample you want to have loaded\n* `table` — optional: a table configuring further options (see above)",
    "example": "```\n@SAMPLE 1, \"Gunshot.8svx\"\n```\n\nThe above declaration assigns sample number 5 to the sample \"Gunshot.8svx\".\n\n---\n\n```\n@SAMPLE 1, \"Sound/Samples/Gunshot.wav\", {Link=False}\n```\n\nDoes the same as above but the sample will not be linked when the script is compiled.",
    "platforms": ["All"],
    "category": "Sound"
  },
  {
    "name": "@SPRITE",
    "helpId": "atSPRITE",
    "shortDescription": "preload a sprite for later use",
    "version": "2.0",
    "synopsis": "@SPRITE id, filename$[, table]",
    "functionDocs": "This preprocessor command preloads the sprite specified in `filename$` and assigns the identifier `id` to it.\n\nSupported image formats are PNG, JPEG, BMP, IFF ILBM, and some more depending on the platform Hollywood is running on. Starting with Hollywood 4.5, `@SPRITE` can also open animation formats (IFF ANIM, GIF ANIM, uncompressed AVIs or AVIs using Motion JPEG compression) and convert these animations into a sprite directly.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the sprite.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the image shall be loaded, too. Please note that not all pictures have an alpha channel and that not all picture formats are capable of storing alpha channel information. It is suggested that you use the PNG format if you need alpha channel data. This field defaults to `False`.\n\n- `Link`: Set this field to `False` if you do not want to have this sprite linked to your executable/applet when you compile your script. This field defaults to `True` which means that the sprite is linked to your to your executable/applet when Hollywood is in compile mode.\n\n- `X, Y, Width, Height, Frames, FPR`: This lot of fields can be used to fine-tune the loading operation. You can use these fields to make `@SPRITE` create a sprite with multiple frames from a single picture. `Width` and `Height` define the dimensions for the sprite and `Frames` specifies how many frames `@SPRITE` shall read from the source image. If the frames are aligned in multiple rows in the source image, you will also have to pass the argument `FPR` (stands for frames per row) to tell `@SPRITE` how many frames there are in each row. Finally, you can tell `@SPRITE` where in the image it should start scanning by specifying the fields `X` and `Y` (they both default to 0). `@SPRITE` will then start off at position `X` and `Y` and read `Frames` number of images with the dimensions of `Width` by `Height` from the picture specified by `filename$`. After it has read `FPR` number of images, it will advance to the next row. All of these fields can only be used if you specify an image file in `filename$`. If you specify an anim file, they are ignored.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this sprite. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the image will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based image. If you want to load the alphachannel of an image, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the sprite as a palette sprite. This means that you can get and modify the sprite's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette sprites also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the file (if the file format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. A sprite can only have one transparency setting!\n\nIf you want to load sprites manually, please use the [LoadSprite()](https://www.hollywood-mal.com/docs/html/hollywood/LoadSprite_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this sprite later in the code\n* `filename$` — the picture file you want to load\n* `table` — optional argument specifying further options",
    "example": "```\n@SPRITE 1, \"MySprite.png\", {Transparency = #RED}\n```\n\nThis loads \"MySprite.png\" as sprite 1 with the color red being transparent.\n\n---\n\n```\n@SPRITE 1, \"PlayerSprites.png\", {Width = 32, Height = 32,\n     Frames = 16, FPR = 8, Transparency = #BLACK}\n```\n\nThe code above creates sprite 1 from the file \"PlayerSprites.png\". Sprite 1 will be of the dimensions 32x32 and will contain 16 different frames. The single frames are aligned with 8 frames per row in the image \"PlayerSprites.png\". Thus, `@SPRITE` needs to scan two rows to read the full 16 frames.",
    "platforms": ["All"],
    "category": "Sprite"
  },
  {
    "name": "@ELSE",
    "helpId": "atELSE",
    "shortDescription": "block to enter if all conditions failed",
    "version": "7.0",
    "synopsis": "@ELSE",
    "functionDocs": "This preprocessor command signals the beginning of a block that should be entered if all previous [@IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html) and [@ELSEIF](https://www.hollywood-mal.com/docs/html/hollywood/atELSEIF_.html) preprocessor command of the same scope didn't trigger.\n\nSee [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html).",
    "inputsDocs": "none",
    "example": "See [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html)",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@ELSEIF",
    "helpId": "atELSEIF",
    "shortDescription": "test for another condition",
    "version": "7.0",
    "synopsis": "@ELSEIF val",
    "functionDocs": "This preprocessor command tests for the condition specified in `val`. If it is `True`, the preprocessor will continue parsing your script. If `val` is `False`, however, `@ELSEIF` will branch to the next `@ELSEIF`, [@ELSE](https://www.hollywood-mal.com/docs/html/hollywood/atELSE_.html), or [@ENDIF](https://www.hollywood-mal.com/docs/html/hollywood/atENDIF_.html) statement. Note that the condition must be a constant expression since `@ELSEIF` operates at preprocessor level, i.e. script variables are not available at that time.\n\nSee [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html).",
    "inputsDocs": "* `val` — condition to test; must be a constant expression",
    "example": "See [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html)",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@ENDIF",
    "helpId": "atENDIF",
    "shortDescription": "declare end of conditional block",
    "version": "7.0",
    "synopsis": "@ENDIF",
    "functionDocs": "This preprocessor command signals the end of a conditional block that was previously started by an [@IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html) preprocessor command.\n\nSee [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html).",
    "inputsDocs": "none",
    "example": "See [IF](https://www.hollywood-mal.com/docs/html/hollywood/atIF_.html)",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@IF",
    "helpId": "atIF",
    "shortDescription": "test for condition",
    "version": "7.0",
    "synopsis": "@IF val",
    "functionDocs": "This preprocessor command tests for the condition specified in `val`. If it is `True`, the preprocessor will continue parsing your script. If `val` is `False`, however, `@IF` will branch to the next [@ELSEIF](https://www.hollywood-mal.com/docs/html/hollywood/atELSEIF_.html), [@ELSE](https://www.hollywood-mal.com/docs/html/hollywood/atELSE_.html), or [@ENDIF](https://www.hollywood-mal.com/docs/html/hollywood/atENDIF_.html) statement, allowing you to skip certain portions of the script if certain conditions aren't met.\n\nNote that the condition must be a constant expression since `@IF` operates at preprocessor level, i.e. script variables are not available at that time. You can use numeric constants or Hollywood constants defined using either the [Const statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgConst_.html) or the [-setconstants](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) console argument. There are also some inbuilt constants that allow you to test for the platform Hollywood is running on (or compiling for) and the Hollywood version. Please see below for a list.\n\nAlso note that the `@IF` and [@ELSEIF](https://www.hollywood-mal.com/docs/html/hollywood/atELSEIF_.html) preprocessor commands won't complain if you use a constant that hasn't been declared at all. You won't get a \"Constant not found!\" error in this case. Instead, undeclared constants will simply evaluate to 0. The reason behind this design is that the platform-specific constants (see below) are only defined when running a Hollywood script on the respective platform or compiling for it. Thus, when testing for a certain platform on another platform, you won't get an error if the platform constant hasn't been defined. Instead, the non-existing constant will simply evaluate to 0.\n\nIn contrast to the normal [If statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgIf_.html), `@IF` operates at preprocessor level. This means that you can use it to force the preprocessor to take certain routes or ignore certain portions of your code. This isn't possible with the normal [If statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgIf_.html) at all because once that executes, the preprocessor has already finished its job.\n\nFor example, you could force the preprocessor to parse different code depending on which platform Hollywood is running. You can also tell the preprocessor to ignore certain portions of the code. Those portions aren't even checked for syntactical correctness. They are completely skipped, just like comments, so anything could be in those blocks.\n\nHere is an example which uses a different background picture and window title for the individual platforms supported by Hollywood:\n\n```\n@IF #HW_AMIGA\n   @BGPIC 1, \"bg_amiga.png\"\n   @DISPLAY {Title = \"My project (Amiga)\"}\n@ELSEIF #HW_MACOS\n   @BGPIC 1, \"bg_macos.png\"\n   @DISPLAY {Title = \"My project (macOS)\"}\n@ELSEIF #HW_LINUX\n   @BGPIC 1, \"bg_linux.png\"\n   @DISPLAY {Title = \"My project (Linux)\"}\n@ELSEIF #HW_WINDOWS\n   @BGPIC 1, \"bg_windows.png\"\n   @DISPLAY {Title = \"My project (Windows)\"}\n@ELSE\n   @BGPIC 1, \"bg_default.png\"\n   @DISPLAY {Title = \"My project (Default)\"}\n@ENDIF\n```\n\nYou wouldn't be able to use the normal [If statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgIf_.html) for this purpose because, as its very name implies, the preprocessor parses the script before it is run. Hence, if you used the normal [If statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgIf_.html) all preprocessor commands in the code above would be parsed and executed because the preprocessor command would just ignore runtime instructions like the normal [If statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgIf_.html).\n\nAs you can see above, there are some inbuilt constants that allow you to test for the platform Hollywood is currently running or compiling for. The following inbuilt constants are available:\n\n- `#HW_AMIGA` Defined on AmigaOS or compatible platforms, i.e. AmigaOS, MorphOS, AROS, WarpOS.\n\n- `#HW_AMIGAOS3` Defined on AmigaOS 3.\n\n- `#HW_AMIGAOS4` Defined on AmigaOS 4.\n\n- `#HW_ANDROID` Defined on Android.\n\n- `#HW_AROS` Defined on AROS.\n\n- `#HW_IOS` Defined on iOS.\n\n- `#HW_LINUX` Defined on Linux.\n\n- `#HW_MACOS` Defined on macOS.\n\n- `#HW_MORPHOS` Defined on MorphOS.\n\n- `#HW_WARPOS` Defined on WarpOS.\n\n- `#HW_WINDOWS` Defined on Windows.\n\n- `#HW_LITTLE_ENDIAN` Defined on little endian systems.\n\n- `#HW_64BIT` Defined on 64-bit systems.\n\n- `#HW_VERSION` Contains the integer part of Hollywood's version number.\n\n- `#HW_REVISION` Contains the fractional part of Hollywood's version number.\n\nNote that when compiling your script into an executable, Hollywood will automatically set the constants of the target architecture instead of the build architecture. For example, if you compile your script on Windows for AmigaOS 3, Hollywood will set the constants `#HW_AMIGA` and `#HW_AMIGAOS3`. The constants `#HW_WINDOWS` and `#HW_LITTLE_ENDIAN` won't be set. They will only be set if you compile for Windows or run your script on a Windows machine.\n\nAlso note that when compiling applets, none of the architectural constants above will be set. Applets are completely platform-agnostic so if you compile an applet, none of the architectural constants will be set. An exception is if you compile an applet explicitly for Android or iOS by passing \"android\" or \"ios\" to the [-exetype](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) console argument. In that case, `#HW_ANDROID` and `#HW_IOS`, respectively, will indeed be set. If you compile a platform-independent applet by passing \"applet\" to the [-exetype](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) argument, though, none of the architectural constants will be set.",
    "inputsDocs": "* `val` — condition to test; must be a constant expression",
    "example": "```\n@IF #HW_VERSION >= 7\n   ...\n@ENDIF\n```\n\nThe code above tells the preprocessor only to parse the following code if we have at least version 7 of Hollywood.",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@INCLUDE",
    "helpId": "atINCLUDE",
    "shortDescription": "import code from external script files or applets",
    "version": "2.0",
    "synopsis": "@INCLUDE file$",
    "functionDocs": "This preprocessor command will import all code from the file specified by `file$` into the current project. The code will be inserted into the current project at the position where `@INCLUDE` is defined. Normally, you will want to use `@INCLUDE` at the beginning of your project.\n\nThis preprocessor command is useful if you have larger projects and want to spread them over multiple files. The included files usually contain functions that you can call then from your main script. Included files can also contain preprocessor commands.\n\nStarting from Hollywood 4.0, you can also include Hollywood applets using this command. This is useful for importing code from libraries.\n\nSee [Include files](https://www.hollywood-mal.com/docs/html/hollywood/PrgIncludes_.html).",
    "inputsDocs": "* `file$` — script file to include",
    "example": "```\n;---File: script2.hws---\nFunction p_Print(t$)\nPrint(t$)\nEndFunction\n;EOF script2.hws\n\n;---File: mainscript.hws\n@INCLUDE \"script2.hws\"\n\np_Print(\"Hello World!\")\nWaitLeftMouse\nEnd\n;EOF mainscript.hws\n```\n\nThe code above consists of two scripts: script2.hws contains the function p_Print() which simply calls Hollywood's [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) function. script2.hws is then included in the main script which also calls the p_Print() function then.",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@LINKER",
    "helpId": "atLINKER",
    "shortDescription": "pass options to linker",
    "version": "8.0",
    "synopsis": "@LINKER table",
    "functionDocs": "This preprocessor command can be used to pass options to Hollywood's linker. Thus, it is only used when compiling scripts to applets or executables. When just running scripts with the Hollywood interpreter it is ignored.\n\nYou have to pass a table to the `@LINKER` preprocessor command. The following tags are currently recognized:\n\n- `Files`: This tag allows you to pass a list of files that shall be linked to the applet or executable to the linker. This is similar to the `-linkfiles` console argument, but it allows you to store the files to be linked directly in your script which might be more convenient than having to maintain an external database file for this purpose. You need to pass a table containing a list of files to be linked to this tag. Note that it is very important that the file name specifications passed to `Files` must be exactly identical to the ones passed to Hollywood functions which should then load the linked files instead. If you don't use identical file paths, Hollywood won't be able to map the files linked to the applet or executable to the corresponding commands. See [Linking data files](https://www.hollywood-mal.com/docs/html/hollywood/LinkingData_.html).\n\n- `Fonts`: This tag allows you to pass a list of fonts that shall be linked to the applet or executable to the linker. This is similar to the `-linkfonts` console argument, but it allows you to store the fonts to be linked directly in your script which might be more convenient than having to maintain an external database file for this purpose. Your script will then automatically load the linked fonts from your applet or executable when you call [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html). Using the `Fonts` tag of the `@LINKER` preprocessor command to link fonts into applets or executables is an alternative to using the [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html) preprocessor command. Normally, however, using [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html) should be much easier than using `Fonts` so you should use `Fonts` only with good reasons. See [Linking fonts](https://www.hollywood-mal.com/docs/html/hollywood/LinkingFonts_.html).",
    "inputsDocs": "* `table` — table containing options to pass to the linker",
    "example": "```\n@LINKER {Files = {\"test.jpg\", \"title.png\"},\n    {Fonts = {\"Arial\", \"Times New Roman\"}}\n\nLoadBGPic(1, \"test.jpg\")\nLoadBrush(1, \"title.png\")\nSetFont(\"Arial\", 36)\nNPrint(\"Hello World\")\nSetFont(\"Times New Roman\", 72)\nNPrint(\"Hello Hollywood\")\n```\n\nThe code above links the files `test.jpg` and `title.png` to the applet or executable. [LoadBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBGPic_.html) and [LoadBrush()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBrush_.html) will then the load the files directly from the applet or the executable instead of an external source. Additionally, the fonts `Arial` and `Times New Roman` will be linked to the applet or executable, and [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) will also open those fonts directly from the applet or executable then.",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@OPTIONS",
    "helpId": "atOPTIONS",
    "shortDescription": "configure miscellaneous options",
    "version": "4.5",
    "synopsis": "@OPTIONS table",
    "functionDocs": "This preprocessor command allows you configure miscellaneous general options. You have to pass a table to this command that specifies which things you want to configure.\n\nThe following tags are currently recognized by `@OPTIONS`:\n\n- `LockSettings`: This tag has the same function as the [console argument](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) with the same name. If you set `LockSettings` to `True`, compiled Hollywood programs will not accept any arguments from the [console](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) or from the [pseudo-console](https://www.hollywood-mal.com/docs/html/hollywood/ConsoleEmulation_.html). The only difference to the console argument is that if you use `LockSettings` in the preprocessor commands, it will also forbid any user changes when running Hollywood scripts. I.e. if you use `LockSettings` here, your script will always use the style as defined in the preprocessor commands. You cannot change the style by passing arguments like `Borderless` or `Sizeable` to the script.\n\n- `SoftTimer`: If you set this tag to `True`, Hollywood will use a low resolution software timer instead of the high resolution hardware timer. This is sometimes necessary because with certain older Windows XP hardware, the timer may occassionally leap which can cause unexpected behaviour. This tag is only supported on the Windows platform. (V5.3)\n\n- `NoCommodity`: If you set this tag to `True`, Hollywood will not add itself to the system's list of commodities on AmigaOS. This tag is only supported on AmigaOS and compatibles. Defaults to `False`. (V6.0)\n\n- `RegisterApplication`: If you set this tag to `True`, Hollywood will register itself as an AmigaOS 4 application on startup through application.library. This is necessary if you want to call functions that deal with AmigaOS 4 application objects like [SendApplicationMessage()](https://www.hollywood-mal.com/docs/html/hollywood/SendApplicationMessage_.html) or if you want your application to appear in AmiDock. To change the icon that is shown in AmiDock, use the [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) preprocessor command. This tag is only available on AmigaOS 4. Defaults to `False`. (V6.0)\n\n- `DockyContextMenu`: This tag allows you to specify the identifier of a menu strip that should be used as a context menu for your application's docky in AmigaOS 4's AmiDock system. The menu strip you specify here must only contain a single menu tree without any sub menus. Hotkeys inside the menu strip are not supported either because they don't make sense in a context menu that isn't always visible. Please note that setting this tag will automatically make your application appear as an app docky in AmiDock. See [AmiDock information](https://www.hollywood-mal.com/docs/html/hollywood/AmiDockInfo_.html). This tag is only recognized if `RegisterApplication` has been set to `True` and it is obviously only supported on AmigaOS 4. (V6.0)\n\n- `DockyBrush`: This tag allows you to specify the identifier of a brush that should be shown as your application's icon in AmiDock on AmigaOS 4. Normally, you would use the [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) preprocessor command to configure your application's AmiDock icon but the `DockyBrush` tag can come in handy in one of the following situations: First, `DockyBrush` allows you to specify an arbitrary brush and thus you are not restricted to the predefined sizes made available by [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html). Instead, your application's docky icon can be of any size you want. Second, if you use `DockyBrush` Hollywood will automatically create an app docky for you whereas using [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) would create a standard docky (as long as your docky does not have a context menu attached). See [AmiDock information](https://www.hollywood-mal.com/docs/html/hollywood/AmiDockInfo_.html). This tag is only recognized if `RegisterApplication` has been set to `True` and it is obviously only supported on AmigaOS 4. (V6.0)\n\n- `NoDocky`: If this tag is set to `True`, Hollywood will not show your application in AmiDock. This tag is useful if you would like to have an invisible application that can use all the application functionality like the message mechanism and Ringhio but doesn't appear in AmiDock. This tag is only recognized if `RegisterApplication` has been set to `True` and it is obviously only supported on AmigaOS 4. (V6.0)\n\n- `Encoding`: This tag can be used to set the script's character encoding. Note that you have to put this statement at the very beginning of your script or there will be problems. The following character encodings are currently supported:\n\n  - `#ENCODING_UTF8`: Script's character encoding is UTF-8 (with or without BOM). This is also the default and should be used whenever and whereever possible.\n\n  - `#ENCODING_ISO8859_1`: Script's character encoding is ISO 8859-1. Note that due to historical reasons Hollywood will not use ISO 8859-1 character encoding on AmigaOS and compatibles but whatever is the system's default character encoding. `#ENCODING_ISO8859_1` will put Hollywood in legacy mode and should make your script fully compatible with Hollywood versions older than 7.0. However, since ISO 8859-1 mode has several drawbacks, it isn't recommended to use this legacy mode permanently. Instead, you should adapt your scripts to work correctly in Unicode mode.\n\n  Note that it isn't recommended to use `#ENCODING_ISO8859_1` because Hollywood will only run correctly on locales compatible with Western European languages then. You should always use `#ENCODING_UTF8` because this will put Hollywood in Unicode mode and make sure that Hollywood runs correctly on all locales. Since `#ENCODING_UTF8` is also the default, you normally don't have to use the `Encoding` tag at all.\n\n  The encoding you specify here is automatically set as the default encoding for both the text and string library using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). This means that all functions of the string and text libraries will default to this encoding. (V7.0)\n\n- `NoChDir`: By default, Hollywood will always change the current directory to the directory of the script or applet it is currently running. Pass this argument if you don't want this behaviour. In that case, Hollywood won't change the current directory when running a script. (V7.1)\n\n- `EnableDebug`: If this tag is set to `False`, the commands [DebugPrint()](https://www.hollywood-mal.com/docs/html/hollywood/DebugPrint_.html), [DebugPrintNR()](https://www.hollywood-mal.com/docs/html/hollywood/DebugPrintNR_.html), [Assert()](https://www.hollywood-mal.com/docs/html/hollywood/Assert_.html), [DebugOutput()](https://www.hollywood-mal.com/docs/html/hollywood/DebugOutput_.html) and [@WARNING](https://www.hollywood-mal.com/docs/html/hollywood/atWARNING_.html) will be ignored. This allows you to globally disable debugging functions with just a single call. When compiling scripts Hollywood will set `EnableDebug` to `False` by default. This is the recommended setting because it will prevent people from reverse engineering your projects because they won't be able to activate debug output by specifying the `-debugoutput` console argument. When running scripts, `EnableDebug` defaults to `True` to allow you to debug your scripts. (V7.1)\n\n- `GlobalPlugins`: On AmigaOS and compatibles, plugins can also be globally installed in `LIBS:Hollywood`. Executables compiled by Hollywood, however, will only load the plugins that are stored next to the executable in its directory. If you want your executable to load all plugins in `LIBS:Hollywood` as well, you have to set the `GlobalPlugins` tag to `True`. Obviously, this tag is only supported on AmigaOS and compatible platforms. (V9.0)\n\n- `DPIAware`: This tag is only supported on Windows. If you set it to `True`, Hollywood will start in DPI-aware mode. This means that it will not ask the OS to automatically scale Hollywood to fit to the monitor's DPI. If `DPIAware` is set to `False` (which is also the default), Hollywood will automatically apply scaling on high-DPI monitors so that its display doesn't appear too small on them. For example, a display of 640x480 pixels will appear really tiny on a high-DPI monitor. By automatically adapting displays to the monitor's DPI, Hollywood will try to avoid this. However, that scaling can make displays appear blurry on high-DPI monitors. So if you don't want that, set `DPIAware` to `True`. Note, however, that you'll need to take care of making sure that your display appears correctly on high-DPI monitors then. You can do this by setting the `SystemScale` tag in the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) preprocessor command, for example. Note that `DPIAware` is only supported on Windows. On all other platforms Hollywood is always DPI-aware. (V9.0)\n\n- `ConsoleMode`: If you set this tag to `True`, Hollywood will compile an executable that runs in console mode on Windows. On Windows, there is a distinction between console and Windows programs so if you want to compile a program for the console, you will explicitly have to tell Hollywood to do so. You can do that by setting this tag to `True`. Note that this tag is obviously only handled when compiling executables for Windows with Hollywood. Otherwise it is simply ignored. Defaults to `False`. (V9.0)\n\n- `Quiet`: If you set this tag to `True`, Hollywood won't show its traditional startup output but will start quietly. When running Hollywood applets that have `Quiet` set to `True` using the Hollywood Player for Amiga and compatibles, the player also won't open its startup window. Defaults to `False`. (V9.0)",
    "inputsDocs": "* `table` — table specifying desired options (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@VERSION",
    "helpId": "atVERSION",
    "shortDescription": "define which Hollywood version is required",
    "version": "2.0",
    "synopsis": "@VERSION version, revision",
    "functionDocs": "This preprocessor command allows you to define the version of Hollywood that your script needs to run. You should always use this preprocessor command as the first thing in your script.",
    "inputsDocs": "* `version` — required Hollywood version\n* `revision` — required Hollywood revision",
    "example": "```\n@VERSION 2,0\n```\n\nDefines that this script requires at least Hollywood 2.0.",
    "platforms": ["All"],
    "category": "System"
  },
  {
    "name": "@FONT",
    "helpId": "atFONT",
    "shortDescription": "preload a font for later use",
    "version": "4.5",
    "synopsis": "@FONT id, fontname$, size[, table]",
    "functionDocs": "This preprocessor command preloads the font specified by `fontname$` in the desired size (in pixels) and assigns the identifier `id` to it. You can then activate the font from your script by calling [UseFont()](https://www.hollywood-mal.com/docs/html/hollywood/UseFont_.html).\n\nThe font specified in `fontname$` must adhere to the [font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html). See [Font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html).\n\nSee [OpenFont](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html).\n\nUsing `@FONT` is convenient if you want to have all fonts used by your scripts linked to your applet/executable. By default, all fonts specified using `@FONT` are linked to your applet/executable. You can change this behaviour by setting `Link` to `False` in the optional table argument.\n\nThe fourth argument is optional. It is a table that can be used to set further options for the loading operation. This table accepts all tags supported by the optional table of the [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) command as well as the following tags:\n\n- `Link`: Set this field to `False` if you do not want to have this font linked to your executable/applet when you compile your script. This field defaults to `True` which means that the font is linked to your to your executable/applet when Hollywood is in compile mode.\n\nIf you want to open fonts manually, please use the [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) command.\n\n**Important note:** Please note that most fonts are copyrighted and it is not allowed to link them into your programs without acquiring a licence. So make sure you check the licence of the font you are going to link into your program! If you do not want to pay for font licences, it is advised to use a free font such as DejaVu or Bitstream Vera or use one of the TrueType fonts that are inbuilt into Hollywood (`#SANS`, `#SERIF`, `#MONOSPACE`, cf. [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html))\n\nSee [Working with fonts](https://www.hollywood-mal.com/docs/html/hollywood/PrgG2KFonts_.html).",
    "inputsDocs": "* `id` — a value that is used to identify this font later in the code\n* `fontname$` — the font you want to open\n* `size` — desired font size in pixels\n* `table` — optional argument specifying further options",
    "example": "```\n@FONT 1, \"Arial\", 36\n```\n\nOpens font Arial in size 36 and makes it available under id 1.",
    "platforms": ["All"],
    "category": "Text"
  },
  {
    "name": "@VIDEO",
    "helpId": "atVIDEO",
    "shortDescription": "preload a video for later use",
    "version": "5.0",
    "synopsis": "@VIDEO id, filename$[, table]",
    "functionDocs": "Use this preprocessor command to preload a video which you want to play later using [PlayVideo()](https://www.hollywood-mal.com/docs/html/hollywood/PlayVideo_.html).\n\nVideo formats that are supported on all platforms are CDXL and formats you have a plugin for. Depending on the platform Hollywood is running on, more video formats might be supported. On Windows Hollywood is able to open all video formats for which you have a Media Foundation or DirectShow codec installed. On macOS Hollywood can open all video formats that are supported by AV Foundation (or QuickTime on older Macs).\n\nThe third argument is optional. It is a table that can be used to set further options for the opening operation. The following fields of the table can be used:\n\n- `Link`: Set this field to `False` if you do not want to have this video linked to your executable/applet when you compile your script. This field defaults to `True` which means that the video is linked to your to your executable/applet when Hollywood is in compile mode.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this video. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). The default loaders lets Hollywood first ask all plugins whether they would like to handle the video file, then it will check its inbuilt loaders (currently only CDXL), and finally it will ask the video interface of the host OS to play this video. If you want to customize this order, use this tag. See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nIf you want to open the video manually, please use the [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this video later in the code\n* `filename$` — the file you want to have loaded\n* `table` — optional: a table containing further options",
    "example": "```\n@VIDEO 1, \"intro.avi\"\n```\n\nThe code above opens \"intro.avi\" so that it can be played later using [PlayVideo()](https://www.hollywood-mal.com/docs/html/hollywood/PlayVideo_.html).",
    "platforms": ["All"],
    "category": "Video"
  }
]
