[
  {
    "name": "BreakEventHandler",
    "helpId": "BreakEventHandler",
    "shortDescription": "break current event handler cycle",
    "version": "5.2",
    "synopsis": "BreakEventHandler()",
    "functionDocs": "This function can be used to break Hollywood's internal current event handler cycle. This is a lowlevel function and you normally will not need to use this. It is just here for certain emergency situations and debugging purposes.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "BreakEventHandler()"
  },
  {
    "name": "ChangeInterval",
    "helpId": "ChangeInterval",
    "shortDescription": "change interval frequency",
    "version": "2.0",
    "synopsis": "ChangeInterval(id, ms)",
    "functionDocs": "This function can be used to change the frequency of a running interval. Just specify the identifier of the interval and the new frequency. See [SetInterval](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html).",
    "inputsDocs": "* `id` — identifier of the interval function to modify\n* `ms` — new interval frequency in milliseconds",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ChangeInterval(${1:id}, ${2:ms})"
  },
  {
    "name": "CheckEvent",
    "helpId": "CheckEvent",
    "shortDescription": "check for event without blocking",
    "version": "1.9",
    "synopsis": "info = CheckEvent()",
    "functionDocs": "This function checks if there is an event in the queue. If there is, `CheckEvent()` will remove it from the queue and run its callback function. If there is no event in the queue, `CheckEvent()` will return immediately.\n\n`CheckEvent()` returns a table that contains information about whether or not it has executed a callback. The following fields will be initialized in that table:\n\n- `Action`: Contains the name of the event that caused the callback execution (e.g. `OnMouseDown`). If `CheckEvent()` returns without having ran a callback, this field will be set to an empty string.\n\n- `ID`: Contains the identifier of the object that caused the callback execution (e.g. a display identifier). `ID` can also be zero in case an event was caused that has no ID associated.\n\n- `Triggered`: Will be set to `True` if `CheckEvent()` has executed a callback.\n\n- `NResults`: Contains the number of values that the user callback returned (e.g. 1). This will be 0 if the user callback did not return any values or if no user callback was ran at all.\n\n- `Results`: If `NResults` is greater than 0, this table will contain all values that the user callback returned. Otherwise this table will not be present at all. You can easily use this table to pass additional information from your callbacks back to the main scope of the program.\n\n`CheckEvent()` is similar to the popular [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) command with the difference that [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) blocks the script execution until an event arrives whereas `CheckEvent()` immediately exits if there is no event. By using this command you can do something while waiting for an event which would not be possible with [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html).\n\nNote that `CheckEvent()` only handles a single event from the event queue. If you'd like to handle all events that are currently in the event queue, you have to use [CheckEvents()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvents_.html) instead. See [CheckEvents](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvents_.html).\n\nPlease note that generally you should use `CheckEvent()` only if you really need it. Using [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) is normally a much better idea than `CheckEvent()`.",
    "inputsDocs": "none",
    "resultsDocs": "* `info` — table containing information about whether and event occurred or not, and the return value(s) of the user callback in case it has been called",
    "platforms": ["All"],
    "insertText": "CheckEvent()"
  },
  {
    "name": "CheckEvents",
    "helpId": "CheckEvents",
    "shortDescription": "check for events without blocking",
    "version": "6.1",
    "synopsis": "CheckEvents()",
    "functionDocs": "This function does the same as [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html) but handles all events that are currently queued. [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html), on the other hand, only removes and handles a single event from the queue.\n\nAnother difference is that `CheckEvents()` doesn't return any information about the events it has removed and handled. If you need this information, you have to use [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html) instead. See [CheckEvent](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html).\n\nPlease note that you should use `CheckEvents()` only if you really need it. Using [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) is generally a much better idea than `CheckEvents()`.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CheckEvents()"
  },
  {
    "name": "ClearInterval",
    "helpId": "ClearInterval",
    "shortDescription": "remove an interval function",
    "version": "2.0",
    "synopsis": "ClearInterval(id)",
    "functionDocs": "This function aborts the calling of the interval function specified by `id`. See [SetInterval](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html).",
    "inputsDocs": "* `id` — identifier of the interval function to cancel",
    "example": "See [SetInterval](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html)",
    "platforms": ["All"],
    "insertText": "ClearInterval(${1:id})"
  },
  {
    "name": "ClearTimeout",
    "helpId": "ClearTimeout",
    "shortDescription": "remove a timeout function",
    "version": "2.0",
    "synopsis": "ClearTimeout(id)",
    "functionDocs": "This function stops the timeout specified by `id`. It is not necessary to stop timeout functions that have already been called. Hollywood will clear them automatically after it called them. See [SetTimeout](https://www.hollywood-mal.com/docs/html/hollywood/SetTimeout_.html).",
    "inputsDocs": "* `id` — identifier of the timeout function to cancel",
    "example": "See [SetTimeout](https://www.hollywood-mal.com/docs/html/hollywood/SetTimeout_.html)",
    "platforms": ["All"],
    "insertText": "ClearTimeout(${1:id})"
  },
  {
    "name": "CtrlCQuit",
    "helpId": "CtrlCQuit",
    "shortDescription": "enable/disable quit by control-c",
    "version": "2.0",
    "synopsis": "CtrlCQuit(enable)",
    "functionDocs": "By default, all Hollywood scripts can be interrupted at any time just by pressing CTRL-C. If you do not want this, use this function to disable the feature.\n\nPlease note: Think twice before disabling CTRL-C quit. For example, if your script runs in a borderless window or full screen, there is no close box to click, so it is quite handy to have CTRL-C quit enabled.",
    "inputsDocs": "* `enable` — `True` to enable CTRL-C quit, `False` to disable it",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CtrlCQuit(${1:enable})"
  },
  {
    "name": "DeleteButton",
    "helpId": "DeleteButton",
    "shortDescription": "delete a button",
    "version": "2.0",
    "synopsis": "DeleteButton(id)",
    "functionDocs": "This function deletes the button specified by `id` from the current background picture.",
    "inputsDocs": "* `id` — identifier of the button to delete",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DeleteButton(${1:id})"
  },
  {
    "name": "DisableButton",
    "helpId": "DisableButton",
    "shortDescription": "disable a button",
    "version": "2.0",
    "synopsis": "DisableButton(id)",
    "functionDocs": "This function temporarily disables the button specified by `id`. You can enable it later by using the [EnableButton()](https://www.hollywood-mal.com/docs/html/hollywood/EnableButton_.html) function. If you want to remove a button completely, use the [DeleteButton()](https://www.hollywood-mal.com/docs/html/hollywood/DeleteButton_.html) function.",
    "inputsDocs": "* `id` — identifier of the button to disable",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DisableButton(${1:id})"
  },
  {
    "name": "EnableButton",
    "helpId": "EnableButton",
    "shortDescription": "enable a button",
    "version": "2.0",
    "synopsis": "EnableButton(id)",
    "functionDocs": "This function enables the button specified by `id`. This is only necessary if you have disabled it previously using [DisableButton()](https://www.hollywood-mal.com/docs/html/hollywood/DisableButton_.html).",
    "inputsDocs": "* `id` — identifier of the button to enable",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "EnableButton(${1:id})"
  },
  {
    "name": "EscapeQuit",
    "helpId": "EscapeQuit",
    "shortDescription": "enable/disable quit with escape",
    "version": "1.5",
    "synopsis": "EscapeQuit(enable)",
    "functionDocs": "If you set `enable` to `True`, pressing the escape key will immediately terminate your script.",
    "inputsDocs": "* `enable` — `True` to enable escape quit, `False` to disable it",
    "example": "```\nEscapeQuit(TRUE)\nRepeat\n  Wait(10)\nForever\n```\n\nThe above code enters an endless loop which would normally block your program. But using EscapeQuit(`True`) allows the user to terminate it.",
    "platforms": ["All"],
    "insertText": "EscapeQuit(${1:enable})"
  },
  {
    "name": "FreeEventCache",
    "helpId": "FreeEventCache",
    "shortDescription": "flush event queue",
    "version": "2.0",
    "synopsis": "FreeEventCache()",
    "functionDocs": "This function removes all events that are currently cached in the event queue. It is normally not necessary to call this function. It is mostly useful for debugging purposes.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeEventCache()"
  },
  {
    "name": "InKeyStr",
    "helpId": "InKeyStr",
    "shortDescription": "query user input",
    "version": "1.5",
    "synopsis": "input$ = InKeyStr(type[, maxlen, password, cursor])",
    "functionDocs": "This function allows you to easily read input from the user's keyboard. `type` specifies the characters that are allowed to be typed in. `maxlen` can be used to limit the maximum length of the user input (default is 0 which means no limit). If `password` is set to `True`, Hollywood will show an asterisk (*) for every character typed in.\n\nThe following types can be specified currently:\n\n- `#ALL` Will accept all visible characters\n\n- `#ALPHABETICAL` Will accept only alphabetical characters; this is not necessarily limited to characters a-z. The user may also type special alphabetical characters that are only available in his language's alphabet\n\n- `#ALPHANUMERICAL` Will accept alphabetical and numerical characters\n\n- `#HEXNUMERICAL` Will accept hexadecimal characters (0-9 and a-f)\n\n- `#NUMERICAL` Will accept 0-9\n\nIf you have layers enabled while using this function, you will get a new layer of type `#PRINT` which contains the string the user has typed in (since Hollywood 2.0; in previous versions, layers for each character were added).\n\nStarting with Hollywood 8.0, there is a new optional argument named `cursor`. If this is set to `True`, `InKeyStr()` will show a cursor while the user is typing. In that case it is also possible to use the cursor keys to navigate backwards and forwards and it is also possible to delete characters using the DEL key. The cursor will be drawn in the same color as the text.\n\nHollywood 8.0 also adds paste support to `InKeyStr()`. Just press CTRL+V (on Windows) or CMD+V (on all other systems) to paste text from the clipboard into the current insert position.",
    "inputsDocs": "* `type` — specifies which characters the user is allowed to type in\n* `maxlen` — optional: if you specify this argument, the user will only be able to type in `maxlen` characters; otherwise he can input as many characters as he wants and finish his input by pressing the RETURN key (defaults to 0 which means that the user can input as many characters as he wants)\n* `password` — optional: if set to `True`, Hollywood will display an asterisk (*) instead of the actual character typed in (defaults to `False`)\n* `cursor` — optional: if set to `True`, a cursor indicating the current insert and delete position will be shown (defaults to `False`) (V8.0)",
    "resultsDocs": "* `input$` — the string that was typed in",
    "example": "```\nPrint(\"What is your name? \")\nname$ = InKeyStr(#ALPHABETICAL)\nPrint(\"Hello\", name$, \"!\")\n```\n\nThe code above asks the user to enter his name and then it will be output.",
    "platforms": ["All"],
    "insertText": "InKeyStr(${1:type})"
  },
  {
    "name": "InstallEventHandler",
    "helpId": "InstallEventHandler",
    "shortDescription": "install/remove an event handler",
    "version": "2.0",
    "synopsis": "InstallEventHandler(table[, userdata])",
    "functionDocs": "You can use this function to install your own event handlers for standard events. You have to pass a table to this function, that tells Hollywood which event handlers you want to install or remove. To install a new handler you need to initialize the corresponding table field with your own function. If you want to remove an event handler, set the corresponding table field to 0.\n\nThe following table fields are recognized by this function:\n\n- `OnKeyDown`: The function you specify here will be called each time the user presses a control key, a numerical key, or an English alphabetical key. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnKeyDown`.\n  - `Key`: Will be set to the key which has been pressed.\n  - `ID`: Will be set to the identifier of the display that has received this key stroke.\n\n  Note that officially, `OnKeyDown` only supports control keys, numerical keys and English alphabet keys. To listen to non-English keys, use the `VanillaKey` event handler instead. `VanillaKey` supports the complete Unicode range of keys. Note that `OnKeyDown` supports certain non-English keys on some platforms but this is unofficial behaviour and you shouldn't rely on it. If you need to listen to modifier keys like shift, alt, control, etc. use the `OnRawKeyDown` event handler instead (see below).\n\n- `OnKeyUp`: The function you specify here will be called each time the user releases a control key, a numerical key, or an English alphabetical key. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnKeyUp`.\n  - `Key`: Will be set to the key which has been released.\n  - `ID`: Will be set to the identifier of the display that has received this key release.\n\n  Note that officially, `OnKeyUp` only supports control keys, numerical keys and English alphabet keys. To listen to non-English keys, use the `VanillaKey` event handler instead. `VanillaKey` supports the complete Unicode range of keys. Note that `OnKeyUp` supports certain non-English keys on some platforms but this is unofficial behaviour and you shouldn't rely on it. If you need to listen to modifier keys like shift, alt, control, etc. use the `OnRawKeyUp` event handler instead (see below).\n\n- `OnRawKeyDown`: This event handler can be used to listen to raw key events. The difference between raw key events and normal key events is that raw key events always deliver the raw key without applying any potential modifier keys like shift, alt, control, etc. that might be down as well. For example, when pressing the shift key and the \"1\" key on an English keyboard, `OnKeyDown` will report that the \"!\" key has been pressed whereas `OnRawKeyDown` will report two key events: It will first report that the shift key has been pressed and then it will report that the \"1\" key has been pressed. In contrast to `OnKeyDown`, `OnRawKeyDown` will never combine the shift and the \"1\" key into the \"!\" key. Instead, you will get the raw key events. Also, `OnKeyDown` will never be triggered if a modifier key like shift, alt, control, etc. has been pressed on its own. `OnRawKeyDown`, however, will also be triggered when the user presses a modifier key. Thus, `OnRawKeyDown` is very useful for listening to modifier keys or combinations of character keys and modifier keys, e.g. you can use this event handler to find out if the right alt key and a character key are both down. The function you pass to this event handler will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnRawKeyDown`.\n  - `Key`: Will be set to the key which has been pressed. See [Raw keys](https://www.hollywood-mal.com/docs/html/hollywood/RawKeys_.html).\n  - `Modifiers`: Will be set to a combination of modifier keys that are currently down. The following modifier key flags may be set:     - `#MODLSHIFT` Left shift key\n    - `#MODRSHIFT` Right shift key\n    - `#MODLALT` Left alt key\n    - `#MODRALT` Right alt key\n    - `#MODLCOMMAND` Left command key\n    - `#MODRCOMMAND` Right command key\n    - `#MODLCONTROL` Left control key\n    - `#MODRCONTROL` Right control key\n\n  - `ID`: Will be set to the identifier of the display that has received this key stroke.\n\n  (V7.1)\n\n- `OnRawKeyUp`: This event handler will be triggered whenever a raw key has been released. Please see the description of `OnRawKeyDown` above to find out more about the difference between normal key events and raw key events. The function you pass to this event handler will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnRawKeyUp`.\n  - `Key`: Will be set to the key which has been released. See [Raw keys](https://www.hollywood-mal.com/docs/html/hollywood/RawKeys_.html).\n  - `Modifiers`: Will be set to a combination of modifier keys that are currently down. See above in `OnRawKeyDown` for a list of modifier key flags.\n  - `ID`: Will be set to the identifier of the display that has received this key release.\n\n  (V7.1)\n\n- `VanillaKey`: The function you specify here will be called each time the user presses a key or a key combination that results in character that has a graphical representation, including the SPACE character. `VanillaKey` supports the whole Unicode range of characters and it can also handle characters that are generated by multiple key presses, e.g. diacritical characters. This is the event handler to use if your application should be able to handle non-English characters as well. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `VanillaKey`.\n  - `Key`: Will be set to the key which has been pressed.\n  - `ID`: Will be set to the identifier of the display that has received this key stroke.\n\n  Note that `VanillaKey` only reports key down and key repeat events. It cannot report key up events because this isn't possible for characters generated by multiple key strokes. Additionally, it will only report printable characters (including the SPACE character). If you need to listen to control keys like ESC, backspace, cursor keys, etc., use the `OnKeyDown` and `OnKeyUp` event handlers. (V7.0)\n\n- `OnMouseMove`: The function you specify here will be called each time the user moves the mouse. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMouseMove`.\n  - `X,Y`: Will be set to the current mouse pointer position. If they are negative, the mouse pointer is outside the display's boundaries.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n- `OnMouseDown`: The function you specify here will be called each time the user presses the left mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMouseDown`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V3.1)\n\n- `OnMouseUp`: The function you specify here will be called each time the user releases the left mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMouseUp`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V3.1)\n\n- `OnRightMouseDown` The function you specify here will be called each time the user presses the right mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnRightMouseDown`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V3.1)\n\n- `OnRightMouseUp`: The function you specify here will be called each time the user releases the right mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnRightMouseUp`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V3.1)\n\n- `OnWheelDown`: The function you specify here will be called each time the user moves the mouse wheel in downward direction. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnWheelDown`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V4.0)\n\n- `OnWheelUp`: The function you specify here will be called each time the user moves the mouse wheel in upward direction. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnWheelUp`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V4.0)\n\n- `OnMusicEnd`: The function you specify here will be called each time a music object has finished playing. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMusicEnd`.\n  - `ID`: Identifier of the music object that has stopped.\n\n  Please note that this event is only triggered when the music has finished playing. It is not triggered when you call [StopMusic()](https://www.hollywood-mal.com/docs/html/hollywood/StopMusic_.html).\n\n- `OnSampleLoop`: The function you specify here will be called each time a sample is started. If the sample is only played once, the function will only get called once. If the sample is playing in loop mode, the function you specify will be called each time Hollywood repeats the sample. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnSampleLoop`.\n  - `ID`: Identifier of the sample that was just started or repeated.\n  - `Time`: The time in milliseconds that the sample has been playing now.\n  - `Starts`: The number of times this sample was started. This field starts at 1 and will be increased each time Hollywood loops your sample.\n\n  Attention! Use this event handler with care. If you have a short sample that is looped infinitely, your callback function will get called again and again which will kill your script's performance. This event handler allows you to achieve exact timing with sample playback.\n\n- `OnSampleEnd`: The function you specify here will be called each time a sample has finished playing. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnSampleEnd`.\n  - `ID`: Identifier of the sample that has stopped.\n  - `Time`: The time in milliseconds that the sample was playing.\n  - `Starts`: The number of times this sample was started. This field starts at 1 and will be increased each time Hollywood loops your sample.\n\n  Please note that this event is only triggered when the sample has finished playing. It is not triggered when you call [StopSample()](https://www.hollywood-mal.com/docs/html/hollywood/StopSample_.html).\n\n- `OnARexx`: The function you specify here will be called each time a new ARexx message arrives at the Rexx port created with [CreateRexxPort()](https://www.hollywood-mal.com/docs/html/hollywood/CreateRexxPort_.html). The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnARexx`.\n  - `Command`: A string with the command that shall be executed.\n  - `Args`: A preparsed string which contains all the arguments for this command delimited by `NULL` (\"\\0\") characters. You can use the [SplitStr()](https://www.hollywood-mal.com/docs/html/hollywood/SplitStr_.html) function to extract the individual arguments.\n  - `ArgC`: The number of arguments in the `Args` string.\n  - `RawArgs`: The unparsed string containing all the arguments.\n\n  Please note that Hollywood might not always separate the arguments in the way you want to have them. In that case, you can use the `RawArgs` field to access the arguments in their original format just as Hollywood has received them. The `Args` and `ArgC` fields are included just for your convenience but some advanced users might sometimes prefer to use `RawArgs` instead.\n\n  See [CreateRexxPort](https://www.hollywood-mal.com/docs/html/hollywood/CreateRexxPort_.html). (V2.5)\n\n- `SizeWindow`: The function you specify here will be called each time the user resizes the window. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `SizeWindow`.\n  - `Width`: New width of the window\n  - `Height`: New height of the window\n  - `ID`: Will be set to the identifier of the display that has been sized.\n\n- `MoveWindow`: The function you specify here will be called each time the user moves the window. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `MoveWindow`.\n  - `X,Y`: New position of the window on the host screen.\n  - `ID`: Will be set to the identifier of the display that has been moved.\n\n- `CloseWindow`: This function will be called everytime the user presses the close box of the window. You can use this to pop up a requester which asks the user if he really wants to quit. Message fields:\n\n  - `Action`: Initialized to `CloseWindow`.\n  - `ID`: Will be set to the identifier of the display whose close box has been clicked.\n\n- `ActiveWindow`: The function you specify here will be called each time the Hollywood window becomes active. Message fields:\n\n  - `Action`: Initialized to `ActiveWindow`.\n  - `ID`: Will be set to the identifier of the display that has been activated.\n\n- `InactiveWindow`: This function will be called everytime the Hollywood window becomes inactive. Message fields:\n\n  - `Action`: Initialized to `InactiveWindow`.\n  - `ID`: Will be set to the identifier of the display that has lost the focus.\n\n- `ShowWindow`: The function you specify here will be called each time the user brings the hidden Hollywood window back to the screen. Message fields:\n\n  - `Action`: Initialized to `ShowWindow`.\n  - `ID`: Will be set to the identifier of the display that has returned from minimized mode.\n\n  (V3.0)\n\n- `HideWindow`: This function will be called every time the Hollywood window is hidden by the user. Message fields:\n\n  - `Action`: Initialized to `HideWindow`.\n  - `ID`: Will be set to the identifier of the display that has been minimized.\n\n  (V3.0)\n\n- `ModeSwitch`: This function is called every time the user switches the current display mode by pressing the CMD+RETURN (LALT+RETURN on Windows) hotkey. Message fields:\n\n  - `Action`: Initialized to `ModeSwitch`.\n  - `Mode`: Display mode that Hollywood switched into (can be `#DISPMODE_WINDOWED` or `#DISPMODE_FULLSCREEN`)\n  - `ID`: Display which handled the pressed hotkey.\n  - `Width`: Display width. (V6.0)\n  - `Height`: Display height. (V6.0)\n\n  (V4.5)\n\n- `OnDropFile`: This function is called every time the user drops one or multiple icons onto a display. The following fields will be available to your function:\n\n  - `Action`: Initialized to `OnDropFile`.\n  - `ID`: Identifier of the display over which the files were dropped.\n  - `NumDropFiles`: The number of files the user dropped over your display. This is usually 1.\n  - `DropFiles`: A table containing the list of files that were dropped of the display. This table will have exactly `NumDropFiles` entries.\n  - `X,Y`: Contains the position relative to the top left corner of the receiving display over which the files have been dropped.\n\n  (V4.5)\n\n- `ClipboardChange`: This function is called every time the contents of the clipboard changes. This is useful to enable/disable paste functionality in your script. Message fields:\n\n  - `Action`: Initialized to `ClipboardChange`.\n  - `ID`: Display which received this event.\n\n  (V4.5)\n\n- `OnMidMouseDown`: The function you specify here will be called each time the user presses the middle mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMidMouseDown`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V4.5)\n\n- `OnMidMouseUp`: The function you specify here will be called each time the user releases the middle mouse button. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMidMouseUp`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n\n  (V4.5)\n\n- `OnConnect`: The function you specify here will be called each time a new client connects to a server created using the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) call. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnConnect`.\n  - `ClientID`: Identifier of the client that has connected itself to the server.\n  - `ServerID`: Identifier of the server that the client has connected to.\n\n  The `ClientID` is important and you should store it somewhere because you will need it to communicate with the client. You can also use this id to find out the IP address and port number of the client using the commands [GetConnectionIP()](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionIP_.html) and [GetConnectionPort()](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionPort_.html). You can also send data to the client by using [SendData()](https://www.hollywood-mal.com/docs/html/hollywood/SendData_.html). (V5.0)\n\n- `OnDisconnect`: The function you specify here will be called each time a client disconnects from a server created using the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) call. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnDisconnect`.\n  - `ID`: Identifier of the client that has disconnected from the server. You need to call [CloseConnection()](https://www.hollywood-mal.com/docs/html/hollywood/CloseConnection_.html) on this ID to remove the client from your server.\n\n  When you get this event, do not forget to call [CloseConnection()](https://www.hollywood-mal.com/docs/html/hollywood/CloseConnection_.html) on the client ID to fully disconnect the client from your server. This is very important. (V5.0)\n\n- `OnReceiveData`: The function you specify here will be called each time new data is received by an existing connection. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnReceiveData`.\n  - `ID`: Identifier of the connection that has new data.\n\n  When you receive this message it means that there is new data available in the connection specified by `ID`, and that you should call [ReceiveData()](https://www.hollywood-mal.com/docs/html/hollywood/ReceiveData_.html) now to read this data from the network buffer. (V5.0)\n\n- `OnReceiveUDPData`: The function you specify here will be called each time new data is received by an existing UDP connection. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnReceiveUDPData`.\n  - `ID`: Identifier of the connection that has new data.\n\n  When you receive this message it means that there is new data available in the connection specified by `ID`, and that you should call [ReceiveUDPData()](https://www.hollywood-mal.com/docs/html/hollywood/ReceiveUDPData_.html) now to read this data from the network buffer. (V5.0)\n\n- `OnVideoEnd`: The function you specify here will be called each time a video has finished playing. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnVideoEnd`.\n  - `ID`: Identifier of the video that has stopped.\n\n  Please note that this event is only triggered when the video has finished playing. It is not triggered when you call [StopVideo()](https://www.hollywood-mal.com/docs/html/hollywood/StopVideo_.html). (V5.0)\n\n- `FillMusicBuffer`: The function you specify here will be called each time the sound server needs more audio data when a dynamic music created using [CreateMusic()](https://www.hollywood-mal.com/docs/html/hollywood/CreateMusic_.html) is playing. Your callback will then have to call [FillMusicBuffer()](https://www.hollywood-mal.com/docs/html/hollywood/FillMusicBuffer_.html) to feed more audio data to the device. The function you specify here will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `FillMusicBuffer`.\n  - `ID`: Identifier of the music object that has caused this event.\n  - `Samples`: Contains the number of PCM frames Hollywood is requesting from your callback. Your callback must provide this amount of PCM frames to Hollywood so that it can forward this audio data to the system's audio device. See [FillMusicBuffer](https://www.hollywood-mal.com/docs/html/hollywood/FillMusicBuffer_.html).\n  - `Count`: Contains a global count of how many PCM frames have been sent to the audio device already. Useful for keeping track of how many seconds the music has already been playing.\n\n  (V5.0)\n\n- `OrientationChange`: The function you specify here will be called each time the user changes the orientation of his mobile device. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OrientationChange`.\n  - `ID`: Identifier of the display.\n  - `Orientation`: Constant specifying the new orientation of the device. This will be one of the following constants:\n\n    ```\n    #ORIENTATION_PORTRAIT\n    #ORIENTATION_LANDSCAPE\n    #ORIENTATION_PORTRAITREV\n    #ORIENTATION_LANDSCAPEREV\n    ```\n\n  Please note that this event handler is only supported in the mobile version of Hollywood. (V5.0)\n\n- `ShowKeyboard`: The function you specify here will be called each time the software keyboard becomes visible on mobile devices. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `ShowKeyboard`.\n  - `ID`: Identifier of the display.\n\n  Please note that this event handler is only supported in the mobile version of Hollywood. (V5.0)\n\n- `HideKeyboard`: The function you specify here will be called each time the software keyboard becomes invisible on mobile devices. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `HideKeyboard`.\n  - `ID`: Identifier of the display.\n\n  Please note that this event handler is only supported in the mobile version of Hollywood. (V5.0)\n\n- `OnUserMessage`: The function you specify here will be called each time a new user message arrives at the message port created with [CreatePort()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePort_.html). The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnUserMessage`.\n  - `Command`: A string with the command that shall be executed.\n  - `Args`: A preparsed string which contains all the arguments for this command delimited by `NULL` (\"\\0\") characters. You can use the [SplitStr()](https://www.hollywood-mal.com/docs/html/hollywood/SplitStr_.html) function to extract the individual arguments.\n  - `ArgC`: The number of arguments in the `Args` string.\n  - `RawArgs`: The unparsed string containing all the arguments.\n\n  Please note that Hollywood might not always separate the arguments in the way you want to have them. In that case, you can use the `RawArgs` field to access the arguments in their original format just as Hollywood has received them. The `Args` and `ArgC` fields are included just for your convenience but some advanced users might sometimes prefer to use `RawArgs` instead.\n\n  See [CreatePort](https://www.hollywood-mal.com/docs/html/hollywood/CreatePort_.html). (V5.0)\n\n- `Hotkey`: The function you specify here will be called each time the user presses the key combination specified in the [-cxkey](https://www.hollywood-mal.com/docs/html/hollywood/ManualUsage_.html) argument. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `Hotkey`.\n  - `ID`: Identifier of the display.\n\n  Please note that this event handler is only supported in the AmigaOS compatible versions of Hollywood. (V5.2)\n\n- `TrayIcon`: If you have called the [SetTrayIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SetTrayIcon_.html) function to install an icon into the system tray, the function you specify here will be called each time the user clicks on that icon. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `TrayIcon`.\n  - `ID`: Identifier of the display.\n\n  Please note that this event handler is only supported in the Microsoft Windows version of Hollywood. (V5.2)\n\n- `OnTouch`: The function you specify here will be called each time the touch screen detects a user interaction such as putting a new finger on the touch screen, lifting a finger, or moving it. This event is only required if you need fine-tuned control over all touch events, e.g. for supporting multi-touch events or gestures. If you only need simple control over the touch screen, it is easier to use the `OnMouseDown`, `OnMouseUp`, and `OnMouseMove` event handlers. Hollywood will always map the primary finger on the touch screen to the left mouse button.\n\n  The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnTouch`.\n  - `ID`: Will be set to the identifier of the display that received this mouse event.\n  - `Type`: This is set to a string describing the type of the touch event. This will be set to either `Down`, `Up`, or `Move`.\n  - `Finger`: The finger number this event refers to.\n  - `X`: The current X coordinate of the finger on the touch screen.\n  - `Y`: The current Y coordinate of the finger on the touch screen.\n  - `Pressure`: Contains the current pressure of the finger. This generally ranges from 0 (no pressure at all) to 1 (normal pressure). Values greater than 1 are also possible, dependingt on the calibration of the touch screen.\n  - `DownTime`: Contains the time when the finger was put down on the touch screen.\n  - `EventTime`: Contains the time when the event was generated.\n  - `Size`: Contains the scaled value of the approximate size for the current finger.\n  - `TouchMajor`: Contains the current length of the major axis of an ellipse describing the touch area for the current finger.\n  - `TouchMinor`: Contains the current length of the minor axis of an ellipse describing the touch area for the current finger.\n  - `ToolMajor`: Contains the current length of the major axis of an ellipse describing the tool area for the current finger.\n  - `ToolMinor`: Contains the current length of the minor axis of an ellipse describing the tool area for the current finger.\n  - `Orientation`: Contains the current orientation of the touch and tool areas in radians running clockwise from vertical for the current finger. The range is from -PI/2 radians (finger is fully left) to PI/2 radians (finger is fully right).\n\n  Please note that this event handler is only supported in the mobile version of Hollywood. (V5.3)\n\n- `OnApplicationMessage`: The function you specify here will be called each time a new message sent through AmigaOS 4's application.library messaging system arrives. If you want to be able to receive application.library messages, you need to have set the `RegisterApplication` tag in [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) to `True` first. The function you specify here will be passed a table as parameter 1 with the following fields initialized:\n\n  - `Action`: Initialized to `OnApplicationMessage`.\n\n  - `Sender`: The name of the application that has sent this message.\n\n  - `Message`: The actual message.\n\n  Please note that this event handler is only available on AmigaOS 4. (V6.0)\n\n- `OnDockyClick`: If you have set `RegisterApplication` to `True` in the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command, the function you specify here will be called every time the user clicks on your application's icon in AmiDock. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnDockyClick`.\n  - `ID`: Identifier of the display.\n\n  Please note that this event handler is only supported in the AmigaOS 4 version of Hollywood. (V6.0)\n\n- `OnMenuSelect`: The function you specify here will be called each time the user selects a menu item. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnMenuSelect`.\n\n  - `ID`: Identifier of the display that the menu strip has been attached to.\n\n  - `Item`: The identifier of the menu item that has been selected. See [MENU](https://www.hollywood-mal.com/docs/html/hollywood/atMENU_.html).\n\n  - `Selected`: If the menu item that has been selected is a toggle menu item (i.e. a menu item that can have two different states), this field will contain the current toggle state. See [MENU](https://www.hollywood-mal.com/docs/html/hollywood/atMENU_.html).\n\n  (V6.0)\n\n- `RunFinished`: The function you specify here will be called whenever a program executed asynchronously using the [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html) command has terminated. The function will receive a message as parameter 1 with the following fields initialized:\n\n  - `Action`: Initialized to `RunFinished`.\n\n  - `Program`: This is set to a string that contains the name of the program that was launched using [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html).\n\n  - `Args`: This is set to a string that contains the arguments that were passed to the program launched using [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html).\n\n  - `RunUserData`: If custom user data is specified in the call to [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html), it will be passed on to your callback in this message field. If you don't pass any custom user data, this field won't be initialized at all.\n\n  - `ReturnCode`: This tag will only be set if the eponymous tag has been set to `True` when calling [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html). In that case, `ReturnCode` will contain the program's return code when it terminates. (V9.0)\n\n  (V6.1)\n\n- `DirectoryChanged`: If you are currently monitoring directories using the [MonitorDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/MonitorDirectory_.html) function, the function you specify here will be called whenever a change inside a monitored directory occurs. The function will receive a message as parameter 1 with the following fields initialized:\n\n  - `Action`: Initialized to `DirectoryChanged`.\n\n  - `ID`: Identifier of the directory object in which the change occurred.\n\n  - `Directory`: This will be set to a string that contains a fully-qualified path of the directory in which the change occurred.\n\n  - `MonitorUserData`: If custom user data was specified in the call to [MonitorDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/MonitorDirectory_.html), it will be passed to your callback in this message field. If you don't pass any custom user data, this field won't be initialized at all.\n\n  - `Type`: The type of change. This will only be set if the `ReportChanges` tag has been set to `True` in the call to [MonitorDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/MonitorDirectory_.html). If that is the case, this will be one of the following types:\n\n    - `#DIRMONITOR_ADD`: The file or directory in the `Name` tag has been added to the directory.\n\n    - `#DIRMONITOR_REMOVE`: The file or directory in the `Name` tag has been removed from the directory.\n\n    - `#DIRMONITOR_CHANGE`: The file or directory in the `Name` tag has been changed in the directory.\n\n    (V9.0)\n\n  - `Name`: This contains the name of the file or directory that has been added, removed, or changed, depending on the value in the `Type` tag (see above). Note that `Name` will only be set if the `ReportChanges` tag has been set to `True` in the call to [MonitorDirectory()](https://www.hollywood-mal.com/docs/html/hollywood/MonitorDirectory_.html). (V9.0)\n\n  (V8.0)\n\n- `OnAccelerometer`: The function you specify here will be called each time the device's sensor reports new accelerometer values. Note that this will typically happen all the time so if you listen to this event, you will get lots of events that can impact the performance of your script.\n\n  The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnAccelerometer`.\n  - `ID`: Will be set to the identifier of the display that received this event.\n  - `X`: X accelerometer value from sensor.\n  - `Y`: Y accelerometer value from sensor.\n  - `Z`: Z accelerometer value from sensor.\n\n  Please note that this event handler is only supported in the Android version of Hollywood. To learn how to interpret the `X`, `Y`, and `Z` values provided by this event handler, please consult the Android documentation of `SensorEvent`. (V8.0)\n\n- `OnGyroscope`: The function you specify here will be called each time the device's sensor reports new gyroscope values. Note that this will typically happen all the time so if you listen to this event, you will get lots of events that can impact the performance of your script.\n\n  The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `OnGyroscope`.\n  - `ID`: Will be set to the identifier of the display that received this event.\n  - `X`: X gyroscope value from sensor.\n  - `Y`: Y gyroscope value from sensor.\n  - `Z`: Z gyroscope value from sensor.\n\n  Please note that this event handler is only supported in the Android version of Hollywood. To learn how to interpret the `X`, `Y`, and `Z` values provided by this event handler, please consult the Android documentation of `SensorEvent`. (V8.0)\n\n- `RunOutput`: The function you specify here will be called whenever a program executed asynchronously using the [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html) command writes data to the console. This data will be redirected to your program and you can process it using this event handler. This makes it possible to capture a program's output. The function will receive a message as parameter 1 with the following fields initialized:\n\n  - `Action`: Initialized to `RunOutput`.\n\n  - `Program`: This is set to a string that contains the name of the program that was launched using [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html).\n\n  - `Args`: This is set to a string that contains the arguments that were passed to the program launched using [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html).\n\n  - `Output`: This is set to a string that contains the program's output. Note that this can be of any arbitrary length. Do not assume `Output` to always be a complete line of the program's output, it can also be half a line with the other half delivered the next time the event handler triggers. Depending on the way the program writes output to the console, it could even be delivered to you character by character so make no assumptions on the actual format of `Output`. The string passed in `Output` will be in UTF-8 format by default. See below how this can be changed.\n\n  - `RunUserData`: If custom user data is specified in the call to [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html), it will be passed on to your callback in this message field. If you don't pass any custom user data, this field won't be initialized at all.\n\n  Note that by default, the `RunOutput` event handler expects programs to output text only. This is why `RunOutput` will make sure to pass only properly UTF-8 encoded text to your callback function. If you don't want `RunOutput` to format the text as UTF-8, you need to set the `RawMode` argument to `True` when calling [Run()](https://www.hollywood-mal.com/docs/html/hollywood/Run_.html). In that case, `RunOutput` won't do any preformatting and will just forward the program's raw output to you. This means that your event handler callback has to be ready to process binary data as well.\n\n  Also note that output will normally not be delivered in real-time because console output is typically buffered. However, if the external program continually outputs text it will arrive pretty instantly at your `RunOutput` event handler callback.\n\n  (V9.0)\n\n- `ShowSystemBars`: The function you specify here will be called each time the system bars become visible again when a display is in immersive mode. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `ShowSystemBars`.\n  - `ID`: Will be set to the identifier of the display that received this event.\n\n  Please note that this event handler is only supported in the Android version of Hollywood. (V9.0)\n\n- `HideSystemBars`: The function you specify here will be called each time the system bars are hidden when a display is in immersive mode. The function will receive a message as parameter 1 with the following fields:\n\n  - `Action`: Initialized to `HideSystemBars`.\n  - `ID`: Will be set to the identifier of the display that received this event.\n\n  Please note that this event handler is only supported in the Android version of Hollywood. (V9.0)\n\nIf you want to remove an event handler, simply set the corresponding field in the table to 0 instead of passing a function.\n\nStarting with Hollywood 3.1 there is an optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nStarting with Hollywood 7.0 all event messages will contain an additional field named `Timestamp`. This field contains the time stamp when the event was generated. This time stamp is passed in seconds as a fractional number. It is relative to the time Hollywood was started. See [GetTimestamp](https://www.hollywood-mal.com/docs/html/hollywood/GetTimestamp_.html).\n\nPlease note that the event handler functions are only executed while the script is in a [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) loop. You have to use [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) for them!",
    "inputsDocs": "* `table` — table which contains information about which handlers to install or remove\n* `userdata` — optional: user specific data that will be passed to the callback function (V3.1)",
    "example": "```\nFunction p_HandlerFunc(msg)\n  Switch(msg.action)\n  Case \"ActiveWindow\":\n    DebugPrint(\"Window has become active again!\")\n  Case \"InactiveWindow\":\n    DebugPrint(\"Window has become inactive!\")\n  Case \"MoveWindow\":\n    DebugPrint(\"User has moved the window to\", msg.x, msg.y)\n  Case \"OnKeyDown\":\n    If msg.key = \"ESC\" Then End\n  EndSwitch\nEndFunction\n\nInstallEventHandler({ActiveWindow = p_HandlerFunc,\n   InactiveWindow = p_HandlerFunc,\n   MoveWindow = p_HandlerFunc,\n   OnKeyDown = p_HandlerFunc})\n\nRepeat\n  WaitEvent\nForever\n```\n\nThe code above installs four event handlers for `ActiveWindow`, `InactiveWindow`, `MoveWindow` and `OnKeyDown`. If the user presses escape, the program will quit. If you want to remove e.g. the event handler `MoveWindow`, just call `InstallEventHandler()` again with the parameter `MoveWindow`=0.",
    "platforms": ["All"],
    "insertText": "InstallEventHandler(${1:table})"
  },
  {
    "name": "IsKeyDown",
    "helpId": "IsKeyDown",
    "shortDescription": "check if a key is pressed",
    "version": "1.5",
    "synopsis": "state = IsKeyDown(key$[, rawkey])",
    "functionDocs": "This function checks if the key specified by `key$` is currently pressed. If it is, this function will return `True` otherwise it will return `False`.\n\n`key$` is a string representing a key on your keyboard. This can be one of the following control keys:\n\n- `\"UP\"` Cursor up\n- `\"DOWN\"` Cursor down\n- `\"RIGHT\"` Cursor right\n- `\"LEFT\"` Cursor left\n- `\"HELP\"` Help key\n- `\"DEL\"` Delete key\n- `\"BACKSPACE\"` Backspace key\n- `\"TAB\"` Tab key\n- `\"RETURN\"` Return key\n- `\"ENTER\"` Enter key\n- `\"ESC\"` Escape\n- `\"SPACE\"` Space key\n- `\"F1 - F16\"` Function keys\n- `\"INSERT\"` Insert key\n- `\"HOME\"` Home key\n- `\"END\"` End key\n- `\"PAGEUP\"` Page up key\n- `\"PAGEDOWN\"` Page down key\n- `\"PRINT\"` Print key\n- `\"PAUSE\"` Pause key\n\nAlternatively, `key$` can also be a character from the English alphabet, e.g. \"A\", or a string containing a number from 0 to 9. Note that `IsKeyDown()` doesn't support Unicode keys.\n\nStarting with Hollywood 4.0, you can check the status of the modifier keys, too. The following modifier keys can be checked using `IsKeyDown()`:\n\n- `\"LSHIFT\"` Left shift key\n- `\"RSHIFT\"` Right shift key\n- `\"LALT\"` Left alt key\n- `\"RALT\"` Right alt key\n- `\"LCOMMAND\"` Left command key\n- `\"RCOMMAND\"` Right command key\n- `\"LCONTROL\"` Left control key\n- `\"RCONTROL\"` Right control key\n\nStarting with Hollywood 6.1 you can pass the special string `ANY` in `key$` to check for an arbitrary key to be pressed.\n\nStarting with Hollywood 7.1 there is an optional argument `rawkey`. If this argument is set to `True`, `IsKeyDown()` will treat `key$` as a raw key and check if it is down. In that case, `key$` must be one of the raw keys defined by Hollywood. See [Raw keys](https://www.hollywood-mal.com/docs/html/hollywood/RawKeys_.html). The difference between normal keys and raw keys is described in the documentation of the `OnRawKeyDown` event handler. See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).",
    "inputsDocs": "* `key$` — key to check\n* `rawkey` — optional: `True` if `key$` is a raw key (defaults to `False`) (V7.1)",
    "resultsDocs": "* `state` — `True` if key$ is pressed, `False` otherwise",
    "example": "```\nPrint(\"Press F1 please.\")\nRepeat\n  VWait\nUntil IsKeyDown(\"F1\") = True\n```\n\nThe above code waits until the F1 key is pressed. (you can have that easier by using [WaitKeyDown()](https://www.hollywood-mal.com/docs/html/hollywood/WaitKeyDown_.html); the one above is only useful if you want to do something while the key is not pressed)",
    "platforms": ["All"],
    "insertText": "IsKeyDown(${1:key$})"
  },
  {
    "name": "IsLeftMouse",
    "helpId": "IsLeftMouse",
    "shortDescription": "check if the left mouse button is pressed",
    "version": "1.0",
    "synopsis": "pressed = IsLeftMouse()",
    "functionDocs": "This function returns `True` if the left mouse button is currently pressed, otherwise `False`.",
    "inputsDocs": "none",
    "example": "```\nRepeat\n  Wait(2)\nUntil IsLeftMouse() = True\n```\n\nThe above code waits until the left mouse button is pressed. (you can have that easier by using [WaitLeftMouse()](https://www.hollywood-mal.com/docs/html/hollywood/WaitLeftMouse_.html); the one above is only useful if you want to do something while the mouse button is not pressed)",
    "platforms": ["All"],
    "insertText": "IsLeftMouse()"
  },
  {
    "name": "IsMidMouse",
    "helpId": "IsMidMouse",
    "shortDescription": "check if the middle mouse button is pressed",
    "version": "4.5",
    "synopsis": "pressed = IsMidMouse()",
    "functionDocs": "This function returns `True` if the middle mouse button is currently pressed, otherwise `False`.",
    "inputsDocs": "none",
    "example": "```\nRepeat\n  Wait(1)\nUntil IsMidMouse() = True\n```\n\nThe above code waits until the middle mouse button is pressed. (you can have that easier by using [WaitMidMouse()](https://www.hollywood-mal.com/docs/html/hollywood/WaitMidMouse_.html); the one above is only useful if you want to do something while the mouse button is not pressed)",
    "platforms": ["All"],
    "insertText": "IsMidMouse()"
  },
  {
    "name": "IsRightMouse",
    "helpId": "IsRightMouse",
    "shortDescription": "check if the right mouse button is pressed",
    "version": "1.5",
    "synopsis": "pressed = IsRightMouse()",
    "functionDocs": "This function returns `True` if the right mouse button is currently pressed, otherwise `False`.",
    "inputsDocs": "none",
    "example": "```\nRepeat\n  Wait(2)\nUntil IsRightMouse() = True\n```\n\nThe above code waits until the right mouse button is pressed. (you can have that easier by using [WaitRightMouse()](https://www.hollywood-mal.com/docs/html/hollywood/WaitRightMouse_.html); the one above is only useful if you want to do something while the mouse button is not pressed)",
    "platforms": ["All"],
    "insertText": "IsRightMouse()"
  },
  {
    "name": "LeftMouseQuit",
    "helpId": "LeftMouseQuit",
    "shortDescription": "enable/disable left mouse quit",
    "version": "1.0",
    "synopsis": "LeftMouseQuit(enable)",
    "functionDocs": "If you set `enable` to `True`, your script will be terminated as soon as the user presses the left mouse button.",
    "inputsDocs": "* `enable` — `True` to enable left mouse quit, `False` to disable it",
    "example": "```\nLeftMouseQuit(TRUE)\nRepeat\n  Wait(10)\nForever\n```\n\nThe above code enters an endless loop which would normally block your program. But using `LeftMouseQuit(TRUE)` allows the user to terminate it.",
    "platforms": ["All"],
    "insertText": "LeftMouseQuit(${1:enable})"
  },
  {
    "name": "MakeButton",
    "helpId": "MakeButton",
    "shortDescription": "create a new button",
    "version": "2.0",
    "synopsis": "[id] = MakeButton(id, #LAYERBUTTON, layerid, t[, userdata])  \n[id] = MakeButton(id, #SIMPLEBUTTON, x, y, width, height, t[, userdata])",
    "functionDocs": "This function creates a new button and attaches it to the current BGPic. The button will be given the identifier specified by `id`, or, if you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as `id`, `MakeButton()` will automatically choose an identifier for you. The argument `type` specifies the type of the button. Currently, the following types are supported:\n\n- `#SIMPLEBUTTON`: Creates a standard button. Note that this button is invisible. You need to use graphics in your BGPic to show the user where your button is. The type `#SIMPLEBUTTON` requires you pass the position and dimensions for the button in argument 3 to 6. The seventh argument is a table argument allowing you to specify the callback functions to be invoked when the button receives an event (see below).\n\n- `#LAYERBUTTON`: This type is new in Hollywood 2.5. It will create a dynamic button which will always share the position and size of the layer specified by `layerid`. Note that layer buttons are closely tied to their layer. Thus, when the layer is deleted, the button will also be deleted. Layer buttons also support some additional options in the table argument accepted by `MakeButton()` (see below for details).\n\nThe `t` argument must be a table which specifies the functions that shall be called when a specific event occurs. It can also be used to configure some advanced button options. The table can contain the following fields:\n\n- `OnMouseOver`: The function specified here will be called when the user moves the mouse over the button's area.\n\n- `OnMouseOut`: The function specified here will be called when the mouse pointer leaves the area occupied by this button.\n\n- `OnMouseDown`: The function specified here will be called when the user presses the left mouse button while the pointer is over the button's area.\n\n- `OnMouseUp`: The function specified here will be called when the user releases the left mouse button while the pointer is over the button's area. This event will only be triggered if the user also pressed the left mouse button while the pointer was over the button's area.\n\n- `OnRightMouseDown`: Same as `OnMouseDown` but with the right mouse button.\n\n- `OnRightMouseUp`: Same as `OnMouseUp` but with the right mouse button.\n\n- `OnMidMouseDown`: Same as `OnMouseDown` but with the middle mouse button. (V4.5)\n\n- `OnMidMouseUp`: Same as `OnMouseUp` but with the middle mouse button. (V4.5)\n\n- `PixelExact`: This is only supported for `#LAYERBUTTON`. It specifies whether or not your button should use pixel-exact or rectangular collision detection. If you pass `True` here, events will only be triggered on a pixel-exact collision. This can be useful for irregularly shaped buttons. Defaults to `False`.\n\n- `NoAutoHide`: This is only supported for `#LAYERBUTTON`. It specifies whether or not the button shall automatically be hidden when the layer is hidden. If you specify `True` here, the button will not automatically disappear when you hide the layer it is attached to. If `NoAutoHide` is `False`, the button will disappear as soon as you hide the layer. Defaults to `False`.\n\n- `ZOrder`: This is only supported for `#LAYERBUTTON`. It specifies whether or not the layer z-order should be respected when handling events of overlapping layer buttons. Historically, overlapping layer button events were handled in the order of their creation, i.e. if a layer button was created before another layer button and both layers overlapped, the layer button created earlier would receive the events even if it was below the other layer button. By setting the `ZOrder` tag to `True`, you can force Hollywood to handle events of overlapping layer buttons in their stacking order, i.e. layers on top of other layers will receive their events first. For compatibility reasons, this tag defaults to `False`. (V9.0)\n\nIf you just want to listen to mouse clicks on a button, it is enough to provide a callback function for the `OnMouseUp` event type. `OnMouseDown` is only required, if you want to highlight the button in some way while the user clicks on it.\n\nStarting with Hollywood 3.1 there is an optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nThe callback functions you specify in the event table will be called by Hollywood with one parameter. This parameter is a message table that contains some information about the event. The following fields are provided:\n\n- `Action`: Contains the name of the event triggered, e.g. `OnMouseUp`, `OnMouseOver` or `OnMouseOut`. This field is a string.\n\n- `ID`: Contains the identifier of the button that triggered this event. This field is a number.\n\n- `X, Y, Width, Height`: These fields contain the dimensions of the button that triggered this event.\n\n- `MouseDown`: This field will be set to `True` if the left mouse button is currently pressed. Useful in connection with the `OnMouseOver` event, so that you can display a differently highlighted version of the button if the user moves the pointer of the button while the left mouse button is pressed.\n\n- `RightMouseDown`: Same as `MouseDown` but relating to the right mouse button.\n\n- `MidMouseDown`: Same as `MouseDown` but relating to the middle mouse button. (V4.5)\n\n- `Layer`: The identifier of the layer this button is bound to. This is only set for buttons of type `#LAYERBUTTON`. (V4.5)\n\n- `LayerName`: The name of the layer this button is bound to. This is only set for buttons of type `#LAYERBUTTON`. (V4.5)\n\n- `UserData`: Contains the value that you have passed in the `userdata` argument when you created the button.\n\n- `Timestamp`: Contains a time stamp that indicates when the event occurred. See [GetTimestamp](https://www.hollywood-mal.com/docs/html/hollywood/GetTimestamp_.html). (V7.0)\n\nThe advantage of this message is that you can use one and the same function for all your buttons and all events. Just check the fields `Action` and `ID` to find out which button caused the event.\n\nPlease note: Buttons are always attached to BGPics. So if you call `MakeButton()` when BGPic 1 is displayed, the button will be attached to BGPic 1. If you display BGPic 2 then, the buttons will go away. Once you switch back to BGPic 1, its buttons will also be re-activated.\n\nAlso note that you can only create rectangularly shaped buttons with `#SIMPLEBUTTON`. If you want to have irregularly shaped buttons, create a layer that has a transparency setting (masked or alpha channelled transparency) and then use `#LAYERBUTTON` to attach a button to this layer.",
    "inputsDocs": "* `id` — identifier for the new button or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `type` — type of the new button\n* `x` — x position of the new button\n* `y` — y position of the new button\n* `width` — width of the new button\n* `height` — height of the new button\n* `t` — table that contains callback functions that Hollywood shall call if a specific event occurs and additional arguments (see above)\n* `userdata` — optional: user specific data that will be passed to the callback function (V3.1)",
    "resultsDocs": "* `id` — optional: identifier of the button; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nFunction p_MyFunc(msg)\n  Switch msg.action\n  Case \"OnMouseUp\":\n    DebugPrint(\"User left-clicked button\", msg.id)\n  Case \"OnMouseOver\":\n    DebugPrint(\"User moved mouse over button\", msg.id)\n  Case \"OnRightMouseUp\":\n    DebugPrint(\"User right-clicked button\", msg.id)\n  EndSwitch\nEndFunction\n\n; draw the buttons\nBox(0, 0, 100, 100, #RED)\nBox(200, 200, 100, 100, #BLUE)\n\n; install them\nevtmatch = {OnMouseUp = p_MyFunc, OnMouseOver = p_MyFunc,\n            OnRightMouseUp = p_MyFunc}\nMakeButton(1, #SIMPLEBUTTON, 0, 0, 100, 100, evtmatch)\nMakeButton(2, #SIMPLEBUTTON, 200, 200, 100, 100, evtmatch)\n\nRepeat\n  WaitEvent\nForever\n```",
    "platforms": ["All"],
    "insertText": "MakeButton(${1:id}, ${2:#LAYERBUTTON}, ${3:layerid}, ${4:t})"
  },
  {
    "name": "MouseX",
    "helpId": "MouseX",
    "shortDescription": "return x-position of mouse",
    "version": "1.5",
    "synopsis": "pos = MouseX()",
    "functionDocs": "This function returns the current x-position of the mouse pointer.",
    "inputsDocs": "none",
    "resultsDocs": "* `pos` — mouse pointer's x-position",
    "platforms": ["All"],
    "insertText": "MouseX()"
  },
  {
    "name": "MouseY",
    "helpId": "MouseY",
    "shortDescription": "return y-position of mouse",
    "version": "1.5",
    "synopsis": "pos = MouseY()",
    "functionDocs": "This function returns the current y-position of the mouse pointer.",
    "inputsDocs": "none",
    "resultsDocs": "* `pos` — mouse pointer's y-position",
    "platforms": ["All"],
    "insertText": "MouseY()"
  },
  {
    "name": "ResetKeyStates",
    "helpId": "ResetKeyStates",
    "shortDescription": "reset internal key and mouse states",
    "version": "4.6",
    "synopsis": "ResetKeyStates()",
    "functionDocs": "This function can be used to reset Hollywood's internal key and mouse states. This is a low-level function and you normally will not need to use this. It is just here for certain emergency situations.\n\nPlease note that key states are cached per display. `ResetKeyStates()` will reset the key states of the currently active display.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ResetKeyStates()"
  },
  {
    "name": "RunCallback",
    "helpId": "RunCallback",
    "shortDescription": "push callback into event queue",
    "version": "9.0",
    "synopsis": "RunCallback(func[, userdata])",
    "functionDocs": "This function adds the function specified by `func` to the event queue. The function will be run the next time Hollywood checks the event queue, i.e. when [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html) or [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) gets called.\n\nThe optional `userdata` argument allows you to specify additional data that will be passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nYour callback function will be called by Hollywood with a single parameter. The parameter is a message table which contains the following fields:\n\n- `Action`: Will be always set to `RunCallback`. This field is a string!\n\n- `UserData`: Will be set to what you have specified in the `userdata` argument when calling `RunCallback()`. Note that this field will only be there if you have actually passed a value in `userdata` when calling `RunCallback()`.",
    "inputsDocs": "* `function` — function to be added to the event queue\n* `userdata` — optional: user data to be passed to the function when running it",
    "example": "```\nRunCallback(Function(msg) NPrint(msg.userdata) EndFunction, \"Hello 2!\")\nNPrint(\"Hello 1!\")\nRepeat\n   WaitEvent\nForever\n```\n\nThis will first print \"Hello 1!\" and then \"Hello 2!\" because the function that prints \"Hello 2!\" won't be called until Hollywood empties the event queue which happens on [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html).",
    "platforms": ["All"],
    "insertText": "RunCallback(${1:func})"
  },
  {
    "name": "SetEventTimeout",
    "helpId": "SetEventTimeout",
    "shortDescription": "define event cache duration",
    "version": "1.9",
    "synopsis": "SetEventTimeout(duration)",
    "functionDocs": "You can use this function to tell Hollywood for how long it should cache input events. The default value is currently 60000 which means that all events will be cached for 60 seconds. This function can be useful if you have a function that blocks the program flow for some time, e.g. if you do some heavy computing that takes longer than 60 seconds, all events that occurred more than 60 seconds ago will get lost. To prevent that, just increase the event timeout.\n\nStarting with Hollywood 7.0, it is also possible to set `duration` to -1 to disable event timeouts completely. In that case, events will never get lost.",
    "inputsDocs": "* `duration` — specifies for how long events will be cached (in milliseconds)",
    "example": "```\nSetEventTimeout(5000)\n```\n\nSets the event cache duration to 5 seconds (= 5000 milliseconds).",
    "platforms": ["All"],
    "insertText": "SetEventTimeout(${1:duration})"
  },
  {
    "name": "SetInterval",
    "helpId": "SetInterval",
    "shortDescription": "install a new interval function",
    "version": "2.0",
    "synopsis": "[id] = SetInterval(id, func, ms[, userdata])",
    "functionDocs": "This function installs a new interval function and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `SetInterval()` will automatically choose an identifier and return it. You need to specify a Hollywood function in the `func` argument and the time in milliseconds that defines the interval. The function you specified will then be called again and again and again at the intervals of the specified time. For example if you specify 40 as the interval, your function will be called every 40 milliseconds which corresponds to 25 times a second (25 * 40ms = 1000ms = 1 second). This is enough for most games, intros etc.\n\nThe function you specify in `func` will be called for the first time when the time specified in `ms` has elapsed. After that your function will be called repeatedly in intervals of `ms` milliseconds.\n\nYou always need to use [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) in connection with this function! If you have an interval function installed, the internal Hollywood timer scheduler will trigger interval events and inform [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) to call your interval function. Intervals do not work without [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html)! If you do not use [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html), your interval function will never be called. Interval functions are only called as long as you are in a [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) loop.\n\nThis function is very important because it helps you to make sure that your script runs at the same speed on every system. See [Script timing](https://www.hollywood-mal.com/docs/html/hollywood/PrgTUTiming_.html).\n\nYou can install as many intervals as you want. Hollywood's internal scheduler will make sure that all interval functions are called correctly.\n\nPlease remember that Hollywood does not support multithreading. Therefore your interval functions must not block the script - otherwise the whole script will be blocked. For example, if you have two interval functions installed and one of those functions executes a `Wait(100)`, then the whole script will be blocked for 2 seconds.\n\nYou can use the [ClearInterval()](https://www.hollywood-mal.com/docs/html/hollywood/ClearInterval_.html) call to stop an interval function.\n\nStarting with Hollywood 3.1 there is an optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nYour interval function will be called by Hollywood with one parameter. The parameter is a message table which contains the following fields:\n\n- `Action`: Will be always set to `Interval`. This field is a string.\n\n- `ID`: Will be set to the identifier of the interval that Hollywood has just called.\n\n- `UserData`: Will be set to what you have specified in the `userdata` argument when you installed the interval.\n\nThis message is useful if you want to handle two or more intervals in the same function. The message tells you then which interval Hollywood executed. If you do not need this message, simply disregard it. For example, the interval function of the code above does not regard the message either.\n\nLast but not least: You should really have a look at the examples that came with Hollywood. Many of them use `SetInterval()` to manage the timing of the script!",
    "inputsDocs": "* `id` — identifier for the new interval function or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection; the identifier is needed so that you can stop the interval later using the [ClearInterval()](https://www.hollywood-mal.com/docs/html/hollywood/ClearInterval_.html) command\n* `func` — Hollywood function that should be called at the intervals of the specified time\n* `ms` — intervals at which the function shall be called, e.g. 40 will call the function 25 times a second because 25 * 40ms = 1000ms = 1 second\n* `userdata` — optional: user specific data to pass to callback function (V3.1)",
    "resultsDocs": "* `id` — optional: identifier of the interval; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "See [script timing](https://www.hollywood-mal.com/docs/html/hollywood/PrgTUTiming_.html)",
    "platforms": ["All"],
    "insertText": "SetInterval(${1:id}, ${2:func}, ${3:ms})"
  },
  {
    "name": "SetTimeout",
    "helpId": "SetTimeout",
    "shortDescription": "install a new timeout function",
    "version": "2.0",
    "synopsis": "[id] = SetTimeout(id, func, timeout[, userdata])",
    "functionDocs": "This function installs a new timeout function and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `SetTimeout()` will automatically choose an identifier and return it. You need to specify a Hollywood function in the `func` argument and a `timeout` in milliseconds. After this time has elapsed, Hollywood will call your timeout function. This is useful if you need exact timing, for example if you want to synchronize graphics with music. Timeout functions are perfect for that.\n\nYou always need to use [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) in connection with this function! If you have a timeout function installed, the internal Hollywood timer scheduler will trigger timeout events and inform [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) to call your timeout function. Timeouts do not work without [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html)! If you do not use [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html), your timeout function will never be called. Timeout functions are only called as long as you are in a [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) loop.\n\nYou can install as many timeouts as you want. Hollywood's internal scheduler will make sure that all timeout functions are called correctly.\n\nYou can use the [ClearTimeout()](https://www.hollywood-mal.com/docs/html/hollywood/ClearTimeout_.html) call to stop a timeout function.\n\nStarting with Hollywood 3.1 there is an optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nYour timeout function will be called by Hollywood with one parameter. The parameter is a message table which contains the following fields:\n\n- `Action`: Will be always set to `Timeout`. This field is a string!\n\n- `ID`: Will be set to the identifier of the timeout that Hollywood has just called.\n\n- `UserData`: Will be set to what you have specified in the `userdata` argument when you installed the timeout.\n\nThis message is useful if you want to handle two or more timeouts in the same function. The message tells you then which timeout Hollywood executed. If you do not need this message, simply disregard it.",
    "inputsDocs": "* `id` — identifier for the new timeout function or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection; the identifier is needed so that you can stop the timeout later using the [ClearTimeout()](https://www.hollywood-mal.com/docs/html/hollywood/ClearTimeout_.html) command\n* `func` — Hollywood function to be called after the specified time has elapsed\n* `timeout` — time in milliseconds that specifies the timeout\n* `userdata` — optional: user specific data to pass to callback function (V3.1)",
    "resultsDocs": "* `id` — optional: identifier of the timeout; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nFunction p_TenSeconds()\n  SystemRequest(\"Hollywood\", \"Ten seconds are over now!\", \"OK\")\nEndFunction\n\nSystemRequest(\"Hollywood\", \"I will call the function TenSeconds()\\n\" ..\n   \"after 10 seconds have elapsed!\\nCheck your watch, then click Go!\",\n   \"Let's go!\")\n\nSetTimeout(1, p_TenSeconds, 10000)\n\nRepeat\n  WaitEvent\nForever\n```\n\nThe code above installs a timeout function that will be called after 10000 milliseconds (= 10 seconds) have elapsed.",
    "platforms": ["All"],
    "insertText": "SetTimeout(${1:id}, ${2:func}, ${3:timeout})"
  },
  {
    "name": "WaitEvent",
    "helpId": "WaitEvent",
    "shortDescription": "wait for an event to occur",
    "version": "1.0",
    "synopsis": "info = WaitEvent()",
    "functionDocs": "The `WaitEvent()` function puts Hollywood in sleep state. The program will be woken up when an event is triggered. In this case `WaitEvent()` will execute the function that you installed for this event and then it will return. Therefore, you always need to use `WaitEvent()` in a loop. For example:\n\n```\nWhile quit = False\n   WaitEvent\nWend\n```\n\nOr use an endless loop:\n\n```\nRepeat\n   WaitEvent\nForever\n```\n\n`WaitEvent()` is a core function of the Hollywood language and you should use one of the loops presented above in every script as your main loop. `WaitEvent()` has the advantage that it sleeps until an event is triggered. This is important in a multitasking environment because it saves CPU time. Never use polling loops as they will consume all CPU time. If you need to constantly execute code in your main loop, use [SetInterval()](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html) to install an interval function that gets called 25 times a second by `WaitEvent()`.\n\nThe functions that `WaitEvent()` will call when an event is triggered can be installed with the following functions of the Hollywood event library: [MakeButton()](https://www.hollywood-mal.com/docs/html/hollywood/MakeButton_.html), [SetInterval()](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html), [SetTimeout()](https://www.hollywood-mal.com/docs/html/hollywood/SetTimeout_.html), and [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html)\n\nNote that `WaitEvent()` must not be called from any callbacks executed by `WaitEvent()`. In general, you should use `WaitEvent()` only once in your script: in your main loop. If you really have to check for events in a callback executed by `WaitEvent()`, use [CheckEvents()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvents_.html) instead, but this should normally be unnecessary.\n\n`WaitEvent()` returns a table that contains information about the callback function it has just executed. The following fields will be initialized in that table:\n\n- `Action`: Contains the name of the event that caused the callback execution (e.g. `OnMouseDown`). If `WaitEvent()` returns without having run a callback, this field will be set to an empty string.\n\n- `ID`: Contains the identifier of the object that caused the callback execution (e.g. a display identifier). `ID` can also be zero in case an event was caused that has no identifier associated.\n\n- `Triggered`: Will be set to `True` if `WaitEvent()` has executed a callback and then returned control to the script. If this is set to `False`, then some other internal event has caused `WaitEvent()` to return control to the script.\n\n- `NResults`: Contains the number of values that the user callback returned (e.g. 1). This will be 0 if the user callback did not return any values or if no user callback was ran at all.\n\n- `Results`: If `NResults` is greater than 0, this table will contain all values that the user callback returned. Otherwise this table will not be present at all. You can easily use this table to pass additional information from your callbacks back to the main scope of the program.",
    "inputsDocs": "none",
    "resultsDocs": "* `info` — return values from previously executed event function; normally you won't need this and you can ignore it",
    "example": "See [MakeButton](https://www.hollywood-mal.com/docs/html/hollywood/MakeButton_.html)\nSee [SetInterval](https://www.hollywood-mal.com/docs/html/hollywood/SetInterval_.html)\nSee [SetTimeout](https://www.hollywood-mal.com/docs/html/hollywood/SetTimeout_.html)\nSee [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html)",
    "platforms": ["All"],
    "insertText": "WaitEvent()"
  },
  {
    "name": "WaitKeyDown",
    "helpId": "WaitKeyDown",
    "shortDescription": "wait for the user to press a key",
    "version": "1.5",
    "synopsis": "WaitKeyDown(key$[, rawkey])",
    "functionDocs": "This function halts the program flow until the user presses the key specified by `key$`. See [IsKeyDown](https://www.hollywood-mal.com/docs/html/hollywood/IsKeyDown_.html). Please note that `WaitKeyDown()` cannot be used for Unicode characters. Only characters from the English alphabet are universally supported.\n\nStarting with Hollywood 6.1 you can pass the special string `ANY` in `key$` to wait for an arbitrary key to be pressed.\n\nStarting with Hollywood 7.1 there is an optional argument `rawkey`. If this argument is set to `True`, `WaitKeyDown()` will treat `key$` as a raw key and wait until it is down. In that case, `key$` must be one of the raw keys defined by Hollywood. See [Raw keys](https://www.hollywood-mal.com/docs/html/hollywood/RawKeys_.html).  The difference between normal keys and raw keys is described in the documentation of the `OnRawKeyDown` event handler. See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). Setting `rawkey` to `True` can be useful if you need to wait for a modifier key like shift, alt, control, etc.",
    "inputsDocs": "* `key$` — key to wait for\n* `rawkey` — optional: `True` if `key$` should be treated as a raw key (defaults to `False`) (V7.1)",
    "example": "```\nPrint(\"Press Return to continue.\")\nWaitKeyDown(\"Return\")\n```\n\nThe code aboves waits until the user presses the return key.",
    "platforms": ["All"],
    "insertText": "WaitKeyDown(${1:key$})"
  },
  {
    "name": "WaitLeftMouse",
    "helpId": "WaitLeftMouse",
    "shortDescription": "wait for the user to press the left mouse button",
    "version": "1.0",
    "synopsis": "WaitLeftMouse()",
    "functionDocs": "This function halts the script's execution until the left mouse button is pressed.",
    "inputsDocs": "none",
    "example": "```\nPrint(\"Press left mouse to quit.\")\nWaitLeftMouse\nEnd\n```\n\nWait for the user to press left mouse button.",
    "platforms": ["All"],
    "insertText": "WaitLeftMouse()"
  },
  {
    "name": "WaitMidMouse",
    "helpId": "WaitMidMouse",
    "shortDescription": "wait for the user to press the middle mouse button",
    "version": "4.5",
    "synopsis": "WaitMidMouse()",
    "functionDocs": "This function halts the script's execution until the middle mouse button is pressed.",
    "inputsDocs": "none",
    "example": "```\nPrint(\"Press middle mouse to quit.\")\nWaitMidMouse\nEnd\n```\n\nWait for the user to press middle mouse button.",
    "platforms": ["All"],
    "insertText": "WaitMidMouse()"
  },
  {
    "name": "WaitRightMouse",
    "helpId": "WaitRightMouse",
    "shortDescription": "wait for the user to press the right mouse button",
    "version": "1.5",
    "synopsis": "WaitRightMouse()",
    "functionDocs": "This function halts the script's execution until the right mouse button is pressed.",
    "inputsDocs": "none",
    "example": "```\nPrint(\"Press right mouse to quit.\")\nWaitRightMouse\nEnd\n```\n\nWait for the user to press right mouse button.",
    "platforms": ["All"],
    "insertText": "WaitRightMouse()"
  }
]
