[
  {
    "name": "Concat",
    "helpId": "Concat",
    "shortDescription": "concatenate table strings into a single string",
    "version": "5.0",
    "synopsis": "s$ = Concat(table[, sep$, start, end])",
    "functionDocs": "This function can be used to concatenate the strings from table indices `start` to `end` to a single string that is optionally delimited by the string specified in `sep$`. If `start` and `end` are not specified, they default to 0 and number of table items minus one respectively, which means that by default all table strings are concatenated. If `sep$` is not specified, it will default to the empty string which means that no separator will be put between the strings.\n\nPlease note that this function will only take strings at integer indices into account. Strings at non-integer indices will not be concatenated.",
    "inputsDocs": "* `table` — table that should be used as the source\n* `sep$` — optional: separator string to use (defaults to \"\")\n* `start` — optional: table index of first string to concatenate (defaults to 0, which means start at index 0 of the table)\n* `end` — optional: table index of the last string to concatenate (defaults to number of table items minus one, which means end at the end of the table)",
    "example": "```\nt = {\"Hello\", \"this\", \"is\", \"a\", \"test!\"}\nDebugPrint(Concat(t, \" \"))\n```\n\nThe code above concatenates all strings of the table and separates them by inserting a space character.",
    "platforms": ["All"],
    "insertText": "Concat(${1:table})"
  },
  {
    "name": "CopyTable",
    "helpId": "CopyTable",
    "shortDescription": "make independent copy of a table",
    "version": "4.6",
    "synopsis": "t = CopyTable(src[, shallow])",
    "functionDocs": "This function can be used to make an independent copy of the specified source table. As you have probably noticed, when assigning a table to a new variable using the equal (=) operator, only a reference to the table will be assigned to the new variable. This is done due to efficiency reasons because making complete copies of the table is not necessary in most cases. In some cases, however, you need to have a fully independent copy of the table. This can be done using this function.\n\nStarting with Hollywood 6.0 this function accepts an optional argument named `shallow`. If you set this argument to `True`, `CopyTable()` will do a shallow copy of the table which means that instead of making an independent copy, all sub-tables will only be copied by reference. A copy by reference means that if the source table is modified, all copies by reference will be modified as well. Shallow copies of a table have the advantage that they save resources and they can also come in handy in case of self-referential tables which would lead to a stack overflow during a deep copy.\n\nSee [Tables](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeTable_.html).",
    "inputsDocs": "* `src` — table to copy\n* `shallow` — optional: specifies whether or not a shallow copy of the table shall be made (defaults to `False`) (V6.0)",
    "resultsDocs": "* `t` — deep or shallow copy of table",
    "example": "```\nt1 = {1, 2, 3, 4, 5}\nt2 = t1\nt2[0] = 10\nDebugPrint(t1[0]) ; -> prints 10 because t2 is only a reference to t1\nt3 = CopyTable(t1)\nt3[0] = 20\nDebugPrint(t1[0]) ; -> prints 10 now!\n```\n\nThis code demonstrates first the copy-by-reference default behaviour of Hollywood which only creates a reference to an existing table. Afterwards, a deep copy is made using `CopyTable()`.",
    "platforms": ["All"],
    "insertText": "CopyTable(${1:src})"
  },
  {
    "name": "CreateList",
    "helpId": "CreateList",
    "shortDescription": "create optimized list",
    "version": "9.0",
    "synopsis": "list = CreateList()",
    "functionDocs": "This function creates an optimized list and returns it as an empty table.\n\nThe advantage when using optimized lists instead of normal Hollywood tables with functions like [InsertItem()](https://www.hollywood-mal.com/docs/html/hollywood/InsertItem_.html), [RemoveItem()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveItem_.html), [ListItems()](https://www.hollywood-mal.com/docs/html/hollywood/ListItems_.html) and [GetItem()](https://www.hollywood-mal.com/docs/html/hollywood/GetItem_.html) is that all those functions will be much faster.\n\nThe disadvantage is that adding or removing items may only be done via [InsertItem()](https://www.hollywood-mal.com/docs/html/hollywood/InsertItem_.html) and [RemoveItem()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveItem_.html). You must not add or remove items from optimized lists by modifying the table directly. It's necessary to use the functions mentioned above.\n\nTo convert an existing Hollywood table to an optimized list, you can use the [SetListItems()](https://www.hollywood-mal.com/docs/html/hollywood/SetListItems_.html) function. See [SetListItems](https://www.hollywood-mal.com/docs/html/hollywood/SetListItems_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `list` — an empty optimized list",
    "example": "```\nt = CreateList()\n;t = {}\nStartTimer(1)\nFor Local k = 1 To 10000\n   InsertItem(t, k)\nNext\nNPrint(ListItems(t))\nNPrint(\"This took\", GetTimer(1), \"ms\")\n```\n\nThe code above creates an empty optimized list, adds 10000 items to it and prints the time this took. Disable the first line and uncomment the second line to see how much faster optimized lists are in comparison to normal Hollywood tables.",
    "platforms": ["All"],
    "insertText": "CreateList()"
  },
  {
    "name": "ForEach",
    "helpId": "ForEach",
    "shortDescription": "iterate over all elements of a table",
    "version": "5.0",
    "synopsis": "[v] = ForEach(table, func[, userdata])",
    "functionDocs": "This function can be used to iterate over all elements of the table specified in the first argument. For each table element this command will call the user function specified in `func`. The user function will receive two arguments: The first argument will contain the index of the table element, whereas the second argument will contain the value at that index. If the user function returns a value the loop is broken, and this value is returned as the result from `ForEach()`.\n\nPlease note that this function will traverse the whole table. If you would just like to iterate over integer indices, use the [ForEachI()](https://www.hollywood-mal.com/docs/html/hollywood/ForEachI_.html) command instead. See [ForEachI](https://www.hollywood-mal.com/docs/html/hollywood/ForEachI_.html).\n\nStarting with Hollywood 6.1 this function accepts an optional `userdata` parameter. The value you pass here will be forwarded to your callback as the third function parameter. The value can be of any type.",
    "inputsDocs": "* `table` — table that should be traversed\n* `func` — user function to call for each table element\n* `userdata` — optional: user data to pass to callback function (V6.1)",
    "resultsDocs": "* `v` — optional: return value if iteration is broken by user function (see above)",
    "example": "```\nt = {1, 2, 3, 4, Test$=\"Hello\", Value=9.2}\nForEach(t, DebugPrint)\n```\n\nThe code above dumps the contents of table 't' using `ForEach()`.",
    "platforms": ["All"],
    "insertText": "ForEach(${1:table}, ${2:func})"
  },
  {
    "name": "ForEachI",
    "helpId": "ForEachI",
    "shortDescription": "iterate over all integer indices of a table",
    "version": "5.0",
    "synopsis": "[v] = ForEachI(table, func[, userdata])",
    "functionDocs": "This function can be used to iterate over all integer indices of the table specified in the first argument. For each table element at an integer index this command will call the user function specified in `func`. The user function will receive two arguments: The first argument will contain the index of the table element, whereas the second argument will contain the value at that index. If the user function returns a value the loop is broken, and this value is returned as the result from `ForEachI()`.\n\nPlease note that this function will traverse only integer indices. If you would like to iterate over the whole table, use the [ForEach()](https://www.hollywood-mal.com/docs/html/hollywood/ForEach_.html) command instead. See [ForEach](https://www.hollywood-mal.com/docs/html/hollywood/ForEach_.html).\n\nStarting with Hollywood 6.1 this function accepts an optional `userdata` parameter. The value you pass here will be forwarded to your callback as the third function parameter. The value can be of any type.",
    "inputsDocs": "* `table` — table that should be traversed\n* `func` — user function to call for each integer index\n* `userdata` — optional: user data to pass to callback function (V6.1)",
    "resultsDocs": "* `v` — optional: return value if iteration is broken by user function (see above)",
    "example": "```\nt = {1, 2, 3, 4, Test$=\"Hello\", Value=9.2}\nForEachI(t, DebugPrint)\n```\n\nThe code above dumps only the integer indices of table 't'. This means that the indices `Test$` and `Value` won't be respected.",
    "platforms": ["All"],
    "insertText": "ForEachI(${1:table}, ${2:func})"
  },
  {
    "name": "GetItem",
    "helpId": "GetItem",
    "shortDescription": "get list item",
    "version": "9.0",
    "synopsis": "item = GetItem(list, idx)",
    "functionDocs": "This returns the item at index `idx` in the list specified by `list`. If `idx` is -1, the last list item will be returned. If `idx` is out of range, [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) will be returned.\n\nNote that you normally shouldn't use this function because you can access list elements quicker by just using the []-operator. The only case where using this function has a real speed advantage is when you want to get the last item of an optimized list and you don't know the number of items in the list. In that case, using `GetItem()` is faster than calling [ListItems()](https://www.hollywood-mal.com/docs/html/hollywood/ListItems_.html) first.",
    "inputsDocs": "* `list` — list to use\n* `idx` — index of the list item to get; pass -1 to get the last item",
    "resultsDocs": "* `item` — item at the specified index",
    "platforms": ["All"],
    "insertText": "GetItem(${1:list}, ${2:idx})"
  },
  {
    "name": "GetMetaTable",
    "helpId": "GetMetaTable",
    "shortDescription": "retrieve a table's metatable",
    "version": "2.0",
    "synopsis": "mt = GetMetaTable(t)",
    "functionDocs": "This function retrieves the metatable of the specified table and returns it. If the specified table does not have a metatable, [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) is returned. See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html).",
    "inputsDocs": "* `t` — table whose metatable you want to retrieve",
    "resultsDocs": "* `mt` — metatable of the specified table or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) if table does not have a metatable",
    "platforms": ["All"],
    "insertText": "GetMetaTable(${1:t})"
  },
  {
    "name": "HasItem",
    "helpId": "HasItem",
    "shortDescription": "check if a table item exists",
    "version": "9.1",
    "synopsis": "bool = HasItem(t, key)",
    "functionDocs": "This does the same as [HaveItem()](https://www.hollywood-mal.com/docs/html/hollywood/HaveItem_.html). See [HaveItem](https://www.hollywood-mal.com/docs/html/hollywood/HaveItem_.html).",
    "inputsDocs": "* `t` — table to query\n* `key` — key to check",
    "resultsDocs": "* `bool` — `True` or `False` depending on whether the item exists",
    "platforms": ["All"],
    "insertText": "HasItem(${1:t}, ${2:key})"
  },
  {
    "name": "HaveItem",
    "helpId": "HaveItem",
    "shortDescription": "check if a table item exists",
    "version": "6.0",
    "synopsis": "bool = HaveItem(t, key)",
    "functionDocs": "This function checks whether the specified table has an item at index `key` or not. If there is an item at this index, `HaveItem()` will return `True`. This is a convenience function for [RawGet()](https://www.hollywood-mal.com/docs/html/hollywood/RawGet_.html).\n\nNote that if you pass a string in the `key` parameter, it will be converted to lower case automatically. If you don't want that, use [RawGet()](https://www.hollywood-mal.com/docs/html/hollywood/RawGet_.html) instead.\n\nStarting with Hollywood 9.1, this function has a synonym called [HasItem()](https://www.hollywood-mal.com/docs/html/hollywood/HasItem_.html) which does the same but has a name that is grammatically correct.",
    "inputsDocs": "* `t` — table to query\n* `key` — key to check",
    "resultsDocs": "* `bool` — `True` or `False` depending on whether the item exists",
    "example": "```\nt = {x = 10, y = 20}\nNPrint(HaveItem(t, \"x\"), HaveItem(t, \"y\"), HaveItem(t, \"z\"))\n```\n\nThe code above will print 1 / 1 / 0 (= `True`, `True`, `False`).",
    "platforms": ["All"],
    "insertText": "HaveItem(${1:t}, ${2:key})"
  },
  {
    "name": "InsertItem",
    "helpId": "InsertItem",
    "shortDescription": "insert item into a list",
    "version": "2.0",
    "synopsis": "InsertItem(list, item[, pos])",
    "functionDocs": "This function inserts the specified item into the list specified by `list`. `item` can be of any type. If you do not specify the optional argument pos, the item will be appended to the end of the list. If you specify the `pos` argument, the item will be inserted at this position and all succeeding items will be moved one position up. Position counter starts at 0 which is the first element.\n\nNote that this function is rather slow when used with normal Hollywood tables. To accelerate `InsertItem()`, you have to use it with optimized lists created by [CreateList()](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html). See [CreateList](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html).",
    "inputsDocs": "* `list` — table where to insert the element\n* `item` — item to insert (can be of any type)\n* `pos` — optional: where to insert (defaults to -1 which means at the end of the list)",
    "example": "```\na = {1, 2, 3, 4, 5, 7, 8, 9, 10}\nInsertItem(a, 6, 5)\nFor k = 1 To ListItems(a) Do Print(a[k - 1] .. \" \")\n```\n\nPrints \"1 2 3 4 5 6 7 8 9 10\". The item \"6\" is inserted at position 5 so that the row is complete.",
    "platforms": ["All"],
    "insertText": "InsertItem(${1:list}, ${2:item})"
  },
  {
    "name": "IPairs",
    "helpId": "IPairs",
    "shortDescription": "traverse over all integer keys of a table",
    "version": "2.0",
    "synopsis": "func, state, val = IPairs(table)",
    "functionDocs": "This function can be used in conjunction with the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement to traverse over all integer keys of a table. As required by the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement, `IPairs()` will return three values: An iterator function, a private state information, and an initial value for the traversal. The iterator function returned by `IPairs()` will stop the traversal when it encounters a key whose value is set to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html).\n\nIf you want to traverse over all fields of a table instead of just the integer indices, use the [Pairs()](https://www.hollywood-mal.com/docs/html/hollywood/Pairs_.html) function instead.\n\nSee [Generic For statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html).",
    "inputsDocs": "* `table` — table to traverse",
    "resultsDocs": "* `func` — iterator function\n* `state` — private state information\n* `val` — initial traversal value",
    "example": "```\na = {\"one\", \"two\", \"three\"}\nFor i, v In IPairs(a)\n  DebugPrint(i, v)\nNext\n```\n\nThe code above will print \"0 one\", \"1 two\" and \"2 three\".",
    "platforms": ["All"],
    "insertText": "IPairs(${1:table})"
  },
  {
    "name": "IsTableEmpty",
    "helpId": "IsTableEmpty",
    "shortDescription": "check if table is empty",
    "version": "6.1",
    "synopsis": "b = IsTableEmpty(t)",
    "functionDocs": "This function checks whether the specified table is empty and returns `True` or `False` respectively.",
    "inputsDocs": "* `t` — table to check",
    "resultsDocs": "* `b` — `True` or `False`",
    "example": "```\nPrint(IsTableEmpty({}))\nPrint(IsTableEmpty({0}))\n```\n\nThe first call will print \"1\" (true), the second \"0\" (false).",
    "platforms": ["All"],
    "insertText": "IsTableEmpty(${1:t})"
  },
  {
    "name": "ListItems",
    "helpId": "ListItems",
    "shortDescription": "count items of a list",
    "version": "2.0",
    "synopsis": "c = ListItems(list)",
    "functionDocs": "This function iterates over all items in the list specified by `list` and returns how many items it has. Counting will stop when an element of type [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) is found in the list.\n\nNote that this function only counts items at successive integer indices. It starts at index 0 and counts all items at successive integer indices until a [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) item is encountered. To count all items of a table, use the [TableItems()](https://www.hollywood-mal.com/docs/html/hollywood/TableItems_.html) function instead. See [TableItems](https://www.hollywood-mal.com/docs/html/hollywood/TableItems_.html).\n\nNote that this function is rather slow when used with normal Hollywood tables. To accelerate `ListItems()`, you have to use it with optimized lists created by [CreateList()](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html). See [CreateList](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html).",
    "inputsDocs": "* `list` — table whose items are to be counted",
    "resultsDocs": "* `c` — counter",
    "example": "```\nPrint(ListItems({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))\n```\n\nThis returns 10.",
    "platforms": ["All"],
    "insertText": "ListItems(${1:list})"
  },
  {
    "name": "NextItem",
    "helpId": "NextItem",
    "shortDescription": "traverse fields of a table",
    "version": "2.0",
    "synopsis": "next, item = NextItem(table[, start])",
    "functionDocs": "`NextItem()` returns the item that follows after the item `start` in the specified table. If `start` is [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), the first table item is returned. If there is no item after `start`, [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) is returned.\n\nThis function is mostly used to traverse all fields of the table in argument 1. To do this, you pass the table in argument 1 and leave out the second argument. `NextItem()` then returns an index to the next value in the table and the value at that table index. To traverse all fields, you have to pass the `next` value to `NextItem()` as the second argument and loop over it until the `next` value is [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html).\n\nWhen there are no more items in the table, [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) is returned and you can terminate your loop. Be careful when checking variables against [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) because 0=[Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) is actually `True` in Hollywood. Thus, [GetType()](https://www.hollywood-mal.com/docs/html/hollywood/GetType_.html) is the only reliable way to find out if a variable is really [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html). Simply checking it against [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) would also result in `True` if the variable was 0.\n\nDo not expect this function to return the table fields in the order they were assigned. Hollywood often stores them in a different order.",
    "inputsDocs": "* `table` — table to traverse\n* `start` — optional: where to start the traversal (defaults to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) which means start at the beginning)",
    "resultsDocs": "* `next` — index of the next table item after `start` or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) if there are no more items\n* `item` — table value of the item next to `start`",
    "example": "```\nt = {1, 2, 3, 4, 5, \"Hello World\", {100, 200, 300}, [-1.5] = -1.5,\n     b = 66, Function(s) DebugPrint(s) EndFunction}\na, b = NextItem(t)\nWhile GetType(a) <> #NIL\n  DebugPrint(b)\n  a, b = NextItem(t, a)\nWend\n```\n\nThe above code traverses a heterogenous table. The output will be the following:\n\n```\n2\n3\n4\n5\nHello World\nTable: 74cbd42c\nFunction: 74cbd3c8\n1\n-1.5\n66\n```\n\nYou see that the fields are returned in a different order than they were assigned.",
    "platforms": ["All"],
    "insertText": "NextItem(${1:table})"
  },
  {
    "name": "Pack",
    "helpId": "Pack",
    "shortDescription": "pack a table",
    "version": "8.0",
    "synopsis": "t = Pack(a[, b, ...])",
    "functionDocs": "This function takes all arguments passed to it and stores them in a table, which is then returned. The table will have as many elements as you passed arguments to this function.\n\nTo unpack all table elements, use the [Unpack()](https://www.hollywood-mal.com/docs/html/hollywood/Unpack_.html) function.",
    "inputsDocs": "* `a` — first parameter to pack into table\n* `b` — second parameter to pack into table\n* `...` — unlimited number of further parameters to pack",
    "resultsDocs": "* `t` — a table containing all values passed to this function",
    "example": "```\nt = Pack(1, 2, 3)\nPrint(t[0], t[1], t[2])\n```\n\nThis will print \"1 2 3\".",
    "platforms": ["All"],
    "insertText": "Pack(${1:a})"
  },
  {
    "name": "Pairs",
    "helpId": "Pairs",
    "shortDescription": "traverse over all fields of a table",
    "version": "2.0",
    "synopsis": "func, state, val = Pairs(table)",
    "functionDocs": "This function can be used in conjunction with the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement to traverse over all fields of a table. As required by the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement, `Pairs()` will return three values: An iterator function, a private state information, and an initial value for the traversal. The iterator function will then return the key/value combination of all table fields.\n\nIf you want to traverse over the integer indices of a table only, use the [IPairs()](https://www.hollywood-mal.com/docs/html/hollywood/IPairs_.html) function instead.\n\nSee [Generic For statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html).",
    "inputsDocs": "* `table` — table to traverse",
    "resultsDocs": "* `func` — iterator function\n* `state` — private state information\n* `val` — initial traversal value",
    "example": "```\na = {\"one\", \"two\", \"three\", x = 5, y = 6}\nFor i, v In Pairs(a)\n  DebugPrint(i, v)\nNext\n```\n\nThe code above will print \"0 one\", \"1 two\", \"2 three\", \"x 5\", and \"y 6\".",
    "platforms": ["All"],
    "insertText": "Pairs(${1:table})"
  },
  {
    "name": "RawEqual",
    "helpId": "RawEqual",
    "shortDescription": "compare two tables without metamethods",
    "version": "2.0",
    "synopsis": "eq = RawEqual(t1, t2)",
    "functionDocs": "This function compares the two tables and returns `True` if they are the same, `False` otherwise. This is basically the same as writing\n\n```\neq = (t1 = t2)\n```\n\nThe difference is, though, that `RawEqual()` will do the comparison without invoking any [metamethod](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html) that might be defined in the tables. See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html).",
    "inputsDocs": "* `t1` — table 1 to compare\n* `t2` — table 2 to compare",
    "resultsDocs": "* `eq` — `True` if tables are equal, `False` otherwise",
    "platforms": ["All"],
    "insertText": "RawEqual(${1:t1}, ${2:t2})"
  },
  {
    "name": "RawGet",
    "helpId": "RawGet",
    "shortDescription": "read value from table without metamethods",
    "version": "2.0",
    "synopsis": "v = RawGet(t, key)",
    "functionDocs": "This function reads the value at index `key` from the specified table and returns it. Basically, this function does the same as the following expression:\n\n```\nv = t[key]\n```\n\nThe difference is that `RawGet()` will never invoke any [metamethod](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html) and it will not fail if the specified key does not exist. Thus, it is useful for checking if a specific table key exists, or for reading values from tables without invoking any metamethod. See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html).\n\nPlease note that string indices are normally in lower case except when using brackets to initialize the table index. Consider the following code:\n\n```\nt1 = {TEST = 1}\nDebugPrint(RawGet(t1, \"TEST\"), RawGet(t1, \"test\")) ; prints Nil/1\nt2 = {}\nt2.TEST = 1\nDebugPrint(RawGet(t2, \"TEST\"), RawGet(t2, \"test\")) ; prints Nil/1\nt3 = {}\nt3[\"TEST\"] = 1\nDebugPrint(RawGet(t3, \"TEST\"), RawGet(t3, \"test\")) ; prints 1/Nil\n```\n\nAs you can see, when initializing the `TEST` element using curly braces or the dot operator, the string index `TEST` is automatically converted to lower case. When using brackets to initialize the `TEST` element, however, no conversion is taking place. This also has the consequence that you can't access non-lower case string indices initialized with the bracket syntax using the dot operator because the dot operator always converts the index to lower case.\n\nStarting with Hollywood 6.0 you can also use the convenience function [HaveItem()](https://www.hollywood-mal.com/docs/html/hollywood/HaveItem_.html) to check if a table item exists. See [HaveItem](https://www.hollywood-mal.com/docs/html/hollywood/HaveItem_.html).",
    "inputsDocs": "* `t` — table to query\n* `key` — key to search for",
    "resultsDocs": "* `v` — value of the specified key or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) if key does not exist in the table",
    "example": "```\nt = {x = 10, y = 20}\nNPrint(RawGet(t, \"x\"))\nNPrint(RawGet(t, \"y\"))\nNPrint(RawGet(t, \"z\"))\n```\n\nThe code above will print 10 / 20 / [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html).",
    "platforms": ["All"],
    "insertText": "RawGet(${1:t}, ${2:key})"
  },
  {
    "name": "RawSet",
    "helpId": "RawSet",
    "shortDescription": "write value to table without metamethods",
    "version": "2.0",
    "synopsis": "RawSet(t, key, val)",
    "functionDocs": "This function writes the specified value to the specified table at index `key`. The specified value can be of any type (number, string, table, function, etc.). Basically, this function does the same as the following expression:\n\n```\nt[key] = v\n```\n\nThe only difference is that `RawSet()` will never invoke any [metamethod](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html) so that you have full and immediate access to all table fields. See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html).",
    "inputsDocs": "* `t` — table to modify\n* `key` — key to write\n* `val` — value to set key to",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RawSet(${1:t}, ${2:key}, ${3:val})"
  },
  {
    "name": "RemoveItem",
    "helpId": "RemoveItem",
    "shortDescription": "remove item from a list",
    "version": "2.0",
    "synopsis": "e = RemoveItem(list[, pos])",
    "functionDocs": "This function removes an item from the list specified by `list` and returns it. If you omit the optional argument `pos`, the last item of the list will be removed. Otherwise the specified item is removed. Position 0 specifies the first item of the list. After removing the item, the list is reorganized to close the gap.\n\nNote that this function is rather slow when used with normal Hollywood tables. To accelerate `RemoveItem()`, you have to use it with optimized lists created by [CreateList()](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html). See [CreateList](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html).",
    "inputsDocs": "* `list` — table from where to remove the element\n* `pos` — optional: item that is to be removed (defaults to -1 which means that the last element should be removed)",
    "resultsDocs": "* `e` — the item that was just removed",
    "example": "```\na = {1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10}\ne = RemoveItem(a, 7)\nFor k = 1 To ListItems(a) Do Print(a[k - 1] .. \" \")\n```\n\nRemoves the number 8 because it is twice in the list. The variable e will receive the value 8. After removing the item, the correct row will be printed: \"1 2 3 4 5 6 7 8 9 10\".",
    "platforms": ["All"],
    "insertText": "RemoveItem(${1:list})"
  },
  {
    "name": "SetListItems",
    "helpId": "SetListItems",
    "shortDescription": "convert table to optimized list",
    "version": "9.0",
    "synopsis": "SetListItems(t, n)",
    "functionDocs": "This function can be used to convert an existing table to an optimized list. Optimized lists have the advantage that [InsertItem()](https://www.hollywood-mal.com/docs/html/hollywood/InsertItem_.html), [RemoveItem()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveItem_.html), [ListItems()](https://www.hollywood-mal.com/docs/html/hollywood/ListItems_.html) and [GetItem()](https://www.hollywood-mal.com/docs/html/hollywood/GetItem_.html) are much faster than when used with normal Hollywood tables.\n\nYou have to pass the table to convert in the `t` argument and the number of list entries in `n`. Note that the value you pass in `n` must match the number of list entries currently in the table, i.e. it must match the return value of [ListItems()](https://www.hollywood-mal.com/docs/html/hollywood/ListItems_.html).\n\nNote that there are some restrictions when using optimized lists. See [CreateList](https://www.hollywood-mal.com/docs/html/hollywood/CreateList_.html).",
    "inputsDocs": "* `t` — table to convert to optimized list\n* `n` — number of entries in the list",
    "example": "```\nt = {}\nFor Local k = 1 To 10000 Do t[k-1] = k\nSetListItems(t, 10000)\nPrint(ListItems(t))\n```\n\nThe code above creates a normal Hollywood table, fills it with 10000 items, and then converts it to an optimized list.",
    "platforms": ["All"],
    "insertText": "SetListItems(${1:t}, ${2:n})"
  },
  {
    "name": "SetMetaTable",
    "helpId": "SetMetaTable",
    "shortDescription": "assign a table's metatable",
    "version": "2.0",
    "synopsis": "SetMetaTable(t, mt)",
    "functionDocs": "This function assigns the metatable specified in `mt` to the table specified in argument 1. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as `mt`, the table's metatable will be removed. See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html).",
    "inputsDocs": "* `t` — table that shall be modified\n* `mt` — metatable you would like to assign to `t`",
    "example": "See [Metamethods](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprMM_.html)",
    "platforms": ["All"],
    "insertText": "SetMetaTable(${1:t}, ${2:mt})"
  },
  {
    "name": "Sort",
    "helpId": "Sort",
    "shortDescription": "sort an array",
    "version": "1.0",
    "synopsis": "Sort(array[, sortfunc])",
    "functionDocs": "This function sorts the array specified by `array`. It supports arrays of type [number](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNumber_.html), type [string](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeString_.html) or an arbitrary data type via a custom callback. This function stops sorting if it finds a [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) element or an empty string (\"\") in string arrays. String arrays are sorted alphabetically, number arrays are sorted in ascending order.\n\nStarting with Hollywood 4.5, you can customize the sorting operation by using a custom sort callback. This function has to accept two parameters and it has to return if the first parameter should be inserted before the second one or not. This gives you great flexibility in setting up custom sort operations because you can compare arbitrary values and you can also customize the sorting order.",
    "inputsDocs": "* `array` — array to sort\n* `sortfunc` — optional: custom function telling Hollywood how to sort (V4.5)",
    "example": "```\nnames = {\"Joey\", \"Dave\", \"Mark\", \"Stephen\", \"Al\", \"Jefferson\"}\nSort(names)\nFor k = 0 To 5\n   NPrint(names[k])\nNext\n```\n\nThe above code defines an array, adds some names to it and then sorts it. The output is \"Al, Dave, Jefferson, Joey, Mark, Stephen\".\n\n---\n\n```\nnums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nSort(nums, Function(a, b) Return(a > b) EndFunction)\nFor k = 0 To 9\n   NPrint(nums[k])\nNext\n```\n\nThe code above uses a custom sorting function to sort table \"nums\" in descending order. The result will be: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.",
    "platforms": ["All"],
    "insertText": "Sort(${1:array})"
  },
  {
    "name": "TableItems",
    "helpId": "TableItems",
    "shortDescription": "count all table items",
    "version": "6.1",
    "synopsis": "c = TableItems(t)",
    "functionDocs": "This function counts all items in the specified table. In contrast to [ListItems()](https://www.hollywood-mal.com/docs/html/hollywood/ListItems_.html) which only counts items at successive integer indices, `TableItems()` really counts all table elements, including those at string or floating point indices.",
    "inputsDocs": "* `t` — table whose items are to be counted",
    "resultsDocs": "* `c` — number of items in table",
    "example": "```\nPrint(TableItems({x=5, y=6, [6]=1, 3, 4, 5, 6}))\n```\n\nThis returns 7.",
    "platforms": ["All"],
    "insertText": "TableItems(${1:t})"
  },
  {
    "name": "Unpack",
    "helpId": "Unpack",
    "shortDescription": "unpack a table",
    "version": "2.0",
    "synopsis": "a, ... = Unpack(t)",
    "functionDocs": "This function unpacks the table specified by `t` and returns all of its elements. `Unpack()` returns as many values as there are elements in the table.\n\nTo pack parameters into a table, use the [Pack()](https://www.hollywood-mal.com/docs/html/hollywood/Pack_.html) function.",
    "inputsDocs": "* `t` — table to unpack",
    "resultsDocs": "* `a` — first value\n* `...` — additional return values depending on how much elements there are in the table",
    "example": "```\na, b, c = Unpack({1, 2, 3})\n```\n\nThe above code unpacks the specified table. `a` will get the value 1, `b` will be assigned 2 and `c` will receive the value 3.\n\n---\n\n```\na = {1, 2, 3, 4, 5, 6}\nPrint(Unpack(a))\n```\n\nThis will print \"1 2 3 4 5 6\".",
    "platforms": ["All"],
    "insertText": "Unpack(${1:t})"
  }
]
