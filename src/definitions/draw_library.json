[
  {
    "name": "Arc",
    "helpId": "Arc",
    "shortDescription": "draw a partial ellipse",
    "version": "2.0",
    "synopsis": "Arc(x, y, xradius, yradius, start, end[[, color], table])",
    "functionDocs": "This function draws a partial ellipse at the position specified by `x` and `y` using the specified radii and color (RGB value) in the style configured using the [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) and [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html) commands. The arguments `start` and `end` specify the start and end angles of the ellipse and must be specified in degrees. If you want to draw a closed ellipse, the `start` argument needs to be 0 and the `end` argument needs to be 360. Using the [Ellipse()](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html) command is of course easier in this case.\n\nThe width of the partial ellipse will be `xradius` * 2 + 1 (center point) and the height will be `yradius` * 2 + 1 (center point).\n\nIf layers are enabled, this command will add a new layer of the type `#ARC` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the style of the arc. The following options are possible:\n\n- `Clockwise`: You can use this tag to specify whether or not the elliptic arc shall be drawn in clockwise direction. This tag defaults to `True` which means clockwise drawing. If you set it to `False`, `Arc()` will connect the angles in anti-clockwise direction. (V2.5)\n\nFurthermore, the optional table argument can also contain one or more of the [standard tags for all drawing commands](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nPlease note that due to historical reasons the position that has to be passed to this function in the first two arguments is really the top-left corner of the elliptical arc's bounding rectangle. This might be confusing since traditionally elliptical arcs are drawn relative to their center point. Due to a design mistake in Hollywood 1.0, however, Hollywood unfortunately deviates from this standard.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — x offset for the ellipse\n* `y` — y offset for the ellipse\n* `xradius` — x radius of your ellipse\n* `yradius` — y radius of your ellipse\n* `start` — start angle in degrees (must be positive)\n* `end` — end angle in degrees (must be positive)\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "example": "```\nArc(0, 0, 183, 183, 45, 315, #WHITE)\nCircle(164, 33, 16, #BLACK)\n```\n\nDraws a pac-man shape.",
    "platforms": ["All"],
    "insertText": "Arc(${1:x}, ${2:y}, ${3:xradius}, ${4:yradius}, ${5:start}, ${6:end})"
  },
  {
    "name": "Box",
    "helpId": "Box",
    "shortDescription": "draw a rectangle",
    "version": "1.0",
    "synopsis": "Box(x, y, width, height[[, color], table])",
    "functionDocs": "This function draws a rectangle at the position specified by `x` and `y` in the dimensions specified by `width` and `height` using the specified color (RGB value). The rectangle will be drawn in the form style specified using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) and will be filled according to the configuration selected with [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\nIf layers are enabled, this command will add a new layer of the type `#BOX` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the style of the box. The following options are possible:\n\n- `RoundLevel`: You can specify this tag to create a rectangle with rounded corners. You need to pass a round level in percentage which specifies how round the corners will be (possible values are 0 to 100). Defaults to 0 which means no round corners. (V1.9)\n\n- `CornerA, CornerB, CornerC, CornerD`: These four tags allow you to fine-tune the corner rounding of the rectangle. You can specify a rounding level (0 to 100) for every corner of the rectangle thus allowing you to create a rectangle where not all corners are rounded, or where the different corners use different rounding levels. These tags will override any setting specified in the `RoundLevel` tag. (V5.0)\n\nFurthermore, the optional table argument can also contain one or more of the [standard tags for all drawing commands](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — destination x offset\n* `y` — destination y offset\n* `width` — desired width\n* `height` — desired height\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "example": "```\nBox(0, 0, 640, 480, #YELLOW)\n```\n\nThe above code draws a yellow box as a border of the 640x480 display.\n\n---\n\n```\nBox(0, 0, 300, 200, #RED, {RoundLevel = 25})\n```\n\nThe code above draws a red box with corners rounded by 25%.",
    "platforms": ["All"],
    "insertText": "Box(${1:x}, ${2:y}, ${3:width}, ${4:height})"
  },
  {
    "name": "Circle",
    "helpId": "Circle",
    "shortDescription": "draw a circle",
    "version": "1.0",
    "synopsis": "Circle(x, y, radius[[, color], table])",
    "functionDocs": "This function draws a circle at the position specified by `x` and `y` using the specified radius and color (RGB value). The circle will be drawn in the form style specified using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) and will be filled according to the configuration selected with [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\nThe width and height of circle will be `radius` * 2 + 1 (center point).\n\nIf layers are enabled, this command will add a new layer of the type `#CIRCLE` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5, this function accepts a new optional table argument that can be used to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all of Hollywood's draw commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nPlease note that due to historical reasons the position that has to be passed to this function in the first two arguments is really the top-left corner of the circle's bounding rectangle. This might be confusing since traditionally circles are drawn relative to their center point. Due to a design mistake in Hollywood 1.0, however, Hollywood unfortunately deviates from this standard.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — x offset\n* `y` — y offset\n* `radius` — radius of your circle\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "Circle(${1:x}, ${2:y}, ${3:radius})"
  },
  {
    "name": "Cls",
    "helpId": "Cls",
    "shortDescription": "clear screen",
    "version": "2.0",
    "synopsis": "Cls([color])",
    "functionDocs": "This function quickly clears the current output device. Its behaviour depends on what is currently selected as the output device.\n\nIf the output device is the display, the current background picture will be restored and all layers and sprites will be removed. The color argument is not used in this case.\n\nIf the output device is a brush, it will be cleared with the specified color.\n\nIf the output device is a background picture, i.e. [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html) with mode set to `#SELMODE_LAYERS` is active, all layers of that picture will be removed. The color argument is not used in this case.\n\nIf the output device is a mask, `Cls()` will clear the pixels using the mode that was installed by [SetMaskMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetMaskMode_.html). The color argument is not used in this case.\n\nIf the output device is an alpha channel, `Cls()` will fill the pixels with the intensity specified using [SetAlphaIntensity()](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html). The color argument is not used in this case.\n\nNote that when the current draw target is palette-based and the palette mode is set to `#PALETTEMODE_PEN`, this function will clear the screen using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `color` — optional: [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) (defaults to `#BLACK`); only required when used while [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) is active",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "Cls()"
  },
  {
    "name": "Ellipse",
    "helpId": "Ellipse",
    "shortDescription": "draw an ellipse",
    "version": "1.0",
    "synopsis": "Ellipse(x, y, xradius, yradius[[, color], table])",
    "functionDocs": "This function draws an ellipse at the position specified by `x` and `y` using the specified radii and color (RGB value). The ellipse will be drawn in the form style specified using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) and will be filled according to the configuration selected with [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\nThe width of the ellipse will be `xradius` * 2 + 1 (center point) and the height will be `yradius` * 2 + 1 (center point).\n\nIf layers are enabled, this command will add a new layer of the type `#ELLIPSE` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5, this function accepts a new optional table argument that can be used to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all of Hollywood's draw commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nPlease note that due to historical reasons the position that has to be passed to this function in the first two arguments is really the top-left corner of the ellipse's bounding rectangle. This might be confusing since traditionally ellipses are drawn relative to their center point. Due to a design mistake in Hollywood 1.0, however, Hollywood unfortunately deviates from this standard.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — x offset\n* `y` — y offset\n* `xradius` — x radius of your ellipse\n* `yradius` — y radius of your ellipse\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "Ellipse(${1:x}, ${2:y}, ${3:xradius}, ${4:yradius})"
  },
  {
    "name": "GetFillStyle",
    "helpId": "GetFillStyle",
    "shortDescription": "get current fill style",
    "version": "7.1",
    "synopsis": "style[, t] = GetFillStyle()",
    "functionDocs": "This function returns the current fill style set using [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). The return value `style` is set to either `#FILLNONE`, `#FILLCOLOR`, `#FILLGRADIENT`, or `#FILLTEXTURE`. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\nIf `style` is `#FILLNONE`, `GetFillStyle()` will also return a table with the following fields:\n\n- `Thickness`: The outline thickness in pixels.\n\nIf `style` is `#FILLGRADIENT`, the return table will contain the following fields:\n\n- `Type`: Gradient type. This will be either `#LINEAR`, `#CONICAL`, or `#RADIAL`.\n\n- `StartColor`: Gradient start color.\n\n- `EndColor`: Gradient end color.\n\n- `Angle`: Gradient angle. Only supported for types `#LINEAR` and `#CONICAL`.\n\n- `CenterX, CenterY`: Gradient center point. Only supported for types `#RADIAL` and `#CONICAL`.\n\n- `Balance`: Gradient balance point. Only supported for `#CONICAL`.\n\n- `Border`: Gradient border. Only supported for `#RADIAL`.\n\n- `Colors`: If the gradient uses more than two colors, this field will contain a table with all those colors and their stop points.\n\nSee [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html).\n\nIf `style` is `#FILLTEXTURE`, the return table will contain the following fields:\n\n- `Brush`: Identifier of the brush used for texturing.\n\n- `X, Y`: Pixel offset inside the brush to use as a starting offset for texturing.\n\nSee [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `style` — the current fill style\n* `t` — optional: table containing additional style information (see above)",
    "platforms": ["All"],
    "insertText": "GetFillStyle()"
  },
  {
    "name": "GetFormStyle",
    "helpId": "GetFormStyle",
    "shortDescription": "get current form style",
    "version": "7.1",
    "synopsis": "style[, t] = GetFormStyle()",
    "functionDocs": "This function returns the current form style set using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html). The return value `style` is set to a combination of the flags `#ANTIALIAS`, `#SHADOW`, and `#BORDER`. See [SetFormStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html).\n\nIf `#SHADOW` is set, `GetFormStyle()` also returns a table as the second return value which contains the following fields:\n\n- `ShadowColor`: The shadow color.\n\n- `ShadowSize`: The distance of the shadow from the main shape in pixels.\n\n- `ShadowDir`: The direction of the shadow. This will be one of the [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html).\n\nIf `#BORDER` is set, the return table will contain the following fields:\n\n- `BorderColor`: The color of the border.\n\n- `BorderSize`: The thickness of the border in pixels\n\nSee [SetFormStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `style` — a combination of form style flags\n* `t` — optional: table containing additional style information (see above)",
    "platforms": ["All"],
    "insertText": "GetFormStyle()"
  },
  {
    "name": "GetLineWidth",
    "helpId": "GetLineWidth",
    "shortDescription": "get current outline thickness",
    "version": "7.1",
    "synopsis": "t = GetLineWidth()",
    "functionDocs": "This function returns the current outline thickness set by [SetLineWidth()](https://www.hollywood-mal.com/docs/html/hollywood/SetLineWidth_.html) or [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). See [SetLineWidth](https://www.hollywood-mal.com/docs/html/hollywood/SetLineWidth_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — current outline thickness",
    "platforms": ["All"],
    "insertText": "GetLineWidth()"
  },
  {
    "name": "Line",
    "helpId": "Line",
    "shortDescription": "draw a line",
    "version": "1.0",
    "synopsis": "Line(x1, y1, x2, y2[[, color], table])",
    "functionDocs": "This function draws a line from the point defined by `x1` and `y1` to the point defined by `x2` and `y2` in the specified color (RGB value).\n\nIf you want to have anti-aliased lines, use the [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) command to enable anti-aliased drawing.\n\nIf layers are enabled, this command will add a new layer of the type `#LINE` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the style of the line. The following options are possible:\n\n- `Thickness`: This tag allows you to specify the thickness of the line you want to draw. The minimum acceptable value here is 1 which will draw a normal line. This is also the default if you do not specify this tag. (V2.5)\n\n- `Arrowhead`: This tag allows you to turn the line into an arrow. It can be set to one of the following tags:\n\n  - `#ARROWHEAD_NONE`: No arrowhead. This is the default mode.\n\n  - `#ARROWHEAD_SINGLE`: Add arrowhead to end of line.\n\n  - `#ARROWHEAD_DOUBLE`: Add arrowhead to start and end of line.\n\n  Defaults to `#ARROWHEAD_NONE`. (V9.1)\n\nFurthermore, the optional table argument can also contain one or more of the [standard tags for all drawing commands](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x1` — source x offset\n* `y1` — source y offset\n* `x2` — destination x offset\n* `y2` — destination y offset\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "example": "```\nLine(0, 0, 639, 479, #WHITE)\nLine(639, 0, 0, 479, #WHITE)\n```\n\nThe above code draws a white cross on the display.",
    "platforms": ["All"],
    "insertText": "Line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})"
  },
  {
    "name": "Plot",
    "helpId": "Plot",
    "shortDescription": "draw a pixel",
    "version": "1.0",
    "synopsis": "Plot(x, y[, color])",
    "functionDocs": "This function draws a single pixel to the display in the specified color. `Plot()` works only with disabled layers. If you want to have a 1x1 sized layer, you can use [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html) to achieve this result.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — x offset\n* `y` — y offset\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel",
    "example": "```\nPlot(#CENTER, #CENTER, #RED)\n```\n\nPlot a red pixel in the middle of your display.",
    "platforms": ["All"],
    "insertText": "Plot(${1:x}, ${2:y})"
  },
  {
    "name": "Polygon",
    "helpId": "Polygon",
    "shortDescription": "draw a polygon",
    "version": "1.9",
    "synopsis": "Polygon(x, y, vertices, count[[, color], table])",
    "functionDocs": "This function draws a polygon from a table of vertices. You have to pass a table of x,y points that are used to draw the polygon in the `vertices` parameter. The `count` parameter specifies how many vertices your polygon has. Additionally, you need to specify the color for the polygon (in RGB format). The polygon will be drawn in the form style specified using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html) and will be filled according to the configuration selected with [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). Also remember that the last vertex should close your polygon, which means that it must be the same as the first vertex.\n\nThe vertices can also be negative and/or specified in floating point notation to achieve the best precision. Hollywood will not round them off before it does the final rasterization.\n\nIf layers are enabled, this command will add a new layer of the type `#POLYGON` to the layer stack.\n\nNew in Hollywood 2.0: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended drawing.\n\nStarting with Hollywood 4.5, this function accepts a new optional table argument that can be used to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all of Hollywood's draw commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color passed to the function.",
    "inputsDocs": "* `x` — x offset for the polygon on the display\n* `y` — y offset for the polygon on the display\n* `vertices` — a table of vertices that describe the polygon\n* `count` — number of vertices in the table\n* `color` — optional: [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color (defaults to `#BLACK`) color is optional because it is not required when you render to a mask or alpha channel\n* `table` — optional: table containing further arguments; can be any from the ones listed above and from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) (V4.5)",
    "example": "```\nv = {}\nv[0] = 0    ;X1\nv[1] = 100  ;Y1\nv[2] = 50   ;X2\nv[3] = 0    ;Y2\nv[4] = 100  ;X3\nv[5] = 100  ;Y3\nv[6] = 0    ;X4\nv[7] = 100  ;Y4\nPolygon(#CENTER, #CENTER, v, 4, #RED)\n```\n\nThe above code draws a red triangle in the center of the display.\n\n---\n\n```\nPolygon(#CENTER, #CENTER, v, 4, #RED, {Rotate = 45})\n```\n\nThe above code draws a triangle rotated by 45 degrees.",
    "platforms": ["All"],
    "insertText": "Polygon(${1:x}, ${2:y}, ${3:vertices}, ${4:count})"
  },
  {
    "name": "ReadPixel",
    "helpId": "ReadPixel",
    "shortDescription": "read a pixel from output device",
    "version": "1.5",
    "synopsis": "col = ReadPixel(x, y)",
    "functionDocs": "This function reads a pixel from the position specified by `x` and `y` from the current output device and returns its color.\n\nPlease note: The color returned by this function can slightly vary from the original color at this position. For example, if you have a brush which is completely white (i.e. all pixels have the color $FFFFFF). If you use `ReadPixel()` now to read the color of an arbitrary pixel from this brush, you will receive the color $FFFFFF only if Hollywood runs on a 24-bit or 32-bit screen. If Hollywood runs on a 16-bit screen, you will get the color $FCF8FC, on a 15-bit screen you would receive $F8F8F8. This is because those screens do not have 16.7 million colors but only 65536 (16-bit screens) or 32768 (15-bit screens) respectively. You can use the function [GetRealColor()](https://www.hollywood-mal.com/docs/html/hollywood/GetRealColor_.html) to find out which color represents the specified color on the current screen.\n\nIf the current output device is the mask of a brush, then `ReadPixel()` will return either 0 if the pixel is invisible or 1 if the pixel is visible.\n\nIf the current output device is an alpha channel of a brush, then `ReadPixel()` will return the transparency level of the requested pixel which ranges from 0 (full transparency) to 255 (no transparency).",
    "inputsDocs": "* `x` — x coordinate of the pixel\n* `y` — y coordinate of the pixel",
    "resultsDocs": "* `col` — color or transparency setting of the pixel at the specified position",
    "example": "```\nCreateBrush(1, 320, 256)\nSelectBrush(1)\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 256, #GREEN)\na = ReadPixel(100, 100)\nEndSelect()\n```\n\nThe above code draws a green rectangle to brush 1 and reads the pixel at 100:100 from it. The variable a will receive the value of `#GREEN` because the whole brush is filled with green.",
    "platforms": ["All"],
    "insertText": "ReadPixel(${1:x}, ${2:y})"
  },
  {
    "name": "SetFillStyle",
    "helpId": "SetFillStyle",
    "shortDescription": "set filling style for draw commands",
    "version": "1.5",
    "synopsis": "SetFillStyle(style)  \nSetFillStyle(#FILLGRADIENT, type, startcol, endcol[, angle, t]) (V2.0)  \nSetFillStyle(#FILLTEXTURE, brush_id[, x, y]) (V2.0)  \nSetFillStyle(#FILLNONE[, thickness]) (V2.0)",
    "functionDocs": "This function allows you to define the filling style for the [Arc()](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html), [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html), [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html), [Ellipse()](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html) and [Polygon()](https://www.hollywood-mal.com/docs/html/hollywood/Polygon_.html) commands. By default, the filling style is set to `#FILLNONE`, which means that just the outlines are drawn.\n\nCurrently the following styles are supported:\n\n- `#FILLCOLOR`: Fill objects with color\n\n- `#FILLNONE`: Do not fill object, just draw the outline. Starting with Hollywood 2.0, you can also specify a line thickness. The default for `thickness` is 1 which means an outline thickness of a single pixel. Note that `#FILLNONE` only supports the `#SHADOW` and `#BORDER` form styles when layers are enabled. Otherwise no shadow or border will be drawn.\n\n- `#FILLGRADIENT`: Fills objects with a gradient. You have to specify three more arguments which set the type of the gradient as well as its colors; additionally you can specify the optional argument `angle` which will rotate the gradient, and there is an optional table argument for even more options; See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V2.0)\n\n- `#FILLTEXTURE`: Fills objects with a texture. You have to specify an additional argument which specifies the identifier of the brush that shall be used for texturing. Please note that any transparency channels that the brush may have (mask or alpha channel) are currently not supported by texturing. The optional `x` and `y` parameters are new in Hollywood 4.6. They allow you to specify an offset into the texture brush. Texturing will then start from this offset in the brush. The default for these arguments is 0/0 which means start at the top-left corner inside the texture brush. (V2.0)",
    "inputsDocs": "* `style` — a style id as listed above\n* `...` — additional arguments depend on the chosen style",
    "example": "```\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 256, #RED)\n```\n\nDraw a filled red rectangle at 0:0 with a dimension of 320x256.",
    "platforms": ["All"],
    "insertText": "SetFillStyle(${1:style})"
  },
  {
    "name": "SetFormStyle",
    "helpId": "SetFormStyle",
    "shortDescription": "set the form style for graphics primitives",
    "version": "2.5",
    "synopsis": "SetFormStyle(style[, t])",
    "functionDocs": "This function can be used to configure the drawing style for the commands of the graphics primitives library. This function affects the look of the [Arc()](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html), [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html), [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html), [Ellipse()](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html), [Line()](https://www.hollywood-mal.com/docs/html/hollywood/Line_.html), and [Polygon()](https://www.hollywood-mal.com/docs/html/hollywood/Polygon_.html) commands.\n\nThe style must be one of the following predefined constants:\n\n- `#NORMAL` This resets the form style to the default style.\n\n- `#ANTIALIAS` This sets the form style to anti-alias; the graphics primitives will be drawn with anti-aliasing.\n\n- `#SHADOW` This sets the form style to shadow. The forms will be drawn with a shadow with this style. The `color` argument specifies the shadow color. This color can be either in [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) notation. Shadow transparency is fully supported. The `distance` argument specifies the distance of the shadow from the main form in pixels. The `direction` argument specifies the direction of the shadow. This must be one of the [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html). Please note that `#SHADOW` is not supported for the fill style `#FILLNONE` if layers are disabled.\n\n- `#BORDER` This sets the form style to bordered. A border of the specified size will be drawn around the form with this style. The `color` argument specifies the color for the border. This color can either be in [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) notation. Border transparency is fully supported. The `size` argument specifies the desired thickness of the border in pixels. Please note that `#BORDER` is not supported for the fill style `#FILLNONE` if layers are disabled. Before Hollywood 9.0, this style was called `#EDGE`.\n\nTo combine multiple form styles in a single call simply bit-or them with another, e.g. a call to `SetFormStyle(#SHADOW|#BORDER)` will enable the shadow and border form styles. Obviously, the style `#NORMAL` is mutually exclusive and cannot be combined with any other style.\n\nStarting with Hollywood 9.0, `SetFormStyle()` uses a new syntax that accepts an optional table argument that supports the following tags:\n\n- `ShadowDir`: Specifies the direction of the shadow. This must be set to one of Hollywood's [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html). This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `ShadowColor`: Specifies the color of the shadow. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `ShadowSize`: Specifies the length of the shadow. This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `BorderColor`: Specifies the color of the border. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the `#BORDER` style has been set (see above). (V9.0)\n\n- `BorderSize`: Specifies the size of the border. This tag is only handled when the `#BORDER` style has been set (see above). (V9.0)\n\nPlease note that the [Line()](https://www.hollywood-mal.com/docs/html/hollywood/Line_.html) command does not support the form styles `#SHADOW` and `#BORDER`. It only recognizes the style `#ANTIALIAS`.",
    "inputsDocs": "* `style` — special style constant (see list above)\n* `t` — optional: table argument containing further options (see above) (V9.0)",
    "example": "```\nSetFormStyle(#ANTIALIAS)\n```\n\nThe function call above enables anti-aliased forms.\n\n---\n\n```\nSetFormStyle(#SHADOW, {ShadowColor = ARGB(128, $939393),\n     ShadowSize = 16, ShadowDir = #SHDWSOUTHEAST})\n```\n\nThe above code enables a half-transparent grey shadow which will be positioned 16 pixels to the south-east of the main form.",
    "platforms": ["All"],
    "insertText": "SetFormStyle(${1:style})"
  },
  {
    "name": "SetLineWidth",
    "helpId": "SetLineWidth",
    "shortDescription": "set width for outline drawing",
    "version": "5.0",
    "synopsis": "SetLineWidth(width)",
    "functionDocs": "This command can be used to change the line thickness when the fill style is set to `#FILLNONE`. You can also change the line thickness by calling [SetFillStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html) with fill style set to `#FILLNONE` but using `SetLineWidth()` makes the code more readable.",
    "inputsDocs": "* `width` — desired line thickness for outline drawing",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetLineWidth(${1:width})"
  }
]
