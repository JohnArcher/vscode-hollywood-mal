[
  {
    "name": "AddFontPath",
    "helpId": "AddFontPath",
    "shortDescription": "add additional search path for fonts",
    "version": "5.0",
    "synopsis": "AddFontPath(path$)",
    "functionDocs": "This function adds the path specified in `path$` to the search paths of Hollywood's inbuilt font engine. By default, the inbuilt font engine only looks for fonts inside a subdirectory \"Fonts\" in the current directory. On Amiga systems, it also looks in the FONTS: assign. If you want Hollywood to look into other paths as well, you need to add them using `AddFontPath()`.\n\nPlease note that the search paths specified here only affect the inbuilt font engine, i.e. they are only used when you specify `#FONTENGINE_INBUILT` in [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html), [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html), or [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html). The search paths specified here are not respected when using `#FONTENGINE_NATIVE`.",
    "inputsDocs": "* `path$` — path to add to Hollywood's inbuilt font engine search paths",
    "example": "```\nAddFontPath(\"Data/Fonts\")\n```\n\nAdds the path \"Data/Fonts\" to the font engine's search paths.",
    "platforms": ["All"],
    "insertText": "AddFontPath(${1:path$})"
  },
  {
    "name": "AddTab",
    "helpId": "AddTab",
    "shortDescription": "add a tabulator",
    "version": "1.0",
    "synopsis": "AddTab(pos, ...)",
    "functionDocs": "This function adds the tabulator specified by `pos` to the tabulator list of Hollywood. Tabulators can only be used with the [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) function. If there is a tabulator character in a string that is passed to [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html), then it will jump to the next tabulator position. You can clear the tabulator settings by calling [ResetTabs()](https://www.hollywood-mal.com/docs/html/hollywood/ResetTabs_.html).\n\nNew in V2.0: You can pass as many tabulator positions to this command as you like.",
    "inputsDocs": "* `pos` — position of the new tabulator (in pixels)\n* `...` — more tabulator positions (V2.0)",
    "example": "```\nAddTab(100, 200, 300, 400)\nSetFontStyle(#UNDERLINED)\nNPrint(\"Last name\\tFirst name\\tAge\\tGender\\n\")\nSetFontStyle(#NORMAL)\nNPrint(\"Doe\\tJon\\t34\\tMale\")\nNPrint(\"Smith\\tMaggie\\t25\\tFemale\")\nNPrint(\"...\\t...\\t...\\t...\")\n```\n\nThe above code displays a table using tabulators.",
    "platforms": ["All"],
    "insertText": "AddTab(${1:pos})"
  },
  {
    "name": "CloseFont",
    "helpId": "CloseFont",
    "shortDescription": "close an existing font",
    "version": "4.5",
    "synopsis": "CloseFont(id)",
    "functionDocs": "This function frees all memory occupied by  the font specified by `id`. To reduce memory consumption, you should close fonts when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the font to close",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseFont(${1:id})"
  },
  {
    "name": "CopyTextObject",
    "helpId": "CopyTextObject",
    "shortDescription": "clone a text object",
    "version": "4.0",
    "synopsis": "[id] = CopyTextObject(source, dest)",
    "functionDocs": "This function clones the text object specified by `source` and creates a copy of it as text object `dest`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `dest` argument, this function will choose an identifier for the cloned text object automatically and return it to you. The new text object is independent from the old text object so you could free up the source text object after it has been cloned.",
    "inputsDocs": "* `source` — source text object identifier\n* `dest` — identifier of the text object to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)",
    "resultsDocs": "* `id` — optional: identifier of the text object; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 2 (see above)",
    "example": "```\nCopyTextObject(1, 10)\nFreeTextObject(1)\n```\n\nThe above code creates a new text object 10 which contains the same graphics data as text object 1. Then it frees text object 1 because it is no longer needed.",
    "platforms": ["All"],
    "insertText": "CopyTextObject(${1:source}, ${2:dest})"
  },
  {
    "name": "CreateFont",
    "helpId": "CreateFont",
    "shortDescription": "create font from brush",
    "version": "10.0",
    "synopsis": "[id] = CreateFont(id, brushid, charmap, width, height, cols[, t])",
    "functionDocs": "This function can be used to create a new font from a brush source. This can be useful if you need to work with custom fonts that are distributed as image files instead of common font formats like it was often the case in games from the 1980s and early 1990s and in scene demos. You have to pass the desired identifier for the new font in the `id` argument and the identifier of the brush source in the `brushid` argument. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `CreateFont()` will automatically choose an identifier and return it. After the font has been created successfully, you can set it as the current font using [UseFont()](https://www.hollywood-mal.com/docs/html/hollywood/UseFont_.html).\n\nThe `charmap` parameter must be set to a string describing the individual characters in the brush. The character dimensions must be passed in the `width` and `height` parameters. All characters must share the same dimensions. The number of characters per row must be passed in the `cols` argument.\n\nFor example, a font which supports the upper-case characters A-Z and whose characters are 32x32 pixels each could be laid out in a brush that has 4 rows containing 8 characters per row, except for the last row which contains only 2 because the English alphabet has just 26 characters so 3 rows with 8 characters plus one last row with 2 characters are sufficient. Thus, you could create such a font from a 256x128 sized brush and pass 32 for `width` and `height`, 8 for `cols` and \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" in `charmap`.\n\nThe optional table argument can be used to set some additional options. The following tags are currently recognized:\n\n- `Name`: This allows you to give your font a name. By default, the font's name will be set to \"Font\".\n\n- `RowSpacing`: If there is some spacing between the different rows of characters in the brush, you can tell `CreateFont()` about it using this tag. Just set this tag to the number of spacing pixels between each row and `CreateFont()` will skip the spacing when it creates font. Defaults to 0 which means no vertical spacing.\n\n- `ColSpacing`: If there is some spacing between the individual characters in the brush, you can tell `CreateFont()` about it using this tag. Just set this tag to the number of spacing pixels between each character and `CreateFont()` will skip the spacing when it creates font. Defaults to 0 which means no horizontal spacing.\n\n- `Ascender`: This tag allows you to set the desired ascender for the font. The ascender of a font is the maximum character extent from the baseline to the top of the line. Hollywood uses the ascender value to determine where to draw the line for the underline text style, for example. This defaults to the character height passed in `height` minus 1.\n\n`CreateFont()` supports palette brushes as well as brushes with mask or alpha channel. If the brush passed in `brushid` is a 1-bit palette brush, you will also be able to change the color of the font using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) and other functions just like you can do it for normal fonts. If the brush's depth is more than 1-bit, however, the font will be treated as a color font that always uses the same color no matter what the current font color is set to.\n\nNote that `CreateFont()` is quite flexible and could also be used as a tilemapper. Just map each tile to a character and then draw the whole tilemap using a single call to [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). This should be much faster than drawing the tiles individually.",
    "inputsDocs": "* `id` — identifier for the font or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `brushid` — identifier of the source brush\n* `charmap` — string describing all characters in the brush\n* `width` — width of each font character\n* `height` — height of each font character\n* `cols` — number of characters per row\n* `t` — optional: table containing further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the font; will only be returned if you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateFont(1, 2, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!-.:?\",30,32,10)\nUseFont(1)\nNPrint(\"HELLO WORLD!\")\n```\n\nThe code above constructs a new font from brush 2. There are 41 characters in the source brush and they are laid out as 10 characters per row and 30x32 pixels each. This means that the source brush must be at least 300x160 pixels. After creating the font, it will be selected as the current one and the text \"HELLO WORLD!\" will be printed.",
    "platforms": ["All"],
    "insertText": "CreateFont(${1:id}, ${2:brushid}, ${3:charmap}, ${4:width}, ${5:height}, ${6:cols})"
  },
  {
    "name": "CreateTextObject",
    "helpId": "CreateTextObject",
    "shortDescription": "create a text object",
    "version": "1.0",
    "synopsis": "[id] = CreateTextObject(id, text$[, table])",
    "functionDocs": "This function creates a new text object containing the data specified by `text$` and assigns the specified `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `CreateTextObject()` will automatically choose an identifier and return it. The text is rendered in the current color and with the currently selected font.\n\nThe advantage of text objects compared to standard text (output via [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) for example) is that you can easily position text objects on the screen, remove them or even scroll them using [MoveTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/MoveTextObject_.html).\n\nStarting with Hollywood 2.5, you can use [format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html) in the string you pass to `CreateTextObject()`. Using these tags you can control the font style and color of your text on-the-fly. Format tags always start and end with a square bracket ('['). In case you just want to print a square bracket, you will have to use two square brackets. If there is only one square bracket, Hollywood will always expect a format tag. Please see the chapter about [format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html) for more information on this topic.\n\nIn Hollywood 5.0 the syntax of this function changed slightly. While the old syntax is still supported for compatibility, new scripts should use the new syntax which accepts a table as argument 4. The table can contain the following elements:\n\n- `Align`: Allows you to specify the text's alignment. The following alignments are currently supported:\n\n  - `#LEFT` Left alignment.\n\n  - `#RIGHT` Right alignment.\n\n  - `#CENTER` Center lines.\n\n  - `#JUSTIFIED` Lay out text in justified lines. (V7.0)\n\n  The default value for `Align` is `#LEFT`.\n\n- `WordWrap`: `CreateTextObject()` can do automatic word-wrapping for you if you specify this additional parameter. You can use this tag to specify a maximum width for your text. `CreateTextObject()` will then use word wrapping to make sure that no text runs beyond this limit. If you do not set this argument or set it to 0 (which is also the default), the text will be as wide as it is required. Starting with Hollywood 9.1, you can also use soft hyphens or zero-width space characters to customize word wrapping but since these are Unicode characters, you need to make sure that you use UTF-8 encoding in that case.\n\n- `Encoding`: This argument can be used to specify the character encoding inside `text$`. This defaults to the default character encoding for the text library as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html).\n\n- `Color`: This tag allows you to specify the text color. The color must be provided as an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html). If you do not specify this tag, `CreateTextObject()` will use the color that was set using the [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) command instead.\n\n- `Pen`: When palette mode is `#PALETTEMODE_PEN`, this tag can be used to set the pen that should be used for drawing the text. If palette mode is `#PALETTEMODE_PEN` and `Pen` is not specified, the pen set using [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) will be used instead. (V9.0)\n\n- `Linespacing`: This tag can be used to customize the spacing pixels between lines. It can be set to a positive or a negative value. A negative value moves lines closer together, whereas a positive value increases the spacing between the lines. A value of 0 means no custom line spacing. Defaults to 0. (V10.0)\n\n- `Charspacing`: Allows you to adjust the space between characters. You can set this to a positive or negative value. A positive value will increase the space between characters, a negative value will decrease it. (V10.0)\n\n- `NoAdjust`: When drawing text objects using [DisplayTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTextObject_.html) Hollywood will position them in a way that they appear as if they had been drawn using [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) which means that they could be offset to the left and top in case parts of some characters are designed to appear in the area of previous characters. This is often the case with characters like \"j\". If you don't want that, set `NoAdjust` to `True`. In that case, calling [DisplayTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTextObject_.html) will never lead to any adjustments in positioning but the text object will strictly be drawn at the specified position. The adjustment offsets applied to a text object by Hollywood in case `NoAdjust` is `False` can be found out by querying the `#ATTRADJUSTX` and `#ATTRADJUSTY` tags. Defaults to `False`. (V10.0)\n\nNote that Hollywood currently only supports standard left-to-right based text aligned on horizontal lines. Right to left and vertical text is currently not supported.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color set via [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) or the `Color` tag above.",
    "inputsDocs": "* `id` — identifier of the new text object or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `text$` — text for the text object\n* `table` — optional: a table containing further options for the text object",
    "resultsDocs": "* `id` — optional: identifier of the text object; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nSetFontColor(#RED)\nSetFont(\"times.font\", 18)\nCreateTextObject(1, \"Hello World!\")\nDisplayTextObject(1, #CENTER, #CENTER)\n```\n\nThe above code creates a text object with the font \"times\" (size 18) and with the color red. The text is \"Hello World\". After its creation, the text object is displayed in the center of the screen.",
    "platforms": ["All"],
    "insertText": "CreateTextObject(${1:id}, ${2:text$})"
  },
  {
    "name": "DisplayTextObject",
    "helpId": "DisplayTextObject",
    "shortDescription": "show a text object",
    "version": "1.0",
    "synopsis": "DisplayTextObject(id, x, y)",
    "functionDocs": "This function displays the text object specified by `id` at the coordinates specified by `x` and `y`.\n\nIf layers are enabled this command will add a new layer of the type `#TEXTOBJECT` to the layer stack.",
    "inputsDocs": "* `id` — identifier of the text object to play\n* `x` — x position\n* `y` — y position",
    "example": "See [CreateTextObject](https://www.hollywood-mal.com/docs/html/hollywood/CreateTextObject_.html)",
    "platforms": ["All"],
    "insertText": "DisplayTextObject(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "DisplayTextObjectFX",
    "helpId": "DisplayTextObjectFX",
    "shortDescription": "display a text object with transition effects",
    "version": "1.0",
    "synopsis": "[handle] = DisplayTextObjectFX(id, x, y[, table])",
    "functionDocs": "This function is an extended version of the [DisplayTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTextObject_.html) command. It displays the text object specified by `id` at the position specified by `x` and `y` and it uses one of the many Hollywood transition effects to display it. You need also specify the speed for the transition.\n\nIf layers are enabled this command will add a new layer of the type `#TEXTOBJECT` to the layer stack.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type`: Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed`: Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter`: Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async`: You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `DisplayTextObjectFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using [AsyncDrawFrame()](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).",
    "inputsDocs": "* `id` — identifier of the text object to display\n* `x` — desired x position for the text object\n* `y` — desired y position for the text object\n* `table` — optional: transition effect configuration",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nDisplayTextObjectFX(1, 0, 0, #VLINES, 10)   ; old syntax\n\nOR\n\nDisplayTextObjectFX(1, 0, 0, {Type = #VLINES, Speed = 10})  ; new syntax\n```\n\nThe above code displays text object 1 at 0:0 with a `#VLINES` transition at speed 10.",
    "platforms": ["All"],
    "insertText": "DisplayTextObjectFX(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "FreeGlyphCache",
    "helpId": "FreeGlyphCache",
    "shortDescription": "clear glyph cache",
    "version": "4.7",
    "synopsis": "FreeGlyphCache(mode[, id])",
    "functionDocs": "This command can be used to free the cached glyphs of either a specific font or of all fonts currently in memory. If you want to free the cached glyphs of a specific font, you have to set the `mode` argument to 1 and pass the identifier of the font in the optional `id` argument. If you want to free the glyph cache of all loaded fonts, simply pass 0 in the `mode` argument.",
    "inputsDocs": "* `mode` — set this to 1 to free the glyph cache of the font specified in argument 2 or to 0 to free the glyph cache of all fonts\n* `id` — optional: identifier of the font whose glyph cache shall be cleared (mode must be set to 1 if this is used)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeGlyphCache(${1:mode})"
  },
  {
    "name": "FreeTextObject",
    "helpId": "FreeTextObject",
    "shortDescription": "free a text object",
    "version": "1.0",
    "synopsis": "FreeTextObject(id)",
    "functionDocs": "This function frees the memory of the text object specified by `id`. To reduce memory consumption, you should free text objects when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the text object",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeTextObject(${1:id})"
  },
  {
    "name": "GetAvailableFonts",
    "helpId": "GetAvailableFonts",
    "shortDescription": "retrieve list of available fonts",
    "version": "4.7",
    "synopsis": "t = GetAvailableFonts()",
    "functionDocs": "This function scans all fonts installed on the current computer, puts them into a table, and returns the information to you. This is useful to check if a specific font is available without calling [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) or [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html).\n\nThe table returned by this function will consist of several subtables. One subtable for each font. The subtables have the following elements initialized:\n\n- `Name`: The complete font name (i.e. family name plus style). For example, \"Arial Bold Italic\".\n\n- `Family`: The family name of this font, e.g. \"Arial\".\n\n- `Weight`: The weight of this font. This will be set to one of the following weight constants:\n\n  ```\n  #FONTWEIGHT_THIN\n  #FONTWEIGHT_EXTRALIGHT\n  #FONTWEIGHT_ULTRALIGHT\n  #FONTWEIGHT_LIGHT\n  #FONTWEIGHT_BOOK\n  #FONTWEIGHT_NORMAL\n  #FONTWEIGHT_REGULAR\n  #FONTWEIGHT_MEDIUM\n  #FONTWEIGHT_SEMIBOLD\n  #FONTWEIGHT_DEMIBOLD\n  #FONTWEIGHT_BOLD\n  #FONTWEIGHT_EXTRABOLD\n  #FONTWEIGHT_ULTRABOLD\n  #FONTWEIGHT_HEAVY\n  #FONTWEIGHT_BLACK\n  #FONTWEIGHT_EXTRABLACK\n  #FONTWEIGHT_ULTRABLACK\n  ```\n\n- `Slant`: The slant style of this font. This will be set to one of the following slant constants:\n\n  ```\n  #FONTSLANT_ROMAN\n  #FONTSLANT_ITALIC\n  #FONTSLANT_OBLIQUE\n  ```\n\n- `Bitmap`: `True` if this font is a bitmap font, `False` if it is a vector font. Vector fonts can be freely transformed and antialiased.\n\n- `Sizes`: If the font is a bitmap font this will be a table containing a list of available sizes for the font. If the font is a vector font, this table will be empty.\n\nPlease note that there is no guarantee that all calls to [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) or [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) will succeed with the fonts returned by this function. It can often happen that [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) and [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) will fail with a specific font although it was returned in the available table by this function. This is because `GetAvailableFonts()` returns the available fonts for all Hollywood font engines. When you call [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) or [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html), however, only one font engine can be specified. So if a call to [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) fails although the font was returned by `GetAvailableFonts()`, then this is a sign that you are using the wrong font engine to open this font. Simply switch font engines in that case and it should work correctly.",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — a table containing all available fonts",
    "example": "```\nt = GetAvailableFonts()\nFor Local k = 0 To ListItems(t) - 1\n  DebugPrint(\"Family:\", t[k].Family, \"Weight:\", t[k].Weight,\n             \"Slant:\", t[k].Slant, \"Bitmap:\", t[k].Bitmap)\nNext\n```\n\nThe code above lists all fonts available on this system.",
    "platforms": ["All"],
    "insertText": "GetAvailableFonts()"
  },
  {
    "name": "GetBulletColor",
    "helpId": "GetBulletColor",
    "shortDescription": "get current bullet color",
    "version": "9.0",
    "synopsis": "color = GetBulletColor()",
    "functionDocs": "This function returns the bullet color set using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) or [SetBulletColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletColor_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `color` — current bullet color",
    "platforms": ["All"],
    "insertText": "GetBulletColor()"
  },
  {
    "name": "GetCharMaps",
    "helpId": "GetCharMaps",
    "shortDescription": "return character maps supported by font",
    "version": "9.0",
    "synopsis": "t = GetCharMaps()",
    "functionDocs": "This function returns a table that contains all character maps supported by the font that is currently the active one. The following character maps are currently supported by Hollywood:\n\n```\n#CHARMAP_DEFAULT\n#CHARMAP_MSSYMBOL\n#CHARMAP_UNICODE\n#CHARMAP_SJIS\n#CHARMAP_BIG5\n#CHARMAP_WANSUNG\n#CHARMAP_JOHAB\n#CHARMAP_ADOBESTANDARD\n#CHARMAP_ADOBEEXPERT\n#CHARMAP_ADOBECUSTOM\n#CHARMAP_ADOBELATIN1\n#CHARMAP_OLDLATIN2\n#CHARMAP_APPLEROMAN\n```\n\nNote that character maps are only supported for fonts handled by Hollywood's inbuilt engine, i.e. the `Engine` tag must have been set to `#FONTENGINE_INBUILT` when opening the font. See [SetFont](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — table containing all character maps supported by the current font",
    "platforms": ["All"],
    "insertText": "GetCharMaps()"
  },
  {
    "name": "GetDefaultEncoding",
    "helpId": "GetDefaultEncoding",
    "shortDescription": "get default character encoding",
    "version": "7.0",
    "synopsis": "tencoding, sencoding = GetDefaultEncoding()",
    "functionDocs": "This function returns the default character encodings for the text library in `tencoding` and for the string library in `sencoding`. See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `tencoding` — default character encoding for the text library\n* `sencoding` — default character encoding for the string library",
    "platforms": ["All"],
    "insertText": "GetDefaultEncoding()"
  },
  {
    "name": "GetFontColor",
    "helpId": "GetFontColor",
    "shortDescription": "get current font color",
    "version": "7.1",
    "synopsis": "color = GetFontColor()",
    "functionDocs": "This function returns the font color set using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html). See [SetFontColor](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `color` — current font color",
    "platforms": ["All"],
    "insertText": "GetFontColor()"
  },
  {
    "name": "GetFontStyle",
    "helpId": "GetFontStyle",
    "shortDescription": "get current font style",
    "version": "7.1",
    "synopsis": "style[, t] = GetFontStyle()",
    "functionDocs": "This function returns the current font style set using [SetFontStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html). The return value `style` is set to a combination of the flags `#BOLD`, `#ITALIC`, `#UNDERLINED`, `#ANTIALIAS`, `#SHADOW`, and `#BORDER`. See [SetFontStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html).\n\nIf `#SHADOW` is set, `GetFontStyle()` also returns a table as the second return value which contains the following fields:\n\n- `ShadowColor`: The shadow color.\n\n- `ShadowSize`: The distance of the shadow from the main text in pixels.\n\n- `ShadowDir`: The direction of the shadow. This will be one of the [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html).\n\nIf `#BORDER` is set, the return table will contain the following fields:\n\n- `BorderColor`: The color of the border.\n\n- `BorderSize`: The thickness of the border in pixels\n\nSee [SetFontStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `style` — a combination of font style flags\n* `t` — optional: table containing additional style information (see above)",
    "platforms": ["All"],
    "insertText": "GetFontStyle()"
  },
  {
    "name": "GetKerningPair",
    "helpId": "GetKerningPair",
    "shortDescription": "return kerning setting for two adjacent characters",
    "version": "5.0",
    "synopsis": "kern = GetKerningPair(a$, b$[, encoding])",
    "functionDocs": "This function computes the kerning value that would be applied to the space between the two characters `a$` and `b$` if they were drawn next to each other. Kerning is often used to reduce spaces between two characters. For example, if a \"j\" character is drawn next to an \"i\" character, the \"j\" is usually moved some pixels to the left so that its underhang appears below the \"i\" which makes the text look more smooth. The kerning value returned by this function is specified in pixels. A negative kerning value means a move to the left, while a positive kerning value moves to the right.\n\nThe optional argument `encoding` can be used to specify the character encoding inside `a$` and `b$`. This defaults to the default text library character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html).\n\nNote there must be only one character in `a$` and `b$` for `GetKerningPair()` to work correctly.",
    "inputsDocs": "* `a$` — character one\n* `b$` — character two\n* `encoding` — optional: character encoding used by the strings (defaults to the text library encoding specified in the last call to [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html))",
    "resultsDocs": "* `kern` — kerning value for `a$` and `b$`",
    "example": "```\nSetFont(#SANS, 72)\nSetFontStyle(#ANTIALIAS)\nkern = GetKerningPair(\"W\", \"a\")\n```\n\nThe code above computes the kerning value for characters \"W\" and \"a\" using the inbuilt sans-serif font in size 72. It will return -3 which means that the \"a\" character is moved 3 pixels towards the \"W\" character.",
    "platforms": ["All"],
    "insertText": "GetKerningPair(${1:a$}, ${2:b$})"
  },
  {
    "name": "Locate",
    "helpId": "Locate",
    "shortDescription": "set the cursor position",
    "version": "1.0",
    "synopsis": "Locate(x, y)",
    "functionDocs": "This function sets the cursor to `x`,`y`. The cursor position is used by the [Print](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) function as the position where the output starts.\n\nPlease note: You cannot specify any of Hollywood's special constants for `x` or `y` because there is no reference width or height, therefore things like `#CENTER`, `#BOTTOM`, `#RIGHT` etc. cannot work. If you want to use these special constants, you will have to use the function [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) to print your text.",
    "inputsDocs": "* `x` — desired new position\n* `y` — desired new position",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "Locate(${1:x}, ${2:y})"
  },
  {
    "name": "MoveTextObject",
    "helpId": "MoveTextObject",
    "shortDescription": "move text object from a to b",
    "version": "1.0",
    "synopsis": "MoveTextObject(id, xa, ya, xb, yb[, table])",
    "functionDocs": "This function moves (scrolls) the text object specified by `id` softly from the location specified by `xa`,`ya` to the location specified by `xb`,`yb`.\n\nFurther configuration options are possible using the optional argument table. You can specify the move speed, special effect, and whether or not the move shall be asynchronous. See [MoveBrush](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html).",
    "inputsDocs": "* `id` — identifier of the text object to use as source\n* `xa` — source x position\n* `ya` — source y position\n* `xb` — destination x position\n* `yb` — destination y position\n* `table` — optional: further configuration for the move",
    "example": "```\nMoveTextObject(1,100,50,0,50,{Speed = 5})\n```\n\nMoves the text object 1 from 100:50 to 0:50 with speed 5.",
    "platforms": ["All"],
    "insertText": "MoveTextObject(${1:id}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb})"
  },
  {
    "name": "NPrint",
    "helpId": "NPrint",
    "shortDescription": "print data and append a linefeed",
    "version": "1.0",
    "synopsis": "NPrint(var, ...)",
    "functionDocs": "Does the same as [Print](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) but adds a linefeed at the end.",
    "inputsDocs": "* `var` — data to print\n* `...` — other arguments (V2.0)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "NPrint(${1:var})"
  },
  {
    "name": "OpenFont",
    "helpId": "OpenFont",
    "shortDescription": "open a new font",
    "version": "4.5",
    "synopsis": "[id] = OpenFont(id, fontname$, size[, table])",
    "functionDocs": "This function loads the font specified in `fontname$` and makes it available to your script under the specified id. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `OpenFont()` will automatically choose an identifier and return it. After the font has been opened successfully, you can set it as the current font using [UseFont()](https://www.hollywood-mal.com/docs/html/hollywood/UseFont_.html).\n\nThe font specified in `fontname$` must adhere to the [font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html). See [Font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html).\n\nThe optional table argument can be used to set further options. This is especially useful if you want to use Hollywood's inbuilt font engine which guarantees a pixel-perfect identical look across different platforms. See [SetFont](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html).\n\nNormally, it is more convenient to open fonts using [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) directly because it saves you the hassle of having to deal with font handles. But in certain circumstances - for instance, if you need to switch between different fonts a lot - it is handy to preload these fonts using `OpenFont()`. They are then available quicker to your script.\n\nThis command is also available from the preprocessor: Use [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html) to preload fonts! The advantage of using @FONT is that fonts specified in there are automatically linked to your applet/executable when compiling.\n\nSee [Working with fonts](https://www.hollywood-mal.com/docs/html/hollywood/PrgG2KFonts_.html).",
    "inputsDocs": "* `id` — identifier for the font or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `fontname$` — font to open\n* `size` — desired font size in pixels\n* `table` — optional: table with further options (V4.7)",
    "resultsDocs": "* `id` — optional: identifier of the font; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nOpenFont(1, \"Arial\", 36)\nUseFont(1)\n```\n\nOpens Arial in size 36 and makes it the current font.",
    "platforms": ["All"],
    "insertText": "OpenFont(${1:id}, ${2:fontname$}, ${3:size})"
  },
  {
    "name": "Print",
    "helpId": "Print",
    "shortDescription": "print data to the screen",
    "version": "1.0",
    "synopsis": "Print(var, ...)",
    "functionDocs": "Prints the data specified by `var` to the screen. This function can handle all different data types: You can print strings, numbers, tables, functions. The data is printed at the current cursor position which you can modify by calling [Locate()](https://www.hollywood-mal.com/docs/html/hollywood/Locate_.html).\n\nThis function uses word-wrapping, e.g. when the margin is reached and a word cannot be printed in the same line, it will insert a line break automatically. You can manually set the margins by using the [SetMargins()](https://www.hollywood-mal.com/docs/html/hollywood/SetMargins_.html) function. Starting with Hollywood 9.1, you can also use soft hyphens or zero-width space characters to customize word wrapping but since these are Unicode characters, you need to make sure that you use UTF-8 encoding in that case.\n\nThis function also respects your tabulator settings. If you print a string which contains a tabulator char (\"\\t\"), print will jump to the next tabulator position. You can define the tabulator settings with the [AddTab()](https://www.hollywood-mal.com/docs/html/hollywood/AddTab_.html) and [ResetTabs()](https://www.hollywood-mal.com/docs/html/hollywood/ResetTabs_.html) commands.\n\nYou can also specify escape codes here. See [String data type](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeString_.html).\n\nIf layers are enabled this command will add a new layer of the type `#PRINT` to the layer stack.\n\nStarting with Hollywood 2.0 you can pass as many arguments as you want to this function. If you pass multiple arguments to this function, they will be printed with a space to separate them.\n\nStarting with Hollywood 2.5 you can use [format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html) in the string you pass to `Print()`. Using these tags you can control the font style and color of your text on-the-fly. Format tags always start and end with a square bracket ('['). In case you just want to print a square bracket, you will have to use two square brackets. If there is only one square bracket Hollywood will always expect a format tag. See [Format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html).\n\nBesides `Print()`, you can also use the functions [NPrint()](https://www.hollywood-mal.com/docs/html/hollywood/NPrint_.html) and [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) to draw text to the screen.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the font color set using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html).",
    "inputsDocs": "* `var` — data to print\n* `...` — other arguments (V2.0)",
    "example": "```\nPrint(\"Hello World!\")\n```\n\nPrints \"Hello World!\" to the screen at the current cursor position.",
    "platforms": ["All"],
    "insertText": "Print(${1:var})"
  },
  {
    "name": "ResetTabs",
    "helpId": "ResetTabs",
    "shortDescription": "clear tabulator settings",
    "version": "1.0",
    "synopsis": "ResetTabs()",
    "functionDocs": "This function clears all previous tabulator settings and sets the default (a tabulator is converted to 8 spaces). There is no function to remove a single tabulator, so if you want to do this, you will have to call this function and then add all tabulators with [AddTab()](https://www.hollywood-mal.com/docs/html/hollywood/AddTab_.html) except the one you want to have removed.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ResetTabs()"
  },
  {
    "name": "RotateTextObject",
    "helpId": "RotateTextObject",
    "shortDescription": "rotate a text object",
    "version": "4.0",
    "synopsis": "RotateTextObject(id, angle[, smooth])",
    "functionDocs": "This function rotates the text object specified by `id` by the specified angle (in degrees). A positive angle rotates anti-clockwise, a negative angle rotates clockwise. Optionally, you can choose to enable anti-aliased interpolation by passing `True` in the `smooth` argument.\n\nNote that for vector text objects, `RotateTextObject()` will always operate on the untransformed text object. This means that any previous transformations applied to the text object using `RotateTextObject()`, [TransformTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/TransformTextObject_.html), or [ScaleTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleTextObject_.html) will be undone when calling `RotateTextObject()`.",
    "inputsDocs": "* `id` — identifier of the text object to rotate\n* `angle` — desired rotation angle in degrees\n* `smooth` — optional: whether or not anti-aliased interpolation shall be used (V9.1)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RotateTextObject(${1:id}, ${2:angle})"
  },
  {
    "name": "ScaleTextObject",
    "helpId": "ScaleTextObject",
    "shortDescription": "scale a text object",
    "version": "4.0",
    "synopsis": "ScaleTextObject(id, width, height[, smooth])",
    "functionDocs": "This command scales the text object specified by `id` to the specified dimensions. If the text object uses a vector font it will be scaled without a loss of quality. Optionally, you can choose to enable anti-aliased interpolation by passing `True` in the `smooth` argument.\n\nYou can pass `#KEEPASPRAT` as either `width` or `height`. Hollywood will calculate the size then automatically by taking the aspect-ratio of the text object into account. The `width` and `height` arguments can also be a string containing a percent specification, e.g. \"50%\".\n\nNote that for vector text objects, `ScaleTextObject()` will always operate on the untransformed text object. This means that any previous transformations applied to the text object using `ScaleTextObject()`, [TransformTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/TransformTextObject_.html), or [RotateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/RotateTextObject_.html) will be undone when calling `ScaleTextObject()`.",
    "inputsDocs": "* `id` — identifier of the text object to scale\n* `width` — desired new width for the text object\n* `height` — desired new height for the text object\n* `smooth` — optional: whether or not anti-aliased interpolation shall be used (V9.1)",
    "example": "```\nScaleTextObject(1, 600, 200)\n```\n\nScales text object 1 to a resolution of 600x200.",
    "platforms": ["All"],
    "insertText": "ScaleTextObject(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SetBulletColor",
    "helpId": "SetBulletColor",
    "shortDescription": "set bullet color",
    "version": "9.0",
    "synopsis": "SetBulletColor(color)",
    "functionDocs": "This function sets the color to be used by bullets when using [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) in list mode. By default, bullets appear in the current font color set using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html). If you want them to be drawn in a different color, you can use this function to do so. The `color` argument must be either an [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended text.\n\nSee [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html).",
    "inputsDocs": "* `color` — [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color specification",
    "example": "```\nSetBulletColor(#GRAY)\n```\n\nThis code sets the bullet color to some kind of grey.\n\n---\n\n```\nSetBulletColor(ARGB(128, #RED))\n```\n\nThe above code sets the bullet color to half-red. The background will then shine through the text at a ratio of 50% (128=50% of 255).",
    "platforms": ["All"],
    "insertText": "SetBulletColor(${1:color})"
  },
  {
    "name": "SetDefaultEncoding",
    "helpId": "SetDefaultEncoding",
    "shortDescription": "set default character encoding",
    "version": "4.7",
    "synopsis": "SetDefaultEncoding(tencoding[, sencoding])",
    "functionDocs": "This function can be used to change the default character encoding for the text and string libraries. Note that for reasons of compatibility Hollywood maintains two different default character encodings: one for the text library and one for the string library. Under normal conditions, however, both default encodings should be set the to the same character encoding.\n\nThe default character encoding for the text library is specified in `tencoding` and affects functions such as [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html), [NPrint()](https://www.hollywood-mal.com/docs/html/hollywood/NPrint_.html), [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html), and [CreateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateTextObject_.html).\n\nThe default character encoding for the string library needs to be specified in the `sencoding` parameter and affects most functions of the string library, i.e. functions such as [ReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/ReplaceStr_.html) and [StrLen()](https://www.hollywood-mal.com/docs/html/hollywood/StrLen_.html).\n\nThe following character encodings are currently supported by Hollywood:\n\n- `#ENCODING_UTF8`: Use UTF-8 encoding. This is the default since Hollywood 7.0.\n\n- `#ENCODING_ISO8859_1`: Use ISO 8859-1 encoding. This was the default prior to Hollywood 7.0. Note that for historical reasons specifying `#ENCODING_ISO8859_1` on AmigaOS and compatibles doesn't really mean ISO 8859-1 but whatever is the system's default character encoding. On most Amiga systems, this is ISO 8859-1 anyway, but Eastern European systems use a different encoding for example.\n\nStarting with Hollywood 7.0, `#ENCODING_ISO8859_1` shouldn't be used any longer. It is still supported for compatibility reasons but it can lead to problems on non-ISO-8859-1 systems. You should always use `#ENCODING_UTF8` starting with Hollywood 7.0.",
    "inputsDocs": "* `tencoding` — default character encoding for the text library\n* `sencoding` — default character encoding for the string library (V7.0)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetDefaultEncoding(${1:tencoding})"
  },
  {
    "name": "SetFont",
    "helpId": "SetFont",
    "shortDescription": "change the current font",
    "version": "1.0",
    "synopsis": "SetFont(font$, size[, table])",
    "functionDocs": "This function changes the current font to the one specified by `font$` and `size`. The `size` argument specifies the desired font's height in pixels. The current font is used by commands like the [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) command but also by [CreateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateTextObject_.html). The font specified in `font$` must adhere to the [Hollywood font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html). See [Font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html).\n\nThe font style will be reset when calling this command.\n\nStarting with Hollywood 4.7, there is an optional table argument which allows you to configure the following advanced options:\n\n- `Engine`: This tag specifies which font engine Hollywood should use for this font. This can be either `#FONTENGINE_NATIVE` (uses the native font engine of the host OS) or `#FONTENGINE_INBUILT` (uses the font engine built into Hollywood). If you are using TrueType fonts in your project and want your texts to look exactly the same on every platform, you must make sure that you use the `#FONTENGINE_INBUILT` engine because otherwise the text look will be different from platform to platform. Another advantage of the `#FONTENGINE_INBUILT` engine is that you can directly specify a `*.ttf` file as `font$` without the need of installing the font first on the local system. See [Font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html). For compatibility reasons, this tag defaults to `#FONTENGINE_NATIVE`. Note that the `Engine` tag is deprecated since Hollywood 10.0. You should use the `Loader` tag instead now (see below). Passing `native` in the `Loader` tag does the same as setting `Engine` to `#FONTENGINE_NATIVE` and passing `inbuilt` in the `Loader` tag corresponds to the `#FONTENGINE_INBUILT` engine. (V4.7)\n\n- `Cache`: Specifies whether or not glyph caching should be employed. Glyph caching can radically increase performance, especially on slower systems like OS3, but of course it needs more memory. Glyph caching is currently only supported by the inbuilt font engine (i.e. `#FONTENGINE_INBUILT`). To disable glyph caching, set this tag to `False`. Defaults to `True`. (V4.7)\n\n- `UsePoints`: Set this tag to `True` if you wish to pass a point size instead of a pixel size in the `size` argument. If you set this tag to `True`, `SetFont()` will interpret the value passed in `size` as a value in points (pt) instead of pixels. Generally, it is not recommended to use this tag because point sizes always depend on the host display's dots-per-inch (DPI), but all your other graphics are typically pixel graphics which are independent of the host system's DPI settings. Thus, when integrating fonts opened using a point height with pixel graphics, those fonts can appear larger or smaller, depending on the host display's DPI settings, and mess up your design. That is why it is generally not recommended to specify the font height in points instead of pixels. Defaults to `False`. (V7.0)\n\n- `CharMap`: When `Engine` has been set to `#FONTENGINE_INBUILT`, the `CharMap` tag allows you to specify the char map that the font should use. Normally, it's not necessary to set this but some fonts (e.g. Wingdings, Webdings) use custom char maps that can't be consistently mapped to Unicode. In that case, explicitly telling the font engine which char map to use can be useful. `CharMap` can be set to the following char maps:\n\n  ```\n  #CHARMAP_DEFAULT\n  #CHARMAP_MSSYMBOL\n  #CHARMAP_UNICODE\n  #CHARMAP_SJIS\n  #CHARMAP_BIG5\n  #CHARMAP_WANSUNG\n  #CHARMAP_JOHAB\n  #CHARMAP_ADOBESTANDARD\n  #CHARMAP_ADOBEEXPERT\n  #CHARMAP_ADOBECUSTOM\n  #CHARMAP_ADOBELATIN1\n  #CHARMAP_OLDLATIN2\n  #CHARMAP_APPLEROMAN\n  ```\n\n  The default is `#CHARMAP_DEFAULT`. To find out the char maps supported by a font, use the [GetCharMaps()](https://www.hollywood-mal.com/docs/html/hollywood/GetCharMaps_.html) command. (V9.0)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this font. This must be set to a string containing the name(s) of one or more loader(s). Set this to `native` if you want Hollywood to use the native font engine of the host OS for the font. You can also set `Loader` to `inbuilt` to use the font engine built into Hollywood. If you are using TrueType fonts in your project and want your texts to look exactly the same on every platform, you must make sure that you pass `inbuilt` here because otherwise the text look will be different from platform to platform. Another advantage of the inbuilt font loader is that you can directly specify a `*.ttf` file as `font$` without the need of installing the font first on the local system. See [Font specification](https://www.hollywood-mal.com/docs/html/hollywood/FontSpecification_.html). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). Keep in mind that if no other default loader has been set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html), this will default to `native` for compatibility reasons. See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to font loaders. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nHollywood also comes with several inbuilt fonts which you can use. You can open these using the following special constants:\n\n- `#SANS`: Opens an inbuilt TrueType font without serifs.\n\n- `#SERIF`: Opens an inbuilt TrueType font with serifs.\n\n- `#MONOSPACE`: Opens an inbuilt TrueType monospace font (all characters share the same width).\n\n- `#BITMAP_DEFAULT`: Opens the default inbuilt bitmap font. This font is currently only available in size 8, i.e. like the Amiga's default topaz font.\n\n- `#TRUETYPE_DEFAULT`: Opens the default inbuilt TrueType font. This is currently the same as `#SANS`.\n\nUsing inbuilt fonts is helpful if you want to make sure your script works on other systems without having to install some fonts first. If you use inbuilt Hollywood fonts only your script will work immediately out of the box. Note that when you use one of the inbuilt fonts, Hollywood will automatically choose the inbuilt font engine to ensure that the font look is exactly the same on every system.\n\nSee [Working with fonts](https://www.hollywood-mal.com/docs/html/hollywood/PrgG2KFonts_.html).",
    "inputsDocs": "* `font$` — name of the font to load (or one of the special default constants)\n* `size` — desired y size of the font in pixels\n* `table` — optional: table with further options (see above) (V4.7)",
    "example": "```\nSetFont(\"times\",18)\nPrint(\"Hello World\")\n```\n\nThis code sets the font to \"times\" with size 18 and prints \"Hello World\".",
    "platforms": ["All"],
    "insertText": "SetFont(${1:font$}, ${2:size})"
  },
  {
    "name": "SetFontColor",
    "helpId": "SetFontColor",
    "shortDescription": "change the color of the current font",
    "version": "1.0",
    "synopsis": "SetFontColor(color)",
    "functionDocs": "This function changes the color of the current font to the one specified by `color` which must be an [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).\n\nNew in Hollywood 2.5: Color can also be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) for alpha-blended text.\n\nNote that starting with Hollywood 9.0, the color you pass to this function will also be set as the current bullet color. If you would like to use a different color, call the [SetBulletColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletColor_.html) function.",
    "inputsDocs": "* `color` — [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or [ARGB](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) color specification",
    "example": "```\nSetFontColor(#GRAY)\n```\n\nThis code sets the font color to some kind of grey.\n\n---\n\n```\nSetFontColor(ARGB(128, #RED))\n```\n\nThe above code sets the font color to half-red. The background will then shine through the text at a ratio of 50% (128=50% of 255).",
    "platforms": ["All"],
    "insertText": "SetFontColor(${1:color})"
  },
  {
    "name": "SetFontStyle",
    "helpId": "SetFontStyle",
    "shortDescription": "change the style of the current font",
    "version": "1.0",
    "synopsis": "SetFontStyle(style[, t])",
    "functionDocs": "This function changes the current font's style to the one specified by `style` which must be any combination of the following text styles:\n\n- `#NORMAL`: Reset the font style to normal. This cannot be combined with any other style flags.\n\n- `#BOLD`: Set the font style to bold.\n\n- `#ITALIC`: Set the font style to italic.\n\n- `#UNDERLINED`: Set the font style to underlined.\n\n- `#ANTIALIAS`: Set the font style to anti-alias; please note that anti-aliasing is only available for true type fonts (V2.0)\n\n- `#SHADOW`: Add a shadow effect to the text. If you set this style, you can pass additional arguments in the optional table argument to control the appearance of the shadow effect. See below for details. (V2.5)\n\n- `#BORDER`: Add a border effect to the text. If you set this style, you can pass additional arguments in the optional table argument to control the appearance of the border effect. See below for details. (V2.5)\n\nTo combine multiple font styles in a single call simply bit-or them with another, e.g. a call to `SetFontStyle(#BOLD|#ITALIC)` will set the font style to bold and italic. Obviously, the style `#NORMAL` is mutually exclusive and cannot be combined with any other style.\n\nStarting with Hollywood 9.0, `SetFontStyle()` uses a new syntax that accepts an optional table argument that supports the following tags:\n\n- `ShadowDir`: Specifies the direction of the shadow. This must be set to one of Hollywood's [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html). This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `ShadowColor`: Specifies the color of the shadow. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `ShadowSize`: Specifies the length of the shadow. This tag is only handled when the `#SHADOW` style has been set (see above). (V9.0)\n\n- `BorderColor`: Specifies the color of the border. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the `#BORDER` style has been set (see above). (V9.0)\n\n- `BorderSize`: Specifies the size of the border. This tag is only handled when the `#BORDER` style has been set (see above). (V9.0)\n\nPlease note that TrueType fonts often have separate font faces for their respective styles. In that case, you should always use these specifically designed font faces because `SetFontStyle()` will create bold and italic styles using a custom algorithm that often does not look as good as hand-crafted bold or italic font faces do. Thus, if you are planning to use Arial in bold style, you should better use \"Arial Bold\" when calling [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) (or [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) / [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html)) than using \"Arial\" and calling `SetFontStyle()` with `#BOLD` set afterwards.",
    "inputsDocs": "* `style` — special style constant (see list above)\n* `t` — optional: table containing additional arguments (see above) (V9.0)",
    "example": "```\nSetFontStyle(#BOLD|#ITALIC)\n```\n\nThe above code sets the font style to bold and italic.\n\n---\n\n```\nSetFontStyle(#SHADOW, {ShadowColor = ARGB(128, $939393),\n    ShadowSize = 16, ShadowDir = #SHDWSOUTHEAST})\n```\n\nThe above code enables a half-transparent grey shadow which will be positioned 16 pixels to the south-east of the main text.",
    "platforms": ["All"],
    "insertText": "SetFontStyle(${1:style})"
  },
  {
    "name": "SetMargins",
    "helpId": "SetMargins",
    "shortDescription": "define the margins for printed text",
    "version": "1.0",
    "synopsis": "SetMargins(left, right[, noclip])",
    "functionDocs": "This function allows you to define the margins that shall be used for printing text using the [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) function. This is very useful if you only want to print text in a specific area of your display. The `left` argument specifies the left end of the margin and the `right` argument is the right end of the margin. Words exceeding those margins will automatically be wrapped to the next line.\n\nThe default setting for `left` is 0 and for `right` the default setting is your display width minus 1.\n\nBy default, the margins you specify in `left` and `right` will be clipped against the display's boundaries. If you don't want that, you can set the optional `noclip` argument to `True`. If `noclip` is `True`, `left` can also be less than 0 and `right` can be greater than the display width.",
    "inputsDocs": "* `left` — left edge of the margin (in pixels)\n* `right` — right edge of the margin (in pixels)\n* `noclip` — optional: set this to `True` if left and right edges of the margin shouldn't be clipped to the display's boundaries (V9.0)",
    "example": "```\nSetMargins(200, 300)\nPrint(\"Hello World. This is my first program using margins.\")\n```\n\nThe above code defines the margins 200 and 300, which means that text output will only be made between pixels 200 and 300. Then it prints some text.",
    "platforms": ["All"],
    "insertText": "SetMargins(${1:left}, ${2:right})"
  },
  {
    "name": "TransformTextObject",
    "helpId": "TransformTextObject",
    "shortDescription": "apply affine transformation to text object",
    "version": "10.0",
    "synopsis": "TransformTextObject(id, sx, rx, ry, sy[, smooth])",
    "functionDocs": "This function can be used to apply affine transformation to a text object. You have to pass a 2x2 transformation matrix to this function that will define how each pixel in the text object will be transformed. This function is useful if you want to apply rotation and scaling at the same time. Of course, you could do this with calls to [ScaleTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleTextObject_.html) and then [RotateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/RotateTextObject_.html), but this would lead to quality losses. If you do the transformation using `TransformTextObject()` instead, everything will be done in a single run.\n\nThe 2x2 transformation matrix consists of four floating point factors:\n\n- `sx`: Specifies the amount of scaling on the x axis. This must not be zero. If it is negative, the text object is flipped on the y axis.\n\n- `rx`: Specifies the amount of rotation on the x axis. This can be 0.\n\n- `ry`: Specifies the amount of rotation on the y axis. This can be 0.\n\n- `sy`: Specifies the amount of scaling on the y axis. This must not be zero. If it is negative, the text object is flipped on the x axis.\n\nThe identity matrix is defined as\n\n```\n( 1  0 )\n( 0  1 )\n```\n\nIf you pass this matrix, then no transformation will be applied because there is no rotation and no scaling defined. I.e. if Hollywood applied this matrix to every pixel in your text object, the result would be just a copy of the text object. But of course, if `TransformTextObject()` detects that you passed an identity matrix, it will return immediately and do nothing.\n\nThe optional argument `smooth` can be set to `True` if Hollywood shall use interpolation during the transformation. This yields results that look better but interpolation is quite slow.\n\nPlease note: You should always do transformation operations using the original text object. For instance, if you transform text object 1 to 12x8 pixels and then transform it back to 640x480, you will get a messed text object. Therefore you should always keep the original text object and transform only copies of it.\n\nNote that for vector text objects, `TransformTextObject()` will always operate on the untransformed text object. This means that any previous transformations applied to the text object using `TransformTextObject()`, [ScaleTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleTextObject_.html), or [RotateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/RotateTextObject_.html) will be undone when calling `TransformTextObject()`.",
    "inputsDocs": "* `id` — identifier of the text object to be transformed\n* `sx` — scale x factor; must never be 0\n* `rx` — rotate x factor\n* `ry` — rotate y factor\n* `sy` — scale y factor; must never be 0\n* `smooth` — optional: whether or not affine transformation should use interpolation",
    "example": "```\nangle = Rad(45)    ; convert degrees to radians\nTransformTextObject(1, Cos(angle), Sin(angle), -Sin(angle), Cos(angle))\n```\n\nThe code above rotates text object number 1 by 45 degrees using a 2x2 transformation matrix.",
    "platforms": ["All"],
    "insertText": "TransformTextObject(${1:id}, ${2:sx}, ${3:rx}, ${4:ry}, ${5:sy})"
  },
  {
    "name": "TextExtent",
    "helpId": "TextExtent",
    "shortDescription": "retrieve detailed information about a text extent",
    "version": "2.5",
    "synopsis": "extent = TextExtent(string$[, t])",
    "functionDocs": "This function returns detailed information about the extent of the specified string with the current font and style settings. Contrary to [TextWidth()](https://www.hollywood-mal.com/docs/html/hollywood/TextWidth_.html) which only returns the cursor advancement `TextExtent()` calculates the exact bounding box for the specified string.\n\nThis function returns a table with information in the following fields:\n\n- `MinX`: The offset to the left side of the rectangle. This is often negative.\n\n- `MinY`: The offset from the baseline to the top of the rectangle. This is always negative.\n\n- `MaxX`: The offset to the right side of the rectangle.\n\n- `MaxY`: The offset from the baseline to the bottom of the rectangle.\n\n- `Width`: This is the same value as returned by [TextWidth()](https://www.hollywood-mal.com/docs/html/hollywood/TextWidth_.html).\n\n- `Height`: The same value as returned by [TextHeight()](https://www.hollywood-mal.com/docs/html/hollywood/TextHeight_.html).\n\nThe values in `MinX`, `MinY`, `MaxX`, and `MaxY` are always relative to the current cursor position. For instance, if `MinX` is -10, this means that [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) would start rendering this string -10 pixels from the current cursor position on the x-axis. The value in `Width` specifies where the cursor would end up after the rendering operation. This is often less than `MaxX-1`. For instance in the case of italic text, the last character will usually be much behind the final cursor position.\n\nTo calculate the full width of the specified string, simply subtract `MinX` from `MaxX` and add 1, i.e. `full_width=MaxX-MinX+1`.\n\nStarting with Hollywood 10.0, this function accepts an optional table argument that allows you to specify the following additional options:\n\n- `Encoding`: This tag can be used to specify the character encoding used by `string$`. This defaults to the character encoding set as the text library default encoding using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `Charspacing`: Allows you to adjust the space between characters. You can set this to a positive or negative value. A positive value will increase the space between characters, a negative value will decrease it. (V10.0)",
    "inputsDocs": "* `string$` — source text\n* `t` — optional: table argument containing further options (see above) (V10.0)",
    "resultsDocs": "* `extent` — detailed information about the text's dimensions",
    "platforms": ["All"],
    "insertText": "TextExtent(${1:string$})"
  },
  {
    "name": "TextHeight",
    "helpId": "TextHeight",
    "shortDescription": "return the height of a string",
    "version": "1.5",
    "synopsis": "height = TextHeight(string$)",
    "functionDocs": "This function returns the height of the text specified by `string$` if it was rendered on the display. So it takes care of the currently selected font as well as the font style.",
    "inputsDocs": "* `string$` — source text",
    "resultsDocs": "* `height` — height of the text",
    "example": "```\nheight = TextHeight(\"Hello World\")\npos = (480 - height) / 2\nLocate(0, pos)\nPrint(\"Hello World\")\n```\n\nThe above code centers the text \"Hello World\" vertically on a 480 pixel-high display.",
    "platforms": ["All"],
    "insertText": "TextHeight(${1:string$})"
  },
  {
    "name": "TextOut",
    "helpId": "TextOut",
    "shortDescription": "draw text to screen",
    "version": "1.0",
    "synopsis": "TextOut(x, y, text$[, table])",
    "functionDocs": "This function outputs the text specified by `text$` at the position specified by coordinates `x` and `y`. This function has the advantage that you can use Hollywood's special constants as the coordinates (e.g. `#CENTER`, `#BOTTOM`...) which is not possible with [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) because the [Locate()](https://www.hollywood-mal.com/docs/html/hollywood/Locate_.html) function does not handle them.\n\nIf layers are enabled, this command will add a new layer of the type `#TEXTOUT` to the layer stack.\n\nStarting with Hollywood 2.5, you can use [format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html) in the string you pass to `TextOut()`. Using these tags you can control the font style and color of your text on-the-fly. Format tags always start and end with a square bracket ('['). In case you just want to print a square bracket, you will have to use two square brackets. If there is only one square bracket Hollywood will always expect a format tag. See [Format tags](https://www.hollywood-mal.com/docs/html/hollywood/PrgFormatTags_.html).\n\nIn Hollywood 4.0 the syntax of this function changed slightly. While the old syntax is still supported for compatibility, new scripts should use the new syntax which accepts a table as argument 4. The table can contain the following elements:\n\n- `Align`: Allows you to specify the text's alignment. The following alignments are currently supported:\n\n  - `#LEFT` Left alignment.\n\n  - `#RIGHT` Right alignment.\n\n  - `#CENTER` Center lines.\n\n  - `#JUSTIFIED` Lay out text in justified lines. (V7.0)\n\n  The default value for `Align` is `#LEFT`.\n\n- `WordWrap`: `TextOut()` can do automatic word-wrapping for you if you specify this additional parameter. You can use this parameter to specify a maximum width for your text. `TextOut()` will then use word wrapping to make sure that no text runs beyond this limit. If you do not set this argument or set it to 0 (which is also the default), the text will be as wide as it is required. Starting with Hollywood 9.1, you can also use soft hyphens or zero-width space characters to customize word wrapping but since these are Unicode characters, you need to make sure that you use UTF-8 encoding in that case.\n\n- `Encoding`: This argument can be used to specify the character encoding inside `text$`. This defaults to the text library default encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html)). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V4.7)\n\n- `Color`: This tag allows you to specify the text color. The color must be provided as an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html). If you do not specify this tag, `TextOut()` will use the color value that was set using the [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) command instead. (V5.0)\n\n- `Pen`: When palette mode is `#PALETTEMODE_PEN`, this tag can be used to set the pen that should be used for drawing the text. If palette mode is `#PALETTEMODE_PEN` and `Pen` is not specified, the pen set using [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) will be used instead. (V9.0)\n\n- `Linespacing`: This tag allows you to adjust the space between lines. You can set this to a positive or negative value. A positive value will increase the space between lines, a negative value will decrease it. (V9.0)\n\n- `Charspacing`: Allows you to adjust the space between characters. You can set this to a positive or negative value. A positive value will increase the space between characters, a negative value will decrease it. (V10.0)\n\n- `Tabs`: If you want to use tabs, you need to set this tag to a table containing the desired tab stops. Tab stops must be passed as pixel values relative to the x-position passed to `TextOut()`. If the string you pass to `TextOut()` contains tabs and you don't set this tag, all tabs will be converted to spaces. (V9.0)\n\n- `ListMode`: Set this tag to `True` to put `TextOut()` into list mode. List mode allows you to create ordered and unordered lists with `TextOut()`. When in list mode, you need to use tabs in the string you pass to `TextOut()` to signal the desired level of indentation. By default, all list items will use the bullet specified in `DefListBullet`. It is also possible to tell `TextOut()` to use custom bullets by setting the `ListBullet` tag. The same is true for the list's indentation, offset and spacing where the default values can be set using `DefListIndent`, `DefListOffset` and `DefListSpacing` and custom values can be set using `ListIndent`, `ListOffset` and `ListSpacing`. Please see below for more details on all these options. Also note that `ListMode` and `Tabs` are mutually exclusive. You cannot use both at the same time. (V9.0)\n\n- `DefListBullet`: Use this tag to set the default bullet to use when `TextOut()` is in list mode. This can be set to a Unicode character (passed as its numeric codepoint, not as a string!) or one of the following constants:\n\n  - `#BULLET_DASH`: Dash bullet. This is the default.\n\n  - `#BULLET_CROSS`: Cross bullet.\n\n  - `#BULLET_CIRCLE`: Circle bullet.\n\n  - `#BULLET_HOLLOWCIRCLE`: Hollow circle bullet. (V9.1)\n\n  - `#BULLET_BOX`: Box bullet.\n\n  - `#BULLET_CHECKMARK`: Checkmark bullet.\n\n  - `#BULLET_ARROW`: Arrow bullet.\n\n  - `#BULLET_DIAMOND`: Diamond bullet.\n\n  - `#BULLET_NUMERIC`: Numbered list: 1. 2. 3...\n\n  - `#BULLET_NUMERICSINGLE`: Numbered list: 1) 2) 3)...\n\n  - `#BULLET_NUMERICDOUBLE`: Numbered list: (1) (2) (3)...\n\n  - `#BULLET_LALPHA`: Numbered list: a. b. c...\n\n  - `#BULLET_LALPHASINGLE`: Numbered list: a) b) c)...\n\n  - `#BULLET_LALPHADOUBLE`: Numbered list: (a) (b) (c)...\n\n  - `#BULLET_UALPHA`: Numbered list: A. B. C...\n\n  - `#BULLET_UALPHASINGLE`: Numbered list: A) B) C)...\n\n  - `#BULLET_UALPHADOUBLE`: Numbered list: (A) (B) (C)...\n\n  - `#BULLET_LROMAN`: Numbered list: i. ii. iii...\n\n  - `#BULLET_LROMANSINGLE`: Numbered list: i) ii) iii)...\n\n  - `#BULLET_LROMANDOUBLE`: Numbered list: (i) (ii) (iii)...\n\n  - `#BULLET_UROMAN`: Numbered list: I. II. III...\n\n  - `#BULLET_UROMANSINGLE`: Numbered list: I) II) III)...\n\n  - `#BULLET_UROMANDOUBLE`: Numbered list: (I) (II) (III)...\n\n  - `#BULLET_NONE`: No bullet.\n\n  If you need to use different types of bullets in your list, you need to use the `ListBullet` tag instead. See below for more information.\n\n  Also note that the starting offset of numbered bullet types like `#BULLET_NUMERIC`, `#BULLET_LALPHA`, etc. can be set using the `DefListOffset` and `ListOffset` tags. See below for more information.\n\n  By default, bullets will use the color set using [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html). To set a different color, use the [SetBulletColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletColor_.html) function. See [SetBulletColor](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletColor_.html). (V9.0)\n\n- `ListBullet`: If you want to use different types of bullets in your list, you have to set this tag to a table that contains the individual bullets your list should use. `TextOut()` will then extract a new bullet type from your table for each new list it starts. Like `DefListBullet`, the individual items in the table you pass to `ListItems` can be either numeric Unicode codepoints or predefined `#BULLET_XXX` constants as described above. If there are more lists than table elements in `ListBullet`, the bullet specified in `DefListBullet` will be used. (V9.0)\n\n- `DefListIndent`: This tag can be used to specify the number of spaces to use for indenting list items. The default indent is 4 which means that by default, list items will be indented using 4 spaces. You can also specify custom levels of indentation for specific lists. This can be done by using the `ListIndent` tag, see below for more details. (V9.0)\n\n- `ListIndent`: If you want to use different levels of indentation in your list, you have to set this tag to a table that contains the individual indentations your list should use. `TextOut()` will then extract a new indentation value from your table for each new list it starts. If there are more lists than table elements in `ListIndent`, the default indentation specified in `DefListIndent` will be used. (V9.0)\n\n- `DefListOffset`: When using a numbered bullet type like `#BULLET_NUMERIC` or `#BULLET_LALPHA`, you can use this tag to specify a starting offset for the numbering. Note that offsets are counted from 0. Thus, specifying an offset of 0 here, will start numbering from 1 for `#BULLET_NUMERIC` and from \"a\" for `#BULLET_ALPHA`. This tag defaults to 0. You can also specify custom offset levels for specific lists. This can be done by using the `ListOffset` tag, see below for more details. (V9.0)\n\n- `ListOffset`: If you want to use different offset levels in your list, you have to set this tag to a table that contains the individual offsets your list should use. `TextOut()` will then extract a new list offset value from your table for each new list it starts. If there are more lists than table elements in `ListOffset`, the default list offset specified in `DefListOffset` will be used. (V9.0)\n\n- `DefListSpacing`: This tag can be used to specify the default spacing to be used between the items in the individual lists. This defaults to 0. You can also specify custom spacing values for specific lists. This can be done by using the `ListSpacing` tag, see below for more details. (V9.1)\n\n- `ListSpacing`: If you want to use different levels of line spacings for your lists, you have to set this tag to a table that contains the individual spacing values your lists should use. `TextOut()` will then extract a new spacing value from your table for each new list it starts. If there are more lists than table elements in `ListSpacing`, the default spacing value specified in `DefListSpacing` will be used. (V9.1)\n\n- `FrameMode`: When using `TextOut()` in list mode and layers are enabled, the resulting layer of type `#TEXTOUT` will have multiple frames that you can cycle through using [NextFrame()](https://www.hollywood-mal.com/docs/html/hollywood/NextFrame_.html) or all other layer functions that support anim layers. This makes it possible to cycle through the list items one by one or show one item after the other. The first frame will always contain all list items. The content of the other frames will depend on what was specified in the `FrameMode` tag. This tag can be set to the following constants:\n\n  - `#FRAMEMODE_SINGLE`: When using this frame mode, only a single list item will be visible per frame, i.e. frame 2 will just contain the first list item, frame 3 will just contain the second list item and so on.\n\n  - `#FRAMEMODE_FULL`: When using this frame mode, all previous list items will always be visible as well. This means that frame 3 will contain the first and the second list item, frame 4 will contain the first three list items and so on.\n\n  If not specified, `FrameMode` defaults to `#FRAMEMODE_FULL`. Note that you can use the `Frame` tag (see below) to specify which frame should be initially visible. (V9.0)\n\n- `Frame`: When using `TextOut()` in list mode and layers are enabled, the resulting layer of type `#TEXTOUT` will have multiple frames that you can cycle through using [NextFrame()](https://www.hollywood-mal.com/docs/html/hollywood/NextFrame_.html) or all other layer functions that support anim layers. This makes it possible to cycle through the list items one by one or show one item after the other. The first frame will always contain all list items. The content of the other frames will depend on what was specified in the `FrameMode` tag (see above). The `Frame` tag can be used to specify the frame that should be initially visible. Frames are counted from 1. (V9.0)\n\n- `SimpleList`: If this is set to `True`, `TextOut()` won't successively extract the list bullet configuration from the `ListBullet` et al. tables but just statically use the item at the specified tab index, i.e. tab position 1 will always use the bullet specified at index 1 in the `ListBullet` table, tab position 2 will use the bullet specified at index 2 in the `ListBullet` table and so on. This will restrict your flexibility but can make things easier if you always want to have the same configuration for each tab position. (V9.1)\n\nFurthermore, the optional table argument can also contain one or more of the [standard tags for all drawing commands](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard draw tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nNote that Hollywood currently only supports standard left-to-right based text aligned on horizontal lines. Right to left and vertical text is currently not supported.\n\nNote that when drawing to a palette-based target and the palette mode is set to `#PALETTEMODE_PEN`, this function will draw using the pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) instead of the color set via [SetFontColor()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontColor_.html) or the `Color` tag above.",
    "inputsDocs": "* `x` — x position for the text\n* `y` — y position for the text\n* `text$` — string to output\n* `table` — optional: table containing additional configuration parameters (see above) (V4.0)",
    "example": "```\nTextOut(#CENTER, #CENTER, \"Hello World!\")\n```\n\nThe above code prints \"Hello World!\" in the center of your display.\n\n---\n\n```\nFor Local k = 100 To 600 Step 100 Do\n   Line(k, 0, k, 480, #RED)\nTextOut(0, 0, \"One\\tTwo\\tThree\\tFour\\tFive\\tSix\",\n   {Tabs = {100, 200, 300, 400, 500}})\n```\n\nThis code shows how to use tabs with `TextOut()`.\n\n---\n\n```\nSetFont(#SANS, 18)\nTextOut(0, 0, \"Pizzas\\n\"..\n    \"\\tProsciutto\\n\"..\n    \"\\tFunghi\\n\"..\n    \"\\tMargarita\\n\"..\n    \"Drinks\\n\"..\n    \"\\tAlcoholic\\n\"..\n    \"\\t\\tBeer\\n\"..\n    \"\\t\\tWine\\n\"..\n    \"\\tNon-alcoholic\\n\"..\n    \"\\t\\tCoke\\n\"..\n    \"\\t\\tWater\",\n    {ListMode = True,\n    DefListBullet = #BULLET_CIRCLE,\n    ListBullet = {#BULLET_DASH}})\n```\n\nThe code above shows how to create a list with `TextOut()`.",
    "platforms": ["All"],
    "insertText": "TextOut(${1:x}, ${2:y}, ${3:text$})"
  },
  {
    "name": "TextWidth",
    "helpId": "TextWidth",
    "shortDescription": "return the width of a string",
    "version": "1.0",
    "synopsis": "width = TextWidth(string$[, t])",
    "functionDocs": "This function returns the width of the text specified by `string$` if it was rendered on the display. So it takes care of the currently selected font as well as the font style.\n\nPlease note: This function returns the cursor advancement of the text. This is often less than the text actually occupies when rendered to the display. If you need detailed information about the real extent of a text, please use the function [TextExtent()](https://www.hollywood-mal.com/docs/html/hollywood/TextExtent_.html) instead.\n\nStarting with Hollywood 10.0, this function accepts an optional table argument that allows you to specify the following additional options:\n\n- `Encoding`: This tag can be used to specify the character encoding used by `string$`. This defaults to the character encoding set as the text library default encoding using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `Charspacing`: Allows you to adjust the space between characters. You can set this to a positive or negative value. A positive value will increase the space between characters, a negative value will decrease it. (V10.0)",
    "inputsDocs": "* `string$` — source text\n* `t` — optional: table argument containing further options (see above) (V10.0)",
    "resultsDocs": "* `width` — width of the text",
    "example": "```\nwidth = TextWidth(\"Hello World\")\npos = (640 - width) / 2\nLocate(pos, 0)\nPrint(\"Hello World\")\n```\n\nThe above code centers the text \"Hello World\" horizontally on a 640 pixel-wide display.",
    "platforms": ["All"],
    "insertText": "TextWidth(${1:string$})"
  },
  {
    "name": "UseFont",
    "helpId": "UseFont",
    "shortDescription": "change the current font",
    "version": "4.5",
    "synopsis": "UseFont(id)",
    "functionDocs": "This function changes the current font to the font specified by `id`. The font id specified here must have been preloaded by either [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html) or [@FONT](https://www.hollywood-mal.com/docs/html/hollywood/atFONT_.html).\n\nThe font style will be reset when calling this command.",
    "inputsDocs": "* `id` — identifier of the font to use",
    "example": "See [OpenFont](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html)",
    "platforms": ["All"],
    "insertText": "UseFont(${1:id})"
  }
]
