[
  {
    "name": "ArcDistortBrush",
    "helpId": "ArcDistortBrush",
    "shortDescription": "apply arc distortion to brush",
    "version": "5.0",
    "synopsis": "ArcDistortBrush(id, angle1[, angle2, rtop, rbottom, smooth])",
    "functionDocs": "This command can be used to apply arc distortion to the brush specified in `id`. The `angle1` argument specifies the angle over which the brush should be arc'ed. The optional arguments can be used to control further parameters for the arc distortion. `angle2` can be used to rotate the brush around the circle, and the `rtop` and `rbottom` values can be used to adjust the top and bottom radii settings. Finally, the optional argument `smooth` can be used to enable antialiased pixel interpolation which leads to a smoother appearance but takes longer to calculate.",
    "inputsDocs": "* `id` — brush that shall be distorted\n* `angle1` — angle over which to bend the brush\n* `angle2` — optional: angle for rotating the brush around the circle (defaults to 0)\n* `rtop` — optional: top edge of brush will be set to this radius (defaults to an automatically calculated value that tries to keep the aspect-ratio as good as possible)\n* `rbottom` — optional: bottom edge of brush will be set to this radius (defaults to an automatically calculated value that tries to keep the aspect-ratio as good as possible)\n* `smooth` — optional: whether or not anti-aliased distortion shall be used (defaults to `False`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ArcDistortBrush(${1:id}, ${2:angle1})"
  },
  {
    "name": "BarrelDistortBrush",
    "helpId": "BarrelDistortBrush",
    "shortDescription": "apply barrel distortion to brush",
    "version": "5.0",
    "synopsis": "BarrelDistortBrush(id, ...)  \nBarrelDistortBrush(id, A, B, C, D[, X, Y])  \nBarrelDistortBrush(id, Ax, Bx, Cx, Dx, Ay, By, Cy, Dy[, X, Y])",
    "functionDocs": "This command can be used to apply barrel distortion to the brush specified in `id`. You can use this function in two different ways: The first way requires you to pass at least three coefficients (`A`, `B`, `C`) that define the barrel distortion. Optionally, you can specify a fourth coefficient (`D`) and a center point for the radial distortion (`X` and `Y`). The center point has to passed in pixels whereas the coefficients must be specified as floating point values. If all coefficients add up to 1.0, there will be no change in the picture.\n\nThe second way of using this function is to provide separate coefficients for the x and y axis. In that case, you have to pass 8 coefficients (4 for every axis). As in the first variant, you can optionally specify a center point.\n\nFinally, the optional argument `smooth` can be used to enable antialiased pixel interpolation which leads to a smoother appearance but takes longer to calculate.",
    "inputsDocs": "* `id` — brush that shall be distorted\n* `...` — coefficients for the barrel distortion (see above)\n* `X` — optional: x coordinate of center point (defaults to half of brush width)\n* `Y` — optional: y coordinate of center point (defaults to half of brush height)\n* `smooth` — optional: whether or not anti-aliased distortion shall be used (defaults to `False`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "BarrelDistortBrush(${1:id})"
  },
  {
    "name": "BGPicToBrush",
    "helpId": "BGPicToBrush",
    "shortDescription": "convert a background picture to a brush",
    "version": "1.0",
    "synopsis": "BGPicToBrush(bgpicid, brushid)",
    "functionDocs": "This function makes a copy of the background picture specified by `bgpicid` and converts it to a brush that will be accessible with the number `brushid` then. Everything will be cloned so the brush is independent of background picture (you could free it after this operation for example and the brush would still be usable!).",
    "inputsDocs": "* `bgpicid` — background picture to clone\n* `brushid` — id for the new brush",
    "example": "```\nBGPicToBrush(1,5)\nDisplayBrush(5,#CENTER,#CENTER)\n```\n\nThe above code copies the background picture 1 to brush 5 and displays this brush then.",
    "platforms": ["All"],
    "insertText": "BGPicToBrush(${1:bgpicid}, ${2:brushid})"
  },
  {
    "name": "BlurBrush",
    "helpId": "BlurBrush",
    "shortDescription": "apply Gaussian blur to brush",
    "version": "5.0",
    "synopsis": "BlurBrush(id[, radius])",
    "functionDocs": "This command applies a Gaussian blur to the specified brush. The optional argument `radius` can be used to specify the blur radius. The larger the radius you specify here, the longer this function needs to apply the blur effect. If you do not specify the optional argument, `BlurBrush()` will automatically choose a blur radius.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to blur\n* `radius` — optional: blur radius (defaults to 0 which means that the radius will be chosen automatically)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "BlurBrush(${1:id})"
  },
  {
    "name": "BrushToGray",
    "helpId": "BrushToGray",
    "shortDescription": "convert brush to gray",
    "version": "1.5",
    "synopsis": "BrushToGray(id)",
    "functionDocs": "This function converts the brush specified by `id` to gray. If the brush is big, this can take some time.\n\nNote that if `id` specifies a palette brush, `BrushToGray()` will just convert the palette colors to gray which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — identifier of the brush to convert",
    "example": "```\nBrushToGray(1)\n```\n\nConvert brush 1 to gray.",
    "platforms": ["All"],
    "insertText": "BrushToGray(${1:id})"
  },
  {
    "name": "BrushToMonochrome",
    "helpId": "BrushToMonochrome",
    "shortDescription": "convert brush to black and white",
    "version": "5.0",
    "synopsis": "BrushToMonochrome(id[, dither])",
    "functionDocs": "This command can be used to map a brush to black and white colors. If the optional argument `dither` is set to `True`, dithering will be applied. Dithering is slower but generates better looking images.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to convert to black & white\n* `dither` — optional: whether or not dithering shall be used (defaults to `True`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "BrushToMonochrome(${1:id})"
  },
  {
    "name": "BrushToPenArray",
    "helpId": "BrushToPenArray",
    "shortDescription": "convert palette brush to pen array",
    "version": "9.0",
    "synopsis": "table = BrushToPenArray(id)",
    "functionDocs": "This command copies all pens from the specified palette brush to a table and returns that table to you. The table can be seen as a matrix containing a number of rows that is identical to the brush's height where each row has a number of elements that is identical to the brush's width. The order of the pixel data in this table is as follows: Row after row in top-down format, i.e. the table starts with the first row of pixels.\n\nNote that the rows won't be stored as subtables. The table returned by `BrushToPenArray()` will be one-dimensional and will contain exactly $height * $width elements, stored sequentially, row after row.\n\nPlease note that the table that you get from this function will usually eat lots of memory. Thus, you should set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you no longer need it. Otherwise you will waste huge amounts of memory and it could even happen that your script runs out of memory altogether. So please keep in mind that you should always set pixel array tables to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you are done with them.\n\nTo convert a pen array back to a palette brush, you can use the [PenArrayToBrush()](https://www.hollywood-mal.com/docs/html/hollywood/PenArrayToBrush_.html) function. See [PenArrayToBrush](https://www.hollywood-mal.com/docs/html/hollywood/PenArrayToBrush_.html).\n\nIf you want to have RGB colors instead of pen values, you have to use the [BrushToRGBArray()](https://www.hollywood-mal.com/docs/html/hollywood/BrushToRGBArray_.html) function instead. See [BrushToRGBArray](https://www.hollywood-mal.com/docs/html/hollywood/BrushToRGBArray_.html).",
    "inputsDocs": "* `id` — identifier of the palette brush to be converted to a pen array",
    "resultsDocs": "* `table` — a table containing all pens from the source brush; do not forget to set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) when you are done with it!",
    "platforms": ["All"],
    "insertText": "BrushToPenArray(${1:id})"
  },
  {
    "name": "BrushToRGBArray",
    "helpId": "BrushToRGBArray",
    "shortDescription": "convert brush to pixel array",
    "version": "5.0",
    "synopsis": "table = BrushToRGBArray(id[, invalpha])",
    "functionDocs": "This command copies all pixels from the specified brush to a table and returns that table to you. The table can be seen as a matrix containing a number of rows that is identical to the brush's height where each row has a number of elements that is identical to the brush's width. The order of the pixel data in this table is as follows: Row after row in top-down format, i.e. the table starts with the first row of pixels. The single pixels are stored as ARGB values.\n\nNote that the rows won't be stored as subtables. The table returned by `BrushToRGBArray()` will be one-dimensional and will contain exactly $height * $width elements, stored sequentially, row after row.\n\nThe optional argument `invalpha` can be used to tell `BrushToRGBArray()` that all alpha channel values shall be inverted. This means that a value of 0 means 100% visibility and a value of 255 means invisibility. Normally, it is just the other way round. Due to historical reasons, the Hollywood drawing library uses [inverted alpha values](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html), and this why they are also supported by `BrushToRGBArray()`, although they are not the default.\n\nPlease note that the table that you get from this function will usually eat lots of memory. Thus, you should set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you no longer need it. Otherwise you will waste huge amounts of memory and it could even happen that your script runs out of memory altogether. So please keep in mind that you should always set pixel array tables to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you are done with them.\n\nTo convert a pixel array back to a brush, you can use the [RGBArrayToBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RGBArrayToBrush_.html) function.\n\nNote that for palette brushes, there is also the [BrushToPenArray()](https://www.hollywood-mal.com/docs/html/hollywood/BrushToPenArray_.html) function which will return the brush's pen values instead of RGB colors. See [BrushToPenArray](https://www.hollywood-mal.com/docs/html/hollywood/BrushToPenArray_.html).",
    "inputsDocs": "* `id` — identifier of the brush to convert to RGB array\n* `invalpha` — optional: whether to use inverted alpha values (defaults to `False` which means do not invert alpha values)",
    "resultsDocs": "* `table` — a table containing all pixels from the source brush; do not forget to set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) when you are done with it!",
    "platforms": ["All"],
    "insertText": "BrushToRGBArray(${1:id})"
  },
  {
    "name": "ChangeBrushTransparency",
    "helpId": "ChangeBrushTransparency",
    "shortDescription": "change transparency mode of brush",
    "version": "5.0",
    "synopsis": "ChangeBrushTransparency(id, mode)",
    "functionDocs": "This command can be used to change the transparency mode of a brush. Hollywood currently supports three different transparency modes:\n\n- `#NONE`: No transparency. The entire brush is visible.\n\n- `#MASK`: Monochrome transparency. Every pixel can either be visible or invisible.\n\n- `#ALPHACHANNEL`: Gradual transparency. Every pixel can have 256 different levels of transparency. An alpha channel value of 0 means full transparency, whereas an alpha channel value of 255 means no transparency.\n\n`ChangeBrushTransparency()` is especially useful for switching between the `#MASK` and `#ALPHACHANNEL` modes. For example, when you load a brush using [LoadBrush()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBrush_.html) and you use the `Transparency` tag to make a color transparent, you will always get a brush that has a `#MASK` transparency mode. However, in some cases you might want the brush to use a mode of `#ALPHACHANNEL` instead; because you want to modify the values using [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html), for example. In that case, `ChangeBrushTransparency()` can be quite helpful.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush whose transparency mode you want to change\n* `mode` — desired new transparency; can be `#NONE`, `#MASK`, or `#ALPHACHANNEL`",
    "example": "```\nLoadBrush(1, \"test.iff\", {Transparency = #RED})\nChangeBrushTransparency(1, #ALPHACHANNEL)\n```\n\nThe code above loads the image \"test.iff\" into brush 1, makes color red transparent, and then changes the transparency mode from `#MASK` to `#ALPHACHANNEL`.",
    "platforms": ["All"],
    "insertText": "ChangeBrushTransparency(${1:id}, ${2:mode})"
  },
  {
    "name": "CharcoalBrush",
    "helpId": "CharcoalBrush",
    "shortDescription": "apply charcoal drawing effect to brush",
    "version": "5.0",
    "synopsis": "CharcoalBrush(id, radius)",
    "functionDocs": "This command applies a charcoal drawing effect to the specified brush. The `radius` argument specifies the charcoal radius. The larger the radius you specify here, the longer this function needs to calculate the resulting images.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to modify\n* `radius` — charcoal effect radius",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CharcoalBrush(${1:id}, ${2:radius})"
  },
  {
    "name": "ContrastBrush",
    "helpId": "ContrastBrush",
    "shortDescription": "enhance or reduce brush contrast",
    "version": "5.0",
    "synopsis": "ContrastBrush(id, inc[, repeat])",
    "functionDocs": "This command can be used to enhance or reduce the color contrast in the specified brush. If the `inc` argument is set to `True`, the contrast is enhanced. If it is set to `False`, the contrast is reduced. The optional argument `repeat` can be used to apply the effect to the brush multiple times. This is useful if you want to create sharper contrasts.\n\nNote that if `id` specifies a palette brush, `ContrastBrush()` will just apply the contrast to the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — brush to modify\n* `inc` — `True` to increase contrast, `False` to decrease contrast\n* `repeat` — optional: specifies how many times the contrast operation should be repeated (defaults to 1 which means run the effect just once)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ContrastBrush(${1:id}, ${2:inc})"
  },
  {
    "name": "ConvertToBrush",
    "helpId": "ConvertToBrush",
    "shortDescription": "convert object to brush",
    "version": "2.5",
    "synopsis": "[id] = ConvertToBrush(sourcetype, sourceid, dest[, t])",
    "functionDocs": "This function allows you to create a new brush from an existing graphics object. This is useful, for example, to copy the image data from single anim or sprite frames to a brush. You could then modify them and convert them back into an animation or sprite. You can also access the graphics of layers and other image types with this function.\n\nHaving graphics as brushes is so convenient because brushes are the most flexible graphics type in Hollywood. Most of the image manipulating functions work only with brushes. That is why you will often want to convert your graphics data to the brush format.\n\nThe `sourcetype` argument specifies the type of the source object that shall be converted into a brush. It can be one of the following types:\n\n- `#ANIM` Create a new brush from a single frame from an anim object. By default, the first anim frame will be converted to a brush. You can change this by passing the `Frame` tag in the optional table argument (see below).\n\n- `#BGPIC` Create a new brush from a background picture.\n\n- `#BRUSH` Create a new brush from an other brush. This does the same as the [CopyBrush()](https://www.hollywood-mal.com/docs/html/hollywood/CopyBrush_.html) command.\n\n- `#ICON` Create a new brush from an image inside an icon. Since icons can contain multiple images, you can use the `Frame` tag of the optional table argument to specify the index of the image that should be converted to a brush. By default, the first image in the icon will be converted to a brush. You can also use the `Selected` tag of the optional table argument to specify whether or not the selected icon image should be converted to a brush. By default, the normal image will be converted to a brush. (V8.0)\n\n- `#LAYER` Create a new brush from a layer (requires layers to be enabled!). If the layer is an anim layer, you can use the `Frame` tag in the optional table argument to specify which frame of the anim layer should be converted to a brush (see below). By default, the first frame will be converted.\n\n- `#SPRITE` Create a new brush from a single frame from a sprite object. By default, the first sprite frame will be converted to a brush. You can change this by passing the `Frame` tag in the optional table argument (see below).\n\n- `#TEXTOBJECT` Create a new brush from a text object.\n\n- `#VECTORPATH` Create a vector brush from one or more path object(s). If you use this type, the `sourceid` argument is unused. Instead, you need to pass a table argument in the `Path` tag in the optional table argument. This table must contain information about the individual paths to be embedded inside the new vector brush. The table uses the same layout as the table you have to pass to the [PathToBrush()](https://www.hollywood-mal.com/docs/html/hollywood/PathToBrush_.html) function. See [PathToBrush](https://www.hollywood-mal.com/docs/html/hollywood/PathToBrush_.html). (V7.0)\n\nThe optional table argument allows you to pass the following additional options:\n\n- `Frame`: If the source type specifies a graphics object that has multiple frames, you can use this tag to specify the frame that should be converted to a brush. Frames are counted from 1 until the number of frames. This tag defaults to 1.\n\n- `Selected`: If the source type is `#ICON`, you can use this tag to specify whether the selected or normal image should be converted to a brush. Icon images have two states: normal and selected. If you set `Selected` to `True`, the selected image will be converted to a brush. Otherwise `ConvertToBrush()` will convert the normal image to a brush. Defaults to `False`. (V8.0)\n\n- `Path`: If the source type is `#VECTORPATH`, you must set this tag to a table which contains information about the individual paths to be embedded inside the new vector brush. The table uses the same layout as the table you have to pass to the [PathToBrush()](https://www.hollywood-mal.com/docs/html/hollywood/PathToBrush_.html) function. See [PathToBrush](https://www.hollywood-mal.com/docs/html/hollywood/PathToBrush_.html). (V7.0)\n\n- `Vector`: By default, `ConvertToBrush()` will convert vector images to raster brushes. If you want to convert them to vector brushes, set this tag to `True`. This makes it possible to convert vector text objects or vector anim frames to vector brushes that can be scaled and rotated without any quality losses. Defaults to `False`. (V10.0)",
    "inputsDocs": "* `sourcetype` — type of the source object (see list above)\n* `sourceid` — identifier of the source object\n* `dest` — id for the brush to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `t` — optional: table argument containing further options (see above)",
    "resultsDocs": "* `id` — optional: handle to the new brush; will only be returned if you specified [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `dest`",
    "example": "```\nConvertToBrush(#SPRITE, 1, 10, {Frame = 5})\n```\n\nThe code above creates a new brush with the id 10 from frame 5 of sprite number 1.",
    "platforms": ["All"],
    "insertText": "ConvertToBrush(${1:sourcetype}, ${2:sourceid}, ${3:dest})"
  },
  {
    "name": "CopyBrush",
    "helpId": "CopyBrush",
    "shortDescription": "clone a brush",
    "version": "1.5",
    "synopsis": "[id] = CopyBrush(source, dest[, table])",
    "functionDocs": "This function clones the brush specified by `source` and creates a copy of it in brush `dest`. The new brush is independent from the old brush so you could free the source brush after it has been cloned.\n\nIf you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as `dest`, `CopyBrush()` will return a handle to the new brush to you. Otherwise the new brush will use the identifier specified in `dest`.\n\nStarting with Hollywood 5.0, this function accepts an optional table argument which accepts the following fields:\n\n- `Hardware`: If you set this tag to `True`, Hollywood will create this brush entirely in video memory for hardware-accelerated drawing in connection with a hardware double buffer. Hardware brushes are subject to several restrictions. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V5.0)\n\n- `Display`: If you specify the identifier of a display here, Hollywood will create a display-dependent hardware brush for you. Display-dependent hardware brushes can only be drawn to the display they belong to. This tag is only handled if the `Hardware` tag has been set to `True`. Also note that Hollywood's inbuilt display adapter does not support display-dependent hardware brushes, but plugins can install custom display adapters which support display-dependent hardware brushes. This tag defaults to the identifier of the currently active display. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `SmoothScale`: If you set this tag to `True` and the `Hardware` tag has also been set to `True`, Hollywood (or display adapters) will use bilinear interpolation when transforming the newly created brush. Normally, whether interpolation shall be used or not is set when calling a brush transformation command like [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) or [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html) but some display adapters need to know this information already at the time a hardware brush is created, and this is why this tag is here, though it's probably of not much use because it's only needed in rather special situations with display adapters like RebelSDL or hardware brushes on Android, because normally you can just specify whether interpolation shall be used or not in the transformation command directly. Note that `SmoothScale` is only supported when `Hardware` is set to `True`. (V8.0)",
    "inputsDocs": "* `source` — source brush id\n* `dest` — identifier of the brush to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `table` — optional: table configuring further options (V5.0)",
    "resultsDocs": "* `id` — optional: handle to the new brush; will only be returned if you specified [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `dest`",
    "example": "```\nCopyBrush(1, 10)\nFreeBrush(1)\n```\n\nThe above code creates a new brush 10 which contains the same graphics data as brush 1. Then it frees brush 1 because it is no longer needed.",
    "platforms": ["All"],
    "insertText": "CopyBrush(${1:source}, ${2:dest})"
  },
  {
    "name": "CreateBorderBrush",
    "helpId": "CreateBorderBrush",
    "shortDescription": "make border brush from brush",
    "version": "5.0",
    "synopsis": "[id] = CreateBorderBrush(id, src, color[, size])",
    "functionDocs": "This command creates a border from the brush specified in `src` and copies that border to a new brush that is specified in `id`. If `id` is set to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), `CreateBorderBrush()` will automatically choose an identifier and return it to you. If `id` is not [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), there will be no return value. The `color` argument must be set to the color that the border shall be drawn in. This must be a color in [ARGB notation](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) so you can also use a transparency setting here. Finally, the optional argument `size` can be used to specify the drop shadow's size.\n\nNote that the size argument does not specify absolute width or height values but a relative factor by which the source brush will be grown on each side. This means that the border brush's width will be the source brush's width plus two times `size`, and the same applies to the border's height.",
    "inputsDocs": "* `id` — identifier for the new border brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection\n* `src` — the brush whose border shall be generated\n* `color` — desired border color as an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html)\n* `size` — optional: desired border size (defaults to 5)",
    "resultsDocs": "* `id` — optional: identifier of the border brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nbordersize = 20\nCreateBrush(1, 320, 240, #RED)\nCreateBorderBrush(2, 1, #BLACK, bordersize)\nDisplayBrush(2, 0, 0)\nDisplayBrush(1, bordersize, bordersize)\n```\n\nThe code above creates a border for a 320x240 red rectangle and displays it beneath it.",
    "platforms": ["All"],
    "insertText": "CreateBorderBrush(${1:id}, ${2:src}, ${3:color})"
  },
  {
    "name": "CreateBrush",
    "helpId": "CreateBrush",
    "shortDescription": "create a blank brush",
    "version": "1.5",
    "synopsis": "[id] = CreateBrush(id, width, height[[, color], table])",
    "functionDocs": "This function creates a new brush in the specified dimensions and initializes it to the specified color. If no color is specified, the brush is initialized to black. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, `CreateBrush()` will automatically choose an identifier for this brush and return it to you.\n\nStarting with Hollywood 4.5, there is an optional table argument which you can use to create a mask or an alpha channel for this brush. The following tags are recognized by the optional table:\n\n- `Mask`: Set this tag to `True` if `CreateBrush()` should attach a mask to the new brush. If this is `True`, `AlphaChannel` must be `False`. Defaults to `False`.\n\n- `AlphaChannel`: Set this tag to `True` if `CreateBrush()` should attach an alpha channel to the new brush. If this is set to `True`, `Mask` must be set to `False`. Defaults to `False`.\n\n- `Clear`: This tag is only handled if either `AlphaChannel` or `Mask` was set to `True`. If that is the case, `Clear` specifies whether or not the mask or alpha channel should be cleared (i.e. fully transparent) or not (i.e. opaque). This defaults to `False` which means that by default, the new mask or alpha channel will be opaque.\n\n- `Hardware`: If you set this tag to `True`, Hollywood will create this brush entirely in video memory for hardware-accelerated drawing in connection with a hardware double buffer. Hardware brushes are subject to several restrictions. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `Display`: If you specify the identifier of a display here, Hollywood will create a display-dependent hardware brush for you. Display-dependent hardware brushes can only be drawn to the display they belong to. This tag is only handled if the `Hardware` tag has been set to `True`. Also note that Hollywood's inbuilt display adapter does not support display-dependent hardware brushes, but plugins can install custom display adapters which support display-dependent hardware brushes. This tag defaults to the identifier of the currently active display. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `SmoothScale`: If you set this tag to `True` and the `Hardware` tag has also been set to `True`, Hollywood (or display adapters) will use bilinear interpolation when transforming this brush. Normally, whether interpolation shall be used or not is set when calling a brush transformation command like [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) or [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html) but some display adapters need to know this information already at the time a hardware brush is created, and this is why this tag is here, though it's probably of not much use because it's only needed in rather special situations with display adapters like RebelSDL or hardware brushes on Android, because normally you can just specify whether interpolation shall be used or not in the transformation command directly. Note that `SmoothScale` is only supported when `Hardware` is set to `True`. (V8.0)\n\n- `Palette`: If this tag is set to the identifier of a palette, Hollywood will create a palette brush for you. Palettes can be created using functions like [CreatePalette()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePalette_.html) or [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html). Alternatively, you can also set this tag to one of Hollywood's inbuilt palettes, e.g. `#PALETTE_AGA`. See [SetStandardPalette](https://www.hollywood-mal.com/docs/html/hollywood/SetStandardPalette_.html). (V9.0)\n\n- `FillPen`: If the `Palette` tag is set (see above), you can use this tag to set the pen that should be used for filling the brush's background. Note that the `color` parameter that is passed to `CreateBrush()` is ignored if `Palette` is `True`. That's why this tag is here to allow you to specify a pen that will be used when initializing the brush's pixels. Defaults to 0. (V9.0)\n\n- `TransparentPen`: If `Palette` is set to `True`, this tag can be used to specify a pen that should be made transparent in the new brush. Defaults to `#NOPEN` which means that there should be no transparent pen. (V9.0)\n\n- `Depth`: This tag allows you to set the desired brush depth. If this is less than or equal to 8, `CreateBrush()` will create a palette brush. You can also specify the `Palette` tag together with the `Depth` tag. If the specified palette has more colors than the specified depth, those colors will be discarded. If it has less colors, the unused pens will be set to black. By default, `CreateBrush()` will create 24-bit or 32-bit brushes, depending on whether the `AlphaChannel` tag is set to `True` or `False`. (V10.0)\n\n- `Callback`: If you set this tag to a callback function, `CreateBrush()` will create a custom-drawn brush for you. In comparison to normal brushes, custom-drawn brushes are backed by a callback function that Hollywood will call whenever the dimensions of the brush change or a transformation is applied. This allows you to create brushes which dynamically adapt themselves to new resolutions and transformations. This is very similar to what vector brushes do except that custom-drawn brushes allow you to assume full control over the process because your callback does all the drawing. Your callback will also be called immediately by `CreateBrush()` to do the initial drawing of the brush.\n\n  Custom-drawn brushes can be very useful to implement your own vector brush type. Since custom-drawn brushes get the chance to redraw themselves whenever their resolution or transformation changes, you can use them to create brushes which can be scaled or transformed without any losses in quality because your callback redraws the graphics whenever the brush dimensions change instead of just scaling its pixels using conventional lossy scaling. This is especially useful when using the layerscale engine with custom graphics. If you use custom-drawn brushes for a layer, you can be sure that that layer will scale losslessly to all resolutions.\n\n  The callback function you specify in `Callback` will receive a message as parameter 1 with the following fields initialized:\n\n  - `Action`: Initialized to `Draw`.\n  - `ID`: Identifier of the brush to draw to. Note that this won't be the same identifier as the brush you created using `CreateBrush()`. Your callback needs to call [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) on the brush specified in `ID` and draw the desired graphics to the brush, taking the current transformation into account (see below). You can also call [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) and [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html) on the brush in case you need to adjust transparency setting.\n  - `Width`: Current width of the brush.\n  - `Height`: Current height of the brush.\n  - `SX`: Specifies the amount of scaling on the x axis. If it is negative, the image is flipped on the y axis. This will never be 0.\n  - `RX`: Specifies the amount of rotation on the x axis. This can be 0.\n  - `RY`: Specifies the amount of rotation on the y axis. This can be 0.\n  - `SY`: Specifies the amount of scaling on the y axis. If it is negative, the image is flipped on the x axis. This will never be 0.\n  - `UserData`: This will be set to the user data you passed in the `UserData` tag of the optional table argument supported by `CreateBrush()` (see below). If you haven't passed any user data in your call to `CreateBrush()`, this tag won't be set.\n\n  (V10.0)\n\n- `UserData`: If you have set the `Callback` tag (see above), you can use this tag to store some user data that will be passed to your callback whenever Hollywood calls it. The user data can be of any type. (V10.0)",
    "inputsDocs": "* `id` — id for the new brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `width` — width for the brush\n* `height` — height for the brush\n* `color` — optional: [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) for background (defaults to `#BLACK`)\n* `table` — optional: table for specifying further options (see above) (V4.5)",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateBrush(2, 320, 256, #BLUE)\n```\n\nThe above code creates a new blue brush with the id 2 and the dimension of 320x256.\n\n---\n\n```\nCreateBrush(2, 320, 256, #BLUE, {AlphaChannel = True, Clear = True})\n```\n\nThe code above creates a new blue brush with id 2 in a size of 320x256. The new brush will also get an alpha channel that will be set to 100% transparent. Thus, if you display the new brush, you will see nothing because the brush is currently fully transparent.\n\n---\n\n```\nCreateBrush(1, 320, 240, 0, {AlphaChannel = True, Clear = True, Callback =\n    Function(msg)\n        SelectBrush(msg.id, #SELMODE_COMBO)\n        SetFormStyle(#ANTIALIAS)\n        SetFillStyle(#FILLCOLOR)\n        Ellipse(0, 0, msg.width / 2, msg.height / 2, #RED)\n        EndSelect\n    EndFunction\n})\nScaleBrush(1, 640, 480)\nDisplayBrush(1, 0, 0)\n```\n\nThe code above demonstrates how to create a custom-drawn brush. It creates a brush that draws an anti-aliased ellipse in its callback function. Since the callback function is invoked whenever the brush's dimensions change, the ellipse will scale like a true vector image and will be perfectly crisp in all resolutions.",
    "platforms": ["All"],
    "insertText": "CreateBrush(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "CreateGradientBrush",
    "helpId": "CreateGradientBrush",
    "shortDescription": "create brush with gradient fill",
    "version": "5.0",
    "synopsis": "[id] = CreateGradientBrush(id, width, height, type, startcolor, endcolor[, angle, table])",
    "functionDocs": "This function can be used to create a new brush which is initialized to a gradient backfill. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for this brush automatically and return it to you. The `width` and `height` arguments specify the desired dimensions for the new brush. The `type` argument specifies the type of the gradient you want to use. The following gradient types are currently available: `#LINEAR`, `#RADIAL`, and `#CONICAL`. The `angle` argument allows you to specify a rotation angle (in degrees) for the gradient. The angle argument is only supported by gradients of type `#LINEAR` and `#CONICAL`. Radial gradients cannot be rotated.\n\nThe optional table argument can be used to specify advanced options. The following tags are currently recognized:\n\n- `CenterX, CenterY`: These two tags can be used to specify the center point of the gradient. As linear gradients do not have a center point, these two tags are only handled when you use gradients of type `#RADIAL` or `#CONICAL`. The center point must be specified as a floating point value that is between 0.0 (left/top corner) and 1.0 (right/bottom corner). If not specified, both tags default to 0.5 which means that the center point of the gradient is in the center of the image.\n\n- `Border`: This tag can be used to set the border size for gradients of type `#RADIAL`. For the other gradient types this tag is ignored. The border size of the radial gradient must be a floating point value between 0.0 and 1.0. Defaults to 0.0 which means no border.\n\n- `Balance`: This tag can be used to set the balance point for gradients of type `#CONICAL`. For the other gradient types this tag is ignored. The balance point of the conical gradient must be floating point value between 0.0 and 1.0. Defaults to 0.5. Note that this is only used when creating a two-color gradient. When creating a multi-color gradient using the `Colors` table, `Balance` is ignored because the `Colors` table allows you to individually balance the colors in the gradient using color stops.\n\n- `Colors`: This tag allows you to create gradients that contain multiple colors. This tag must be set to a table that contains a sequence of alternating color and stop values. The colors must be specified in [RGB format](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). The stop value is a floating point value between 0.0 and 1.0 and defines the position where the corresponding color should be merged into the gradient. A position of 0.0 means the start position of the gradient, and a position of 1.0 means the end position. Please note that the stop positions must be sorted in ascending order, i.e. starting from 0.0 to 1.0. If you specify this tag, the colors specified in the `startcolor` and `endcolor` arguments are ignored, and Hollywood will only use the colors specified in this tag.",
    "inputsDocs": "* `id` — id for the new brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `width` — desired width for the new brush\n* `height` — desired height for the new brush\n* `type` — type of the gradient; see above for available types\n* `startcolor` — [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) defining the start color\n* `endcolor` — [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) defining the end color\n* `angle` — optional: rotation angle for the gradient (default: 0)\n* `table` — optional: table argument specifying further options; see above for a description of available options",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html)",
    "platforms": ["All"],
    "insertText": "CreateGradientBrush(${1:id}, ${2:width}, ${3:height}, ${4:type}, ${5:startcolor}, ${6:endcolor})"
  },
  {
    "name": "CreateShadowBrush",
    "helpId": "CreateShadowBrush",
    "shortDescription": "make shadow brush from brush",
    "version": "5.0",
    "synopsis": "[id] = CreateShadowBrush(id, src, color[, size])",
    "functionDocs": "This command creates a drop shadow from the brush specified in `src` and copies that shadow to a new brush that is specified in `id`. If `id` is set to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), `CreateShadowBrush()` will automatically choose an identifier and return it to you. If `id` is not [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), there will be no return value. The `color` argument must be set to the color that the shadow shall be drawn in. In most cases this will be a plain `#BLACK` but combined with a transparency value because opaque shadows do not look very good. You can use the [ARGB()](https://www.hollywood-mal.com/docs/html/hollywood/ARGB_.html) function to combine a color and a transparency value into an [ARGB color](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html). Finally, the optional argument `size` can be used to specify the drop shadow's size.\n\nNote that the size argument does not specify absolute width or height values but a relative factor by which the source brush will be grown on each side. This means that the drop shadow brush's width will be the source brush's width plus two times `size`, and the same applies to the drop shadow's height.",
    "inputsDocs": "* `id` — identifier for the new drop shadow brush function or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for[auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection\n* `src` — the brush to convert into a shadow\n* `color` — desired shadow color as an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html)\n* `size` — optional: desired shadow size (defaults to 5)",
    "resultsDocs": "* `id` — optional: identifier of the drop shadow brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nshadowsize = 20\nCreateBrush(1, 320, 240, #RED)\nCreateShadowBrush(2, 1, ARGB(40, #BLACK), shadowsize)\nDisplayBrush(2, 0, 0)\nDisplayBrush(1, shadowsize, shadowsize)\n```\n\nThe code above creates a drop shadow for a 320x240 red rectangle and displays it beneath it.",
    "platforms": ["All"],
    "insertText": "CreateShadowBrush(${1:id}, ${2:src}, ${3:color})"
  },
  {
    "name": "CreateTexturedBrush",
    "helpId": "CreateTexturedBrush",
    "shortDescription": "create a textured brush",
    "version": "5.0",
    "synopsis": "[id] = CreateTexturedBrush(id, brushid, width, height[, x, y])",
    "functionDocs": "This function will create a new brush for you and it will texture it with the brush specified by `brushid`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for the new brush automatically and return it to you. The `width` and `height` arguments specify the desired dimensions for the new brush. The optional `x` and `y` parameters allow you to specify an offset into the texture brush. Texturing will then start from this offset in the brush. The default for these arguments is 0/0 which means start at the top-left corner inside the texture brush.",
    "inputsDocs": "* `id` — id for the new brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `brushid` — identifier of the brush to be used as the texture\n* `width` — desired width for the new brush\n* `height` — desired height for the new brush\n* `x` — optional: start x offset in the texture brush\n* `y` — optional: start y offset in the texture brush",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "platforms": ["All"],
    "insertText": "CreateTexturedBrush(${1:id}, ${2:brushid}, ${3:width}, ${4:height})"
  },
  {
    "name": "CropBrush",
    "helpId": "CropBrush",
    "shortDescription": "crop a brush",
    "version": "2.0",
    "synopsis": "CropBrush(id, x, y, width, height)",
    "functionDocs": "This function crops the brush specified by `id` at the position specified by `x` and `y` to the new dimension specified by `width` and `height`. If the brush has a mask and/or an alpha channel, they will be cropped as well.",
    "inputsDocs": "* `id` — brush to crop\n* `x` — x-position where to start cropping\n* `y` — y-position where to start cropping\n* `width` — crop width\n* `height` — crop height",
    "example": "```\nCreateBrush(1, 200, 200)\nSelectBrush(1)\nCircle(50, 50, 50, #RED)\nEndSelect\n\nCropBrush(1, 50, 50, 101, 101)\nDisplayBrush(1, #CENTER, #CENTER)\n```\n\nCreates a new brush and draws a red circle in the center of it. After that, the empty area surrounding the circle will be cropped.",
    "platforms": ["All"],
    "insertText": "CropBrush(${1:id}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
  },
  {
    "name": "DeleteAlphaChannel",
    "helpId": "DeleteAlphaChannel",
    "shortDescription": "remove a brush's alpha channel",
    "version": "2.0",
    "synopsis": "DeleteAlphaChannel(id)",
    "functionDocs": "This function kills the alpha channel of the brush specified by `id`. See [SelectAlphaChannel](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html).",
    "inputsDocs": "* `id` — brush whose alpha channel is to be deleted",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DeleteAlphaChannel(${1:id})"
  },
  {
    "name": "DeleteMask",
    "helpId": "DeleteMask",
    "shortDescription": "remove a brush's mask",
    "version": "2.0",
    "synopsis": "DeleteMask(id)",
    "functionDocs": "This function kills the mask of the brush specified by `id`, i.e. the brush will appear opaque then.",
    "inputsDocs": "* `id` — brush whose mask is to be deleted",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DeleteMask(${1:id})"
  },
  {
    "name": "DisplayBrush",
    "helpId": "DisplayBrush",
    "shortDescription": "display a brush",
    "version": "1.0",
    "synopsis": "DisplayBrush(id, x, y[, table])",
    "functionDocs": "This function displays the brush specified by `id` at the coordinates specified by `x` and `y`.\n\nIf layers are enabled, this command will add a new layer of the type `#BRUSH` to the layer stack.\n\nNew in Hollywood 4.0: This command has an optional table argument now which allows you to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all drawing commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the brush to display\n* `x` — x offset to display\n* `y` — y offset to display\n* `table` — optional: table specifying further options (V4.0)",
    "example": "```\nDisplayBrush(1, #CENTER, #CENTER)\n```\n\nDisplays brush 1 centered on the screen.\n\n---\n\n```\nDisplayBrush(1, 0, 0, {Width = 640, Height = 480})\n```\n\nDisplays brush 1 scaled to 640x480.",
    "platforms": ["All"],
    "insertText": "DisplayBrush(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "DisplayBrushFX",
    "helpId": "DisplayBrushFX",
    "shortDescription": "display a brush with transition effects",
    "version": "1.0",
    "synopsis": "[handle] = DisplayBrushFX(id, x, y[, table])",
    "functionDocs": "This function is an extended version of the [DisplayBrush()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrush_.html) command. It displays the brush specified by `id` at the position specified by `x`,`y` and it uses one of the many Hollywood transition effects to display it. You need also specify the speed for the transition.\n\nIf layers are enabled, this command will add a new layer of the type `#BRUSH` to the layer stack.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type`: Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed`: Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter`: Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async`: You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `DisplayBrushFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).",
    "inputsDocs": "* `id` — identifier of the brush to display\n* `x` — desired x position for the brush\n* `y` — desired y position for the brush\n* `table` — optional: configuration for the transition effect",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nDisplayBrushFX(1, 0, 0, #VLINES, 10)   ; old syntax\n\nOR\n\nDisplayBrushFX(1, 0, 0, {Type = #VLINES, Speed = 10})  ; new syntax\n```\n\nThe above code displays brush 1 at 0:0 with a `#VLINES` transition at speed 10.",
    "platforms": ["All"],
    "insertText": "DisplayBrushFX(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "DisplayBrushPart",
    "helpId": "DisplayBrushPart",
    "shortDescription": "display a part of a brush",
    "version": "1.0",
    "synopsis": "DisplayBrushPart(id, srcx, srcy, destx, desty, width, height[, table])",
    "functionDocs": "This function displays a tile of the brush specified by `id` on the screen. The tile is defined by `srcx` and `srcy` and its `width` and `height` and it is displayed on the display at the position specified by `destx` and `desty`.\n\nIf layers are enabled, this command will add a new layer of the type `#BRUSHPART` to the layer stack.\n\nNew in Hollywood 4.0: This command has an optional table argument now which allows you to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all drawing commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the brush to use as source\n* `srcx` — left corner in the brush\n* `srcy` — top corner in the brush\n* `destx` — desired x position for the brush on the screen\n* `desty` — desired y position for the brush on the screen\n* `width` — width of the tile\n* `height` — height of the tile\n* `table` — optional: table specifying further options (V4.0)",
    "example": "```\nDisplayBrushPart(1,0,0,50,50,100,100)\n```\n\nDisplay the first 100 pixels and rows from brush 2 on the screen at the position 50,50.",
    "platforms": ["All"],
    "insertText": "DisplayBrushPart(${1:id}, ${2:srcx}, ${3:srcy}, ${4:destx}, ${5:desty}, ${6:width}, ${7:height})"
  },
  {
    "name": "EdgeBrush",
    "helpId": "EdgeBrush",
    "shortDescription": "detect edges within a brush",
    "version": "5.0",
    "synopsis": "EdgeBrush(id[, radius])",
    "functionDocs": "This command can be used to detect edges with a brush. The optional argument `radius` can be used to specify the search radius. The larger the radius you specify here, the longer this function needs to execute. If you do not specify the optional argument, `EdgeBrush()` will choose an appropriate radius automatically.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to modify\n* `radius` — optional: search radius (defaults to 0 which means that the radius will be chosen automatically)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "EdgeBrush(${1:id})"
  },
  {
    "name": "EmbossBrush",
    "helpId": "EmbossBrush",
    "shortDescription": "emboss brush",
    "version": "5.0",
    "synopsis": "EmbossBrush(id[, radius])",
    "functionDocs": "This command applies an emboss effect to the specified brush. The optional argument `radius` can be used to specify the emboss radius. The larger the radius you specify here, the longer this function needs to apply the effect. If you do not specify the optional argument, `EmbossBrush()` will automatically choose an emboss radius.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to emboss\n* `radius` — optional: emboss radius (defaults to 0 which means that the radius will be chosen automatically)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "EmbossBrush(${1:id})"
  },
  {
    "name": "EndSelect",
    "helpId": "EndSelect",
    "shortDescription": "select display as output device",
    "version": "1.5",
    "synopsis": "EndSelect()",
    "functionDocs": "This function cancels the offscreen-rendering mode by selecting the display as the output device again. All commands which output graphics will now render directly to the display again.\n\nNote that `EndSelect()` cannot be used with [SelectDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/SelectDisplay_.html).\n\nPlease note that the SelectXXX()/`EndSelect()` calls do not nest, i.e. `EndSelect()` will always select the display as the output device, even if it was not the output device when SelectXXX() was called.\n\n```\nSelectBrush(1)\nBox(0, 0, 100, 100, #RED)   ; draw box on brush #1\nSelectBrush(2)\nBox(0, 0, 100, 100, #GREEN) ; draw box on brush #2\nEndSelect                   ; selects display (not brush #1 !!!)\nEndSelect                   ; Error! Display already selected!\n```",
    "inputsDocs": "none",
    "example": "See [SelectBGPic](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html)\nSee [SelectBrush](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html)\nSee [SelectAnim](https://www.hollywood-mal.com/docs/html/hollywood/SelectAnim_.html)\nSee [SelectLayer](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html)",
    "platforms": ["All"],
    "insertText": "EndSelect()"
  },
  {
    "name": "ExtendBrush",
    "helpId": "ExtendBrush",
    "shortDescription": "enlarge a brush",
    "version": "10.0",
    "synopsis": "ExtendBrush(id, left, top, right, bottom[, t])",
    "functionDocs": "This function enlarges the brush specified by `id`. You can specify the desired extension for all sides of the brush by passing a pixel value in the `left`, `top`, `right` and `bottom` parameters. A value of 0 means no extension on that side. Note that the extension values mustn't be negative. If you want to crop a brush, use the [CropBrush()](https://www.hollywood-mal.com/docs/html/hollywood/CropBrush_.html) function instead.\n\nThe optional table argument can be used to specify the following additional options:\n\n- `Clear`: If the brush uses transparency, you can set this tag to `True` if you want the newly allocated areas of the brush to be transparent as well. If you set this tag to `False`, the new areas will be opaque. Defaults to `False`.\n\n- `Color`: This tag can be used to specify the filling color for the newly allocated areas of the brush. This is only used for RGB brushes. For palette brushes, use the `Pen` tag instead (see below). Defaults to `#BLACK`.\n\n- `Pen`: This tag can be used to specify the filling pen for the newly allocated areas of the brush. This is only used for palette brushes. For RGB brushes, use the `Color` tag instead (see above). Defaults to 0.",
    "inputsDocs": "* `id` — brush to enlarge\n* `left` — number of pixels to add on the left side\n* `top` — number of pixels to add on the top side\n* `right` — number of pixels to add on the right side\n* `bottom` — number of pixels to add on the bottom side\n* `t` — optional: table specifying further options (see above)",
    "example": "```\nCreateBrush(1, 200, 200)\nExtendBrush(1, 50, 50, 50, 50, {Color = #RED})\n```\n\nThe code above creates a 200x200 pixel brush and then adds a red border of 50 pixels around it.",
    "platforms": ["All"],
    "insertText": "ExtendBrush(${1:id}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})"
  },
  {
    "name": "FlipBrush",
    "helpId": "FlipBrush",
    "shortDescription": "flip a brush",
    "version": "1.5",
    "synopsis": "FlipBrush(id, xflip)",
    "functionDocs": "This function flips (mirrors) the brush specified by `id`. If `xflip` is set to `True`, the brush will be flipped in x-direction otherwise it will be flipped in y-direction.",
    "inputsDocs": "* `id` — brush to flip\n* `xflip` — `True` for horizontal (x) flip, `False` for vertical (y) flip",
    "example": "```\nFlipBrush(1, TRUE)\n```\n\nThe code above flips the brush horizontally.",
    "platforms": ["All"],
    "insertText": "FlipBrush(${1:id}, ${2:xflip})"
  },
  {
    "name": "FloodFill",
    "helpId": "FloodFill",
    "shortDescription": "flood fill a brush area with a color",
    "version": "2.0",
    "synopsis": "FloodFill(id, x, y, bordercolor, color[, t])",
    "functionDocs": "This function can be used to flood fill a bordered area in the brush specified by `id` with a color. You need to pass a starting position in the `x` and `y` arguments. `FloodFill()` will then start out in all directions replacing all pixels with the specified color until it reaches the border color which you also have to specify. The starting position is usually an arbitrary point within the bounded area.\n\nIf the brush is a palette brush, `FloodFill()` will operate in pen mode instead of color mode. This means that both the `bordercolor` and the `color` arguments must be set to a pen index instead of an RGB color. In pen mode, `FloodFill()` will behave exactly as in RGB mode except that it will use pens instead of RGB colors.\n\nStarting with Hollywood 9.0, you can also pass `#NOCOLOR` in the `bordercolor` argument. In that case, borderless flood filling will be used, which means that all neighbouring pixels matching the color (or pen) of the starting pixel will be filled.\n\nFurthermore, Hollywood 9.0 introduces an optional table argument that allows you to specify the following options:\n\n- `AlphaChannel`: If you set this tag to `True`, `FloodFill()` will operate on the brush's alpha channel instead of on its color channels. This means that you have to pass values in the range of 0 to 255 instead of RGB colors to `FloodFill()`.\n\n- `ColorSource`: If this and the `AlphaChannel` tag is set to `True`, the area to be filled will be determined by the color channels whereas all output will be written to the alpha channel. This means that the border color passed to `FloodFill()` must be an RGB color (or `#NOCOLOR`) and the fill color must be an alpha value between 0 and 255. (V9.1)",
    "inputsDocs": "* `id` — brush to use for flood fill\n* `x` — start x-position for the fill operation\n* `y` — start y-position for the fill operation\n* `bordercolor` — color (or pen) of the border or `#NOCOLOR` for borderless flood filling\n* `color` — color (or pen) to use for filling\n* `t` — optional: table argument containing further options (V9.0)",
    "example": "```\nCreateBrush(1, 241, 201)\nSelectBrush(1)\nSetFillStyle(#FILLNONE)\nEllipse(0, 0, 120, 100, #RED)\nEndSelect\nFloodFill(1, 120, 100, #RED, #WHITE)\nDisplayBrush(1, 0, 0)\n```\n\nCreates a red ellipse outline and then fills it with the color white using the `FloodFill()` command starting from the center of the ellipse in all directions.",
    "platforms": ["All"],
    "insertText": "FloodFill(${1:id}, ${2:x}, ${3:y}, ${4:bordercolor}, ${5:color})"
  },
  {
    "name": "FreeBrush",
    "helpId": "FreeBrush",
    "shortDescription": "free a brush",
    "version": "1.0",
    "synopsis": "FreeBrush(id)",
    "functionDocs": "This function frees the memory of the brush specified by `id`. To reduce memory consumption, you should free brushes when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the brush",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeBrush(${1:id})"
  },
  {
    "name": "GammaBrush",
    "helpId": "GammaBrush",
    "shortDescription": "correct gamma values of brush",
    "version": "5.0",
    "synopsis": "GammaBrush(id, red, green, blue)",
    "functionDocs": "This function can be used to gamma correct the color channels of the specified brush. For each color channel, you have to pass a floating point value that specifies the desired gamma correction. A value of 1.0 means no change, a value smaller than 1.0 darkens the channel, a value greater than 1.0 lightens the channel.\n\nNote that if `id` specifies a palette brush, InvertBrush() will just apply the gamma correction to the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — brush to gamma correct\n* `red` — gamma correction for red channel\n* `green` — gamma correction for green channel\n* `blue` — gamma correction for blue channel",
    "example": "```\nGammaBrush(1, 1.5, 1.0, 0.5)\n```\n\nThe code above lightens the red channel and darkens the blue channel, while leaving the green color channel untouched.",
    "platforms": ["All"],
    "insertText": "GammaBrush(${1:id}, ${2:red}, ${3:green}, ${4:blue})"
  },
  {
    "name": "GetBrushLink",
    "helpId": "GetBrushLink",
    "shortDescription": "get a link to a brush",
    "version": "1.5",
    "synopsis": "GetBrushLink(id, sourcetype, sourceid[, par])",
    "functionDocs": "**Hollywood 2.0 Note:** Brush links are no longer supported. You can still use this function but it will not create links any more. It will simply create a full copy of the image data; in other words: `GetBrushLink()` just calls [ConvertToBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ConvertToBrush_.html).\n\nThis function creates a new brush for you which will link data from an other object. Therefore the new brush will be read-only. This means e.g. that you can display or move it, but you cannot change its data (e.g. by calling [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) or [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html)).\n\nYour brush is fully dependent on the source object. If you free the source object, your brush will also be freed and is no longer available. Brush links require only little bytes of memory because the graphics data will be linked from the source object.\n\nIt is useful to use brush links when you have many objects with the same graphics data and you want to access them as separate brushes (e.g. for convenience reasons). Another good reason for brush links is that you can do a lot of more stuff with brushes than with other objects. For example you could retrieve a link to the first anim frame, then display it with [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) and then start the anim with [PlayAnim()](https://www.hollywood-mal.com/docs/html/hollywood/PlayAnim_.html).  This would display the anim with a transition effect then.\n\nSourcetype can be one of the following types:\n\n- `#ANIM` Get brush links from single anim frames; this type requires the optional argument `par` which specifies the frame you want to have linked\n\n- `#BGPIC` Get brush link from a background picture\n\n- `#BRUSH` Get brush link from an other brush\n\n- `#LAYER` Get brush link from a layer (requires layers to be enabled!)\n\n- `#TEXTOBJECT` Get brush link from a text object",
    "inputsDocs": "* `id` — identifier for the brush to be created\n* `sourcetype` — type of the source object (see list above)\n* `sourceid` — identifier of the source object\n* `par` — optional: currently only required for type `#ANIM`",
    "example": "```\nLoadAnim(1, \"MyAnim.gif\")\nGetBrushLink(1, #ANIM, 1, 1)\nDisplayBrushFX(1, #CENTER, #CENTER, #CROSSFADE)\nPlayAnim(1, #CENTER, #CENTER)\n```\n\nThe above code loads the animation \"MyAnim.gif\", gets a brush link to the first frame, crossfades this frame on to the display and then starts playing the anim. This is how you would display an anim with a transition effect.",
    "platforms": ["All"],
    "insertText": "GetBrushLink(${1:id}, ${2:sourcetype}, ${3:sourceid})"
  },
  {
    "name": "GetBrushPen",
    "helpId": "GetBrushPen",
    "shortDescription": "get pen color from brush's palette",
    "version": "9.0",
    "synopsis": "color = GetBrushPen(id, pen)",
    "functionDocs": "This function gets the color of the pen specified by `pen` from the palette of the brush specified by `id`. The color will be returned as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).",
    "inputsDocs": "* `id` — identifier of brush to use\n* `pen` — pen you want to get (starting from 0)",
    "resultsDocs": "* `color` — color of the pen, specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\ncolor = GetBrushPen(1, 0)\n```\n\nThe code gets the color of the first pen of brush 1.",
    "platforms": ["All"],
    "insertText": "GetBrushPen(${1:id}, ${2:pen})"
  },
  {
    "name": "InvertAlphaChannel",
    "helpId": "InvertAlphaChannel",
    "shortDescription": "invert alpha channel of a brush",
    "version": "2.0",
    "synopsis": "InvertAlphaChannel(id)",
    "functionDocs": "This function inverts the alpha channel of the brush specified by `id`. This means that the transparency for each pixel is turned around. If a pixel was previously 80% transparent, it will only be 20% transparent after an inversion and pixels who were 20% transparent will become 80% transparent after the inversion.",
    "inputsDocs": "* `id` — brush whose alpha channel is to be inverted",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "InvertAlphaChannel(${1:id})"
  },
  {
    "name": "InvertBrush",
    "helpId": "InvertBrush",
    "shortDescription": "invert colors of a brush",
    "version": "1.5",
    "synopsis": "InvertBrush(id)",
    "functionDocs": "This function inverts the brush specified by `id`, which means that all colors are replaced with their complements (white will become black, blue will become yellow etc.).\n\nNote that if `id` specifies a palette brush, `InvertBrush()` will just invert the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — brush to invert",
    "example": "```\nInvertBrush(1)\n```\n\nThe code above inverts the colors of brush 1.",
    "platforms": ["All"],
    "insertText": "InvertBrush(${1:id})"
  },
  {
    "name": "InvertMask",
    "helpId": "InvertMask",
    "shortDescription": "invert mask of a brush",
    "version": "2.0",
    "synopsis": "InvertMask(id)",
    "functionDocs": "This function inverts the mask of the brush specified by `id`. This means that all areas which were previously transparent, will become opaque and areas that were opaque previously, will become transparent.",
    "inputsDocs": "* `id` — brush whose mask is to be inverted",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "InvertMask(${1:id})"
  },
  {
    "name": "IsBrushEmpty",
    "helpId": "IsBrushEmpty",
    "shortDescription": "check if a brush has only invisible pixels",
    "version": "8.0",
    "synopsis": "r = IsBrushEmpty(id)",
    "functionDocs": "This function can be used to check if the brush specified in `id` has only invisible pixels, in which case it can be considered \"empty\". If there are only invisible pixels in the brush, `True` is returned, `False` otherwise.\n\nObviously, a brush can only be \"empty\" if it uses some kind of transparency, either a mask or an alpha channel. If you call this function on a brush that has neither a mask nor an alpha channel attached, the return value will always be `False`.",
    "inputsDocs": "* `id` — brush to check",
    "resultsDocs": "* `r` — `True` if there are only invisible pixels in the brush, `False` otherwise",
    "example": "```\nCreateBrush(1, 100, 100, #RED, {Mask = True, Clear = True})\nPrint(IsBrushEmpty(1))\n```\n\nThe code above will print 1 because although the brush is filled with red pixels, none of them will be visible because the mask has all pixels set to invisible.",
    "platforms": ["All"],
    "insertText": "IsBrushEmpty(${1:id})"
  },
  {
    "name": "LoadBrush",
    "helpId": "LoadBrush",
    "shortDescription": "load a brush",
    "version": "1.0",
    "synopsis": "[id] = LoadBrush(id, filename$[, table])",
    "functionDocs": "This function loads the brush specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadBrush()` will automatically choose an identifier and return it.\n\nImage formats that are supported on all platforms are PNG, JPEG, BMP, IFF ILBM, GIF, and image formats you have a plugin for. Depending on the platform Hollywood is running on, more image formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all image formats you have datatypes for as well. On Windows, `LoadBrush()` can also load image formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 5.0, this function can also load vector formats like SVG if you have an appropriate plugin installed. Keep in mind, though, that when you load vector images using `LoadBrush()`, the brush will be a special vector brush which does not support all features of the normal brushes. You can, however, convert vector brushes to raster brushes by using the [RasterizeBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RasterizeBrush_.html) function. See [Vector brushes](https://www.hollywood-mal.com/docs/html/hollywood/VectorBrushNote_.html).\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the brush.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the image shall be loaded, too. Please note that not all pictures have an alpha channel and that not all picture formats are capable of storing alpha channel information. It is suggested that you use the PNG format if you need alpha channel data. This field defaults to `False`.\n\n- `X, Y, Width, Height`: These fields can be used to load only a part of the image into the brush. This is useful if you have one big image with many different small images in it and now you want to load the small images into single brushes. Using these fields you can specify a rectangle inside the image from which Hollywood will take the graphics data for the brush.\n\n- `Hardware`: If you set this tag to `True`, Hollywood will create this brush entirely in video memory for hardware-accelerated drawing in connection with a hardware double buffer. Hardware brushes are subject to several restrictions. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V5.0)\n\n- `ScaleWidth, ScaleHeight`: These fields can be used to load a scaled version of the image. If the image driver supports scaled loading, this will give you some significant speed-up for example in case you just want to load a thumbnail-sized version of a large image. If the image driver does not support scaled loading, the full image will be loaded first before it is scaled. This is not much faster than manually scaling the image after loading. You can pass an absolute pixel value or a string containing a percent specification here. (V5.3)\n\n- `SmoothScale`: If `ScaleWidth` or `ScaleHeight` is set, you can use this item to specify whether or not Hollywood shall use anti-aliased scaling. Defaults to `False` which means no anti-aliasing. Note that anti-aliased scaling is much slower than normal scaling. (V5.3)\n\n- `Display`: If you specify the identifier of a display here, Hollywood will create a display-dependent hardware brush for you. Display-dependent hardware brushes can only be drawn to the display they belong to. This tag is only handled if the `Hardware` tag has been set to `True`. Also note that Hollywood's inbuilt display adapter does not support display-dependent hardware brushes, but plugins can install custom display adapters which support display-dependent hardware brushes. This tag defaults to the identifier of the currently active display. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this brush. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the image will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based image. If you want to load the alphachannel of an image, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the brush as a palette brush. This means that you can get and modify the brush's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette brushes also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the image file (if the image format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. A brush can only have one transparency setting!\n\nThis command is also available from the preprocessor: Use [@BRUSH](https://www.hollywood-mal.com/docs/html/hollywood/atBRUSH_.html) to preload brushes!",
    "inputsDocs": "* `id` — identifier for the brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: transparency and crop options (see above) (V2.0)",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadBrush(2, \"MyBrush.png\", {Transparency = #RED})\n```\n\nThis loads \"MyBrush.png\" as brush 2 with the color red being transparent.",
    "platforms": ["All"],
    "insertText": "LoadBrush(${1:id}, ${2:filename$})"
  },
  {
    "name": "MixBrush",
    "helpId": "MixBrush",
    "shortDescription": "mix two brushes",
    "version": "1.5",
    "synopsis": "MixBrush(brush1, brush2, level)",
    "functionDocs": "This function mixes `brush2` into `brush1` at the specified `level`. The argument `level` specifies the mixing level which ranges from 0 to 255. Alpha channel and mask data of the second brush are also taken into account.\n\nStarting with Hollywood 2.0, level can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `brush1` — source brush\n* `brush2` — brush to mix\n* `level` — mixing level (0 to 255 or percent specification)",
    "example": "```\nMixBrush(1, 2, 128)\n```\n\nThe code above mixes brush 2 into brush 1 at a mix ratio of 50% (= 128).",
    "platforms": ["All"],
    "insertText": "MixBrush(${1:brush1}, ${2:brush2}, ${3:level})"
  },
  {
    "name": "ModulateBrush",
    "helpId": "ModulateBrush",
    "shortDescription": "change brightness, saturation, and hue of brush",
    "version": "5.0",
    "synopsis": "ModulateBrush(id, brightness, saturation, hue)",
    "functionDocs": "This function can be used to change the brightness, saturation, and hue settings of a brush. For each setting, you need to pass a floating point value that describes the desired change. A value of 1.0 means no change, a value smaller than 1.0 reduces the brightness/saturation/hue, while a value greater than 1.0 enhances it.\n\nNote that if `id` specifies a palette brush, `ModulateBrush()` will just modulate the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — brush to modulate\n* `brightness` — desired brightness correction\n* `saturation` — desired saturation correction\n* `hue` — desired hue correction",
    "example": "```\nModulateBrush(1, 1.0, 2.0, 1.0)\n```\n\nThe code above increases the saturation while leaving brightness and hue untouched. The result is an image with emphasized colors, just like in a cartoon.",
    "platforms": ["All"],
    "insertText": "ModulateBrush(${1:id}, ${2:brightness}, ${3:saturation}, ${4:hue})"
  },
  {
    "name": "MoveBrush",
    "helpId": "MoveBrush",
    "shortDescription": "move a brush from a to b",
    "version": "1.0",
    "synopsis": "[handle] = MoveBrush(id, xa, ya, xb, yb[, table])",
    "functionDocs": "This function moves (scrolls) the brush specified by `id` softly from the location specified by `xa`,`ya` to the location specified by `xb`,`yb`.\n\nFurther parameters can be specified in the optional table argument. The following parameters are recognized:\n\n- `Speed`: Defines the number of pixels that the brush will be moved per draw. Therefore a higher number means higher speed. You can also specify a constant for the speed argument (`#SLOWSPEED`, `#NORMALSPEED` or `#FASTSPEED`).\n\n- `FX`: Specifies a special effect that shall be applied to the move. The following effects are currently possible:\n\n  - `#BOUNCE`: Bounces the object at move end\n\n  - `#DAMPED`: Damps the object at move end\n\n  - `#SMOOTHOUT`: Decreases object move speed towards the move end\n\n  - `#SINE`: Displays the object on a sine wave (*)\n\n  - `#BIGSINE`: Displays the object on a big sine wave (*)\n\n  - `#LOWERCURVE`: Moves the object on a curve below the move line (*)\n\n  - `#UPPERCURVE`: Moves the object on a curve above the move line (*)\n\n  Effects marked with an asterisk are only possible with horizontal moves, which means that `ya` and `yb` coordinates must be equal!\n\n- `Async`: You can use this field to create an asynchronous draw object for this move. If you pass `True` here `MoveBrush()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).",
    "inputsDocs": "* `id` — identifier of the brush to move\n* `xa` — source x position\n* `ya` — source y position\n* `xb` — destination x position\n* `yb` — destination y position\n* `table` — optional: further configuration for this move",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nMoveBrush(1, 100, 50, 0, 50, {Speed = 5})\n```\n\nMoves the brush from 100:50 to 0:50 with speed 5.\n\n---\n\n```\nMoveBrush(1, #RIGHTOUT, #BOTTOM, #LEFTOUT, #BOTTOM, {Speed = #NORMALSPEED})\n```\n\nMoves the brush from the outer right position to the outer left position with a normal speed.",
    "platforms": ["All"],
    "insertText": "MoveBrush(${1:id}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb})"
  },
  {
    "name": "OilPaintBrush",
    "helpId": "OilPaintBrush",
    "shortDescription": "apply oil paint effect to brush",
    "version": "5.0",
    "synopsis": "OilPaintBrush(id, radius)",
    "functionDocs": "This command applies an oil painting effect to the specified brush. The `radius` argument specifies the oil paint radius. The larger the radius you specify here, the longer this function needs to calculate the resulting images.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to modify\n* `radius` — oil paint effect radius",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "OilPaintBrush(${1:id}, ${2:radius})"
  },
  {
    "name": "PenArrayToBrush",
    "helpId": "PenArrayToBrush",
    "shortDescription": "convert pen array to palette brush",
    "version": "9.0",
    "synopsis": "[id] = PenArrayToBrush(id, table, width, height[, t])",
    "functionDocs": "This command creates a new palette brush from the array of pens specified in `table`. The table can be seen as a matrix containing `height` number of rows where each row has `width` number of elements, stored sequentially. The order of the pen data in this table must be as follows: Row after row in top-down format, i.e. the table starts with the first row of pens. Each row must contain exactly `width` number of pens, and there must be exactly `height` number of rows. The table must be one-dimensional, i.e. it mustn't use subtables for the individual rows but just store the pen values sequentially.\n\nThe palette that the pens should use can be set in the optional table argument `t`. The following table elements are currently recognized:\n\n- `Palette`: Set this to the id of a palette that has been created by [CreatePalette()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePalette_.html), [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html) or the [@PALETTE](https://www.hollywood-mal.com/docs/html/hollywood/atPALETTE_.html) preprocessor command. If you don't set this tag, Hollywood will use a default palette that has all colors initialized to black.\n\n- `TransparentPen`: This tag can be used to specify a pen that should appear transparent. If no pen should be made transparent, set this tag to `#NOPEN`, which is also the default.\n\nPlease note that the table that you pass to this function will usually eat lots of memory. Thus, you should set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you no longer need it. Otherwise you will waste huge amounts of memory and it could even happen that your script runs out of memory altogether. So please keep in mind that you should always set pixel array tables to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you are done with them.\n\nTo convert a palette brush to a pen array, you can use the [BrushToPenArray()](https://www.hollywood-mal.com/docs/html/hollywood/BrushToPenArray_.html) function. See [BrushToPenArray](https://www.hollywood-mal.com/docs/html/hollywood/BrushToPenArray_.html).",
    "inputsDocs": "* `id` — identifier for the new palette brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection\n* `table` — table containing an array of pens that describe the contents of the new brush\n* `width` — number of elements in each row\n* `height` — number of rows in table\n* `t` — optional: table containing further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the new palette brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\npixels = {}\nFor Local y = 0 To 479\n   For Local x = 0 To 639 Do pixels[y * 640 + x] = y \\ 2\nNext\n\nPenArrayToBrush(1, pixels, 640, 480, {Palette = #PALETTE_AGA})\npixels = Nil    ; IMPORTANT: free memory!\nDisplayBrush(1, 0, 0)\n```\n\nThe code above creates a palette brush that contains the first 240 pens from the default palette `#PALETTE_AGA`. Each palette pen uses two rows. Important: Do not forget to set the pixel array to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) when you no longer need it because otherwise it will stay in memory and pixel arrays will eat huge amounts of memory!",
    "platforms": ["All"],
    "insertText": "PenArrayToBrush(${1:id}, ${2:table}, ${3:width}, ${4:height})"
  },
  {
    "name": "PerspectiveDistortBrush",
    "helpId": "PerspectiveDistortBrush",
    "shortDescription": "apply perspective distortion to brush",
    "version": "5.0",
    "synopsis": "PerspectiveDistortBrush(id,cx1,cy1,cx2,cy2,cx3,cy3,cx4,cy4[,smooth])",
    "functionDocs": "This command can be used to apply perspective distortion to the brush specified in `id`. You have to pass 4 control points that describe a quadrangle into which the brush shall be mapped. The optional argument `smooth` can be used to enable antialiased pixel interpolation which leads to a smoother appearance but takes longer to calculate.\n\nThe control point mapping is as follows: The top-left corner of the brush is mapped to control point 1, the top-right corner is mapped to control point 2, the bottom-right corner to control point 3, and the bottom-left corner to control point 4.",
    "inputsDocs": "* `id` — brush that shall be distorted\n* `cx1` — x coordinate of control point 1\n* `cy1` — y coordinate of control point 1\n* `cx2` — x coordinate of control point 2\n* `cy2` — y coordinate of control point 2\n* `cx3` — x coordinate of control point 3\n* `cy3` — y coordinate of control point 3\n* `cx4` — x coordinate of control point 4\n* `cy4` — y coordinate of control point 4\n* `smooth` — optional: whether or not anti-aliased distortion shall be used (defaults to `False`)",
    "example": "```\nPerspectiveDistortBrush(1, 100, 0, 400, 0, 500, 300, 0, 300)\n```\n\nThe code above maps brush 1 into a trapezoid shape.",
    "platforms": ["All"],
    "insertText": "PerspectiveDistortBrush(${1:id}, ${2:cx1}, ${3:cy1}, ${4:cx2}, ${5:cy2}, ${6:cx3}, ${7:cy3}, ${8:cx4}, ${9:cy4})"
  },
  {
    "name": "PixelateBrush",
    "helpId": "PixelateBrush",
    "shortDescription": "zoom pixel cells of a brush",
    "version": "5.0",
    "synopsis": "PixelateBrush(id, cellsize)",
    "functionDocs": "This command can be used to enlarge the pixel cells of the specified brush. Every pixel in the brush will be zoomed to the size specified in the `cellsize` argument. Pixelization will start in the top-left corner of the brush.",
    "inputsDocs": "* `id` — brush to pixelate\n* `cellsize` — desired pixelization level; must be greater than 1",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "PixelateBrush(${1:id}, ${2:cellsize})"
  },
  {
    "name": "PolarDistortBrush",
    "helpId": "PolarDistortBrush",
    "shortDescription": "apply polar distortion to brush",
    "version": "5.0",
    "synopsis": "PolarDistortBrush(id[, rmax, rmin, cx, cy, start, end, smooth])",
    "functionDocs": "This command can be used to apply polar distortion to the brush specified in `id`. The optional arguments can be used to control the parameters for the polar distortion. The `rmin` and `rmax` arguments specify the minimum and maximum radii to use. `cx` and `cy` can be used to specify the center point for the distortion. Both the radius values and the center point must be specified in pixels. `start` and `end` specify the start and end angles for the polar distortion. Finally, the optional argument `smooth` can be used to enable antialiased pixel interpolation which leads to a smoother appearance but takes longer to calculate.",
    "inputsDocs": "* `id` — brush that shall be distorted\n* `rmax` — optional: maximum radius (defaults to brush diagonal divided by 2)\n* `rmin` — optional: minimum radius (defaults to 0)\n* `cx` — optional: x coordinate of center point (defaults to half of brush width)\n* `cy` — optional: y coordinate of center point (defaults to half of brush height)\n* `start` — optional: start angle (defaults to -180)\n* `end` — optional: end angle (defaults to 180)\n* `smooth` — optional: whether or not anti-aliased distortion shall be used (defaults to `False`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "PolarDistortBrush(${1:id})"
  },
  {
    "name": "QuantizeBrush",
    "helpId": "QuantizeBrush",
    "shortDescription": "reduce number of colors in brush",
    "version": "6.0",
    "synopsis": "QuantizeBrush(id[, t])",
    "functionDocs": "This function can be used to reduce colors in a brush. This is useful to create a retro palette-based-display look for your brush.\n\nStarting with Hollywood 9.0, this function uses a new syntax with an optional table argument to specify additional options. The following table tags are currently recognized:\n\n- `Colors`: This tag allows you to specify the desired number of colors for the brush. This must be a value between 1 and 256. Defaults to 256. Alternatively, you can also set the `Depth` table tag to specify the desired number of colors for the brush (see below).\n\n- `Dither`: This tag allows you to control whether or not dithering should be used. Set this to `True` to enable or to `False` to disable dithering. Defaults to `True`.\n\n- `Depth`: This tag allows you to specify the desired number of colors for the brush. This must be a value between 1 (= 2 colors) and 8 (= 256 colors). Defaults to 8. This tag is an alternative to the `Colors` tag (see above). (V9.0)\n\n- `Palette`: Set this tag to `True` if you want `QuantizeBrush()` to convert your brush into a palette brush. Note that by default `QuantizeBrush()` will not create palette brushes even though it effectively always reduces colors to a number that would fit into a palette. Still, it doesn't do so due to compatibility reasons because palette brushes weren't supported before Hollywood 9.0. So if you want `QuantizeBrush()` to create a palette brush for you, you must set this tag to `True`. Defaults to `False`. (V9.0)\n\n- `TransparentPen`: If `Palette` has been set to `True` (see above) and the brush to be quantized has a mask, all invisible pixels will be set to the number of the pen specified here so that this pen will become the transparent pen. Defaults to 0 which means that the first pen should be made transparent by default. (V9.0)\n\n- `TransparentColor`: If `Palette` has been set to `True` and the brush to be quantized has a mask, the brush's transparent pen will be set to the color you specify here. This color must be specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If this tag is not set, the transparent pen won't be set to any specific color. (V9.0)",
    "inputsDocs": "* `id` — identifier of the brush to quantize\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "example": "```\nQuantizeBrush(1, 32)\n```\n\nConvert brush 1 to a 32-color brush with dithering enabled",
    "platforms": ["All"],
    "insertText": "QuantizeBrush(${1:id})"
  },
  {
    "name": "RasterizeBrush",
    "helpId": "RasterizeBrush",
    "shortDescription": "convert vector brush to raster brush",
    "version": "5.0",
    "synopsis": "RasterizeBrush(id)",
    "functionDocs": "This function will convert the [vector brush](https://www.hollywood-mal.com/docs/html/hollywood/VectorBrushNote_.html) specified in `id` to a raster brush. Raster brushes are the normal brush type in Hollywood and they are supported by all commands of the brush library. The downside, however, is that scaling, rotation, and transformation are only possible with quality sacrifices on raster brushes.\n\nYou can find out the type of a brush by checking the `#ATTRTYPE` attribute using [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html).",
    "inputsDocs": "* `id` — vector brush to convert",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RasterizeBrush(${1:id})"
  },
  {
    "name": "ReadBrushPixel",
    "helpId": "ReadBrushPixel",
    "shortDescription": "read single pixel from brush",
    "version": "5.0",
    "synopsis": "color, trans = ReadBrushPixel(id, x, y)",
    "functionDocs": "This command reads the color and transparency states of the specified pixel from the brush specified in `id`. The color is returned in [RGB format](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) whereas the format of the `trans` value depends on the type of transparency used by the brush. If the brush has a mask, `trans` will be either 0 (invisible) or 1 (visible). If the brush has an alpha channel, then `trans` will be in the range of 0 (invisible) to 255 (visible). If the brush does not have a transparency channel, -1 is returned in `trans`.\n\nYou can also read pixels from brushes by selecting the brush as the output device using [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) and then call the [ReadPixel()](https://www.hollywood-mal.com/docs/html/hollywood/ReadPixel_.html) function. Using `ReadBrushPixel()`, however, is faster for most cases because it allows you to access color and transparency channels at the same time and you can also avoid the overhead that is generated by calling [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) and [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nNote that when using this function with a palette brush, `ReadBrushPixel()` won't return the [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) but the pen at the specified position.",
    "inputsDocs": "* `id` — identifier of the brush to use\n* `x` — x offset\n* `y` — y offset",
    "resultsDocs": "* `color` — [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) or pen at the specified location\n* `trans` — transparency state at the specified location",
    "example": "```\ncolor, trans = ReadBrushPixel(1, 100, 100)\n```\n\nReads pixel states from position 100:100 in brush 1.",
    "platforms": ["All"],
    "insertText": "ReadBrushPixel(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "ReduceAlphaChannel",
    "helpId": "ReduceAlphaChannel",
    "shortDescription": "reduce alpha channel intensity",
    "version": "6.0",
    "synopsis": "ReduceAlphaChannel(id, ratio)",
    "functionDocs": "This function can be used to reduce the intensity of the alpha channel associated with the specified brush. Every alpha pixel is multiplied by the ratio you pass in argument 2. This ratio must be between 0 and 255. A ratio of 255 means 1.0 or 100% whereas 0 means 0.0 or 0%. Thus, if you want to reduce the alpha transparency of all pixels by 50%, you would have to pass 128 in the `ratio` parameter.\n\n`ratio` can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — brush whose alpha channel should be modified\n* `ratio` — value between 0 and 255 that specifies the intensity of the reduction operation or a percent specification",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ReduceAlphaChannel(${1:id}, ${2:ratio})"
  },
  {
    "name": "RemapBrush",
    "helpId": "RemapBrush",
    "shortDescription": "remap brush colors",
    "version": "9.0",
    "synopsis": "RemapBrush(id, palid[, t])",
    "functionDocs": "This function can be used to remap the colors of the brush specified by `id` to the colors of the palette specified by `palid`. The source brush can either be a normal or a palette brush. If it is a normal brush, `RemapBrush()` will also convert it to a palette brush while remapping so the resulting brush will always be a palette brush.\n\nThe optional table argument `t` can be used to specify additional options. The following table tags are currently recognized:\n\n- `Dither`: This tag allows you to control whether or not dithering should be used. Set this to `True` to enable or to `False` to disable dithering. Defaults to `True`.\n\nNote that if the brush uses transparency, you have to use [SetTransparentPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetTransparentPen_.html) on the palette first to define a pen that should be made transparent.",
    "inputsDocs": "* `id` — identifier of the brush to remap\n* `palid` — identifier of the palette whose colors the brush should be remapped to\n* `t` — optional: table containing further arguments",
    "example": "```\nCreatePalette(1, {#BLACK, #WHITE}, {Depth = 1})\nRemapBrush(1, 1, {Dither = True})\n```\n\nConvert brush 1 to a black & white palette brush. Remapping will be done with dithering enabled.",
    "platforms": ["All"],
    "insertText": "RemapBrush(${1:id}, ${2:palid})"
  },
  {
    "name": "RemoveBrushPalette",
    "helpId": "RemoveBrushPalette",
    "shortDescription": "convert palette brush to RGB",
    "version": "9.0",
    "synopsis": "RemoveBrushPalette(id[, trans])",
    "functionDocs": "This function can be used to convert the palette brush specified by `id` into an RGB brush. This means that all brush pixels will be converted to 32-bit RGB and the palette will be removed from the brush. The optional argument `trans` allows you to specify how the brush's transparency should be converted. This can be either `#MASK` or `#ALPHACHANNEL`. If you set it to `#MASK`, which is also the default, the brush's transparent pen will be mapped to a mask. If it is set to `#ALPHACHANNEL`, the brush's transparent pen will be mapped to an alpha channel.",
    "inputsDocs": "* `id` — identifier of the brush to convert\n* `trans` — optional: desired type of brush transparency; must be either `#MASK` or `#ALPHACHANNEL`; defaults to `#MASK`",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RemoveBrushPalette(${1:id})"
  },
  {
    "name": "ReplaceColors",
    "helpId": "ReplaceColors",
    "shortDescription": "replace colors in a brush",
    "version": "1.5",
    "synopsis": "ReplaceColors(id, colors)",
    "functionDocs": "This function scans through a color array that you specify and replaces each color with another color which you also have to specify. The color array must be organized in the way: Search color 1, Replace color 1, Search color 2, Replace color 2, ....,.\n\nNote that if you pass a palette brush in `id`, you need to pass pens instead of colors in the table argument.",
    "inputsDocs": "* `id` — identifier of the brush to use\n* `colors` — color table that describes which colors (or pens) to replace",
    "example": "```\nReplaceColors(1, {#BLACK, #WHITE, #RED, #GREEN})\n```\n\nThe code changes all black pixels in brush 1 to white ones and all red pixels to green ones.",
    "platforms": ["All"],
    "insertText": "ReplaceColors(${1:id}, ${2:colors})"
  },
  {
    "name": "RGBArrayToBrush",
    "helpId": "RGBArrayToBrush",
    "shortDescription": "convert pixel array to brush",
    "version": "5.0",
    "synopsis": "[id] = RGBArrayToBrush(id, table, width, height[, transtype, invalpha])",
    "functionDocs": "This command creates a new brush from the array of RGB pixels specified in `table`. The table can be regarded as a matrix containing `height` number of rows where each row has `width` number of elements. The order of the pixel data in this table must be as follows: Row after row in top-down format, i.e. the table starts with the first row of pixels. Every row must contain exactly `width` number of pixels, and there must be at least `height` number of rows. The single pixels must be passed in the RGB format with an optional alpha value. The `transtype` argument allows you to specify the transparency type the new brush should use. This can be either `#NONE` for no transparency, `#MASK` for monochrome transparency, and `#ALPHACHANNEL` for alpha channel transparency.\n\nThe optional argument `invalpha` can be used to tell `RGBArrayToBrush()` that all alpha channel values are inverted. This means that a value of 0 means 100% visibility and a value of 255 means invisibility. Normally, it is just the other way round. Due to historical reasons, the Hollywood drawing library uses [inverted alpha values](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html), and this why they are also supported by `RGBArrayToBrush()`, although they are not the default.\n\nIf `transtype` is set to `#NONE`, the pixels' alpha values are ignored altogether and `invalpha` does not have any effect either.\n\nPlease note that the table that you pass to this function will usually eat lots of memory. Thus, you should set this table to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you no longer need it. Otherwise you will waste huge amounts of memory and it could even happen that your script runs out of memory altogether. So please keep in mind that you should always set pixel array tables to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as soon as you are done with them.\n\nTo convert a brush to a pixel array, you can use the [BrushToRGBArray()](https://www.hollywood-mal.com/docs/html/hollywood/BrushToRGBArray_.html) function.",
    "inputsDocs": "* `id` — identifier for the new brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html) selection\n* `table` — table containing an array of RGB pixels that describe the contents of the new brush; if `transtype` is set to `#MASK` or `#ALPHACHANNEL` you must also specify alpha values in the highest 8 bits\n* `width` — number of elements in each row\n* `height` — number of rows in table\n* `transtype` — optional: desired transparency setting for brush (defaults to `#NONE`)\n* `invalpha` — optional: whether to use inverted alpha values (defaults to `False` which means do not invert alpha values)",
    "resultsDocs": "* `id` — optional: identifier of the new brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\npixels = {}\ncol = #BLUE\nstp = 256 / 480\nFor Local y = 0 To 479\n   For Local x = 0 To 639 Do pixels[y * 640 + x] = col\n   col = col - stp\nNext\n\nRGBArrayToBrush(1, pixels, 640, 480)\npixels = Nil    ; IMPORTANT: free memory!\nDisplayBrush(1, 0, 0)\n```\n\nThe code above creates a color gradient from red to `#BLACK` and converts it into a brush using `RGBArrayToBrush()`. Important: Do not forget to set the pixel array to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) when you no longer need it because otherwise it will stay in memory and pixel arrays will eat huge amounts of memory!",
    "platforms": ["All"],
    "insertText": "RGBArrayToBrush(${1:id}, ${2:table}, ${3:width}, ${4:height})"
  },
  {
    "name": "RotateBrush",
    "helpId": "RotateBrush",
    "shortDescription": "rotate a brush",
    "version": "1.5",
    "synopsis": "RotateBrush(id, angle[, factorx, factory, smooth])",
    "functionDocs": "This function rotates the brush specified by `id` by the specified angle (in degrees). A positive angle rotates anti-clockwise, a negative angle rotates clockwise.\n\nStarting with Hollywood 2.5, this function can also scale the brush while rotating it (called a rot-zoom). This is done in one pass so the quality of the resulting image data is much better than if you would first call [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) and then `RotateBrush()`. If you want to have the brush scaled with the rotation, simply pass two scaling factors as factorx and factory. These two factors are floating point numbers representing a zoom percentage (1 corresponds to 100%, 0.5 to 50%, 1.5 to 150% etc.)\n\nAdditionally, you can choose to have the scaled and/or rotated graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be scaled/rotated using anti-alias.\n\nPlease note:\n\n- If you rotate a brush for instance by a 45 degree angle and your brush does not have a mask, Hollywood will automatically create a mask for this brush because the rotate operation usually leads to some unused areas in the brush. If your brush has a mask, then Hollywood will rotate this mask also.\n\n- You should not rotate a rotated brush again because this will lead to loss of data! You should always use the original brush when creating rotated versions of the brush, e.g. if you rotate a brush by 45 degrees and then rotate it back by -45 degrees, the resulting brush will not be of the same quality as the original one.\n\n- Note that for vector brushes, `RotateBrush()` will always operate on the untransformed brush. This means that any previous transformations applied to the brush using `RotateBrush()`, [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html), or [TransformBrush()](https://www.hollywood-mal.com/docs/html/hollywood/TransformBrush_.html) will be undone when calling `RotateBrush()`.",
    "inputsDocs": "* `id` — brush to rotate\n* `angle` — rotation angle in degrees\n* `factorx` — optional: scaling factor on the x-axis (defaults to 1 which means no x scaling) (V2.5)\n* `factory` — optional: scaling factor on the y-axis (defaults to 1 which means no y scaling) (V2.5)\n* `smooth` — optional: whether or not anti-aliased rotation shall be used (V2.5)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RotateBrush(${1:id}, ${2:angle})"
  },
  {
    "name": "SaveBrush",
    "helpId": "SaveBrush",
    "shortDescription": "save brush to a file",
    "version": "2.0",
    "synopsis": "SaveBrush(id, f$[, t])",
    "functionDocs": "This function saves the brush specified by `id` to the file specified by `f$`. By default, the brush will be saved as a Windows bitmap (BMP) file. This can be changed by passing a different format identifier to `SaveBrush()` (see below for details).\n\n`SaveBrush()` supports several optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `SaveBrush()`.\n\nThe following table fields are recognized by this function:\n\n- `Format`: Set this tag to the image format that should be used. This can either be one of the following constants or an image saver provided by a plugin:\n\n  - `#IMGFMT_BMP`: Windows bitmap. Hollywood's BMP saver supports RGB and palette images. `#IMGFMT_BMP` is the default format used by `SaveBrush()`.\n\n  - `#IMGFMT_PNG`: PNG format. Hollywood's PNG saver supports RGB and palette images. RGB images also can have an alpha channel, palette images can have a transparent pen. (V2.5)\n\n  - `#IMGFMT_JPEG`: JPEG format. Note that the JPEG format does not support alpha channels or palette-based graphics. The `Quality` field (see below) allows you to specify the quality level for the JPEG image (valid values are 0 to 100 where 100 is the best quality). (V4.0)\n\n  - `#IMGFMT_GIF`: GIF format. Because GIF images are always palette-based, RGB graphics have to be quantized before they can be exported as GIF. You can use the `Colors` and `Dither` tags (see below) to specify the number of palette entries to allocate for the image and whether or not dithering shall be applied. When using `#IMGFMT_GIF` with a palette brush, no quantizing will be done. `#IMGFMT_GIF` also supports palette images with a transparent pen. (V4.5)\n\n  - `#IMGFMT_ILBM`: IFF ILBM format. Hollywood's IFF ILBM saver supports RGB and palette images. Palette images can also have a transparent pen, alpha channels are unsupported for this output format. (V4.5)\n\n  Defaults to `#IMGFMT_BMP`.\n\n- `Dither`: Set to `True` to enable dithering. This field is only handled when the destination format is palette-based and the source data is in RGB format. Defaults to `False` which means no dithering.\n\n- `Depth`: Specifies the desired image depth. This is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 (= 2 colors) and 8 (= 256 colors). Defaults to 8. (V9.0)\n\n- `Colors`: This is an alternative to the `Depth` tag. Instead of a bit depth, you can pass how many colors the image shall use here. Again, this is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 and 256. Defaults to 256.\n\n- `Quality`: Here you can specify a value between 0 and 100 indicating the compression quality for lossy compression formats. A value of 100 means best quality, 0 means worst quality. This is only available for image formats that support lossy compression. Defaults to 90 which means pretty good quality.\n\n- `FillColor`: When saving an RGB image that has transparent pixels, you can specify an RGB color that should be written to all transparent pixels here. This is probably of not much practical use. Defaults to `#NOCOLOR` which means that transparent pixels will be left as they are. (V9.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nHere is an overview that shows which formats support which tags:\n\n![imgformats](https://www.hollywood-mal.com/docs/html/hollywood/img/imgformats.png)",
    "inputsDocs": "* `id` — identifier of the brush to save\n* `f$` — destination file\n* `t` — optional: table specifying further options (see above) (V9.0)",
    "example": "```\nSaveBrush(1, \"test.jpg\", {Format = #IMGFMT_JPEG, Quality = 80})\n```\n\nThe code above saves brush 1 as \"test.jpg\" using a quality of 80%.",
    "platforms": ["All"],
    "insertText": "SaveBrush(${1:id}, ${2:f$})"
  },
  {
    "name": "ScaleBrush",
    "helpId": "ScaleBrush",
    "shortDescription": "scale a brush",
    "version": "1.0",
    "synopsis": "ScaleBrush(id, width, height[, smooth])",
    "functionDocs": "This command scales the brush specified by `id` to the specified dimensions. Optionally, you can choose to have the scaled graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be scaled using anti-alias.\n\nPlease note: You should always do scale operations with the original brush. For instance, if you scale brush 1 to 12x8 and then scale it back to 640x480, you will get a messed image. Therefore you should always keep the original brush and scale only copies of it.\n\nNote that for vector brushes, `ScaleBrush()` will always operate on the untransformed brush. This means that any previous transformations applied to the brush using `ScaleBrush()`, [TransformBrush()](https://www.hollywood-mal.com/docs/html/hollywood/TransformBrush_.html), or [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html) will be undone when calling `ScaleBrush()`.\n\nNew in V2.0: You can pass `#KEEPASPRAT` as either `width` or `height`. Hollywood will calculate the size then automatically by taking the aspect-ratio of the brush into account.\n\nStarting with Hollywood 2.0, `width` and `height` can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — identifier of the brush to use as source\n* `width` — desired new width for the brush\n* `height` — desired new height for the brush\n* `smooth` — optional: whether or not anti-aliased scaling shall be used (V2.5)",
    "example": "```\nScaleBrush(1,640,480)\n```\n\nScales brush 1 to a resolution of 640x480.",
    "platforms": ["All"],
    "insertText": "ScaleBrush(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SelectAlphaChannel",
    "helpId": "SelectAlphaChannel",
    "shortDescription": "select an alpha channel as output device",
    "version": "2.0",
    "synopsis": "SelectAlphaChannel(id[, type, frame])",
    "functionDocs": "This function selects the alpha channel of the graphics object specified by `id` as the current output device. This means that all graphics data that are output by Hollywood will be drawn to this alpha channel. Alpha channels are no stand-alone objects in Hollywood; they are always attached to an image object, for example a brush or an animation.\n\nBy default, `SelectAlphaChannel()` always works with the alpha channels of brushes. However, starting with Hollywood 4.5, you can also use it to draw to the alpha channel of animations and BGPics. To do this you have to specify `#ANIM` or `#BGPIC` in the optional `type` argument. If you use `#ANIM` in the `type` argument, you have to specify the frame of the anim that you want to draw to, too. See [SelectAnim()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAnim_.html) for more information. If you specify `#BGPIC` in `type`, note that you can only modify the alpha channel of BGPics that are currently not associated with a display. Starting with Hollywood 4.7, you can also pass `#LAYER` as the `type` to modify the alpha channel of a layer. Note that if the layer is an anim layer, you will also have to specify the number of the frame to select.\n\nAlpha channels can be used to give each pixel its own transparency setting. There are 256 different transparency levels available for each pixel. An alpha channel value of 0 means that the pixel is fully transparent and an alpha channel value of 255 means that the pixel is opaque. All Hollywood graphics functions will render with a static alpha channel intensity into the alpha channel of the graphics object. You can configure this intensity using the [SetAlphaIntensity()](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html) command. Alternatively, you can set the alpha render mode to a vanilla copy mode. This is done by calling [SetAlphaIntensity()](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html) with `#VANILLACOPY` as the argument. Then, all Hollywood graphics commands which output alpha channel pixels will copy the exact alpha channel data to your brush's alpha channel. This vanilla copy mode is a new feature of Hollywood 2.5.\n\nThe color argument that several Hollywood functions (like [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html) or [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html)) expect, is superfluous when rendering to alpha channels. You only need to use [SetAlphaIntensity()](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html) when rendering to alpha channels.\n\nAlpha channels are usually used for nice background shine-through effects or for anti-aliasing jagged edges. If you do not need different transparency levels but only two choices, namely transparent pixels and opaque pixels, you should use [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) instead because it can be drawn faster. Please note that graphics objects cannot have a mask and an alpha channel. Only one transparency setting is possible. Thus, if you use this command on a graphics object that has a mask, this mask will be deleted first.\n\nIf the graphics object you specify in id does not have an alpha channel yet, it will be automatically created when you call a command that wants to draw to the alpha channel. The alpha channel created will be opaque then, i.e. every pixel will have an alpha intensity of 255 which means that it is 0% transparent. To cancel alpha channel rendering mode and return to main display output, just call the [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) function.\n\nIf you do not need an alpha channel any longer, you should use the command [DeleteAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/DeleteAlphaChannel_.html) to remove it from the brush.\n\nYou cannot use brush links with this command because the graphics data of the brush specified by `id` will be changed. It is also forbidden to call commands which change the dimensions of the brush/anim that is currently used as output device, e.g. you may not call [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) or [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) to scale the brush/anim that is currently the output device. Furthermore, it is not allowed to call `SelectAlphaChannel()` for animations that are loaded from disk. Animations must always reside completely in memory if you want to draw to their frames using `SelectAlphaChannel()`.\n\nOnly commands that output static graphics can be used when `SelectAlphaChannel()` is active. You may not call animated functions like [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectAlphaChannel()` is active.\n\nIf you are using type `#LAYER` and the specified layer is a vector layer, `SelectAlphaChannel()` will rasterize the layer to a brush layer first. See [SelectLayer](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html).",
    "inputsDocs": "* `id` — graphics object whose alpha channel shall be used as output device\n* `type` — optional: type of the graphics object specified in id; can be `#BRUSH`, `#ANIM`, `#BGPIC`, or `#LAYER` (defaults to `#BRUSH`) (V4.5)\n* `frame` — optional: animation frame to use; only required if type is set to `#ANIM` or `#LAYER` in case the specified layer is an anim layer (V4.5)",
    "example": "```\nCreateBrush(1, 256, 50, #RED)    ; create a brush of size 256x50\nSelectAlphaChannel(1)            ; alphachannel becomes output device\nFor k = 255 To 0 Step -1\n   SetAlphaIntensity(k)          ; set alpha intensity to k\n   Line(255 - k, 0, 255 - k, 49) ; draw lines with various intensities\nNext\nEndSelect                        ; make display the output device again\n\nDisplayBrush(1, #CENTER, #CENTER)\n```\n\nThis code demonstrates the 256 different transparency levels by creating a brush with the width of 256 pixels and drawing 256 lines with different transparency settings into it. The result will be a red rectangle which smoothly merges with the background picture. Please note that you need a 24-bit screen for the full eye-candy. On 15-bit and 16-bit screens there are not enough colors to display all different levels.",
    "platforms": ["All"],
    "insertText": "SelectAlphaChannel(${1:id})"
  },
  {
    "name": "SelectBrush",
    "helpId": "SelectBrush",
    "shortDescription": "select a brush as output device",
    "version": "1.5",
    "synopsis": "SelectBrush(id[, mode, combomode])",
    "functionDocs": "This function selects the brush specified by `id` as the current output device. This means that all graphics data that are drawn by Hollywood will be rendered to your brush.\n\nThe optional `mode` argument defaults to `#SELMODE_NORMAL` which means that only the color channels of the brush will be altered when you draw to it. The transparency channel of the brush (can be either a mask or an alpha channel) will never be altered. You can change this behaviour by using `#SELMODE_COMBO` in the optional `mode` argument. If you use this mode, every Hollywood graphics command that is called after `SelectBrush()` will draw into the color and transparency channel of the brush. If the brush does not have a transparency channel, `#SELMODE_COMBO` behaves the same as `#SELMODE_NORMAL`.\n\nStarting with Hollywood 5.0 you can use the optional `combomode` argument to specify how `#SELMODE_COMBO` should behave. If `combomode` is set to 0, the color and transparency information of all pixels in the source image are copied to the destination image in any case - even if the pixels are invisible. This is the default behaviour. If `combomode` is set to 1, only the visible pixels are copied to the destination image. This means that if the alpha value of a pixel in the source image is 0, i.e. invisible, it will not be copied to the destination image. Hollywood 6.0 introduces the new combomode 2. If you pass 2 in `combomode`, Hollywood will blend color channels and alpha channel of the source image into the destination image's color and alpha channels. When you draw the destination image later, it will look as if the two images had been drawn on top of each other consecutively. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes.\n\nAn alternative way to draw into the transparency channels of a brush is to do this separately using [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) or [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html). These two commands, however, will write data to the transparency channel only. They will not touch the color channel. So if you want both channels, color and transparency, to be affected, you need to use `SelectBrush()` with `mode` set to `#SELMODE_COMBO`.\n\nWhen you are finished with rendering to your brush and want your display to become the output device again, just call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nWhile `SelectBrush()` is active, it is forbidden to call commands which change the dimensions of the brush that is currently used as the output device, e.g. you may not call [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) to scale the brush that is currently the output device.\n\nOnly Hollywood commands that draw graphics directly can be used when `SelectBrush()` is active. You may not call animated functions like [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectBrush()` is active.",
    "inputsDocs": "* `id` — brush which shall be used as output device\n* `mode` — optional: rendering mode to use (see above); this can be either `#SELMODE_NORMAL` or `#SELMODE_COMBO`; defaults to `#SELMODE_NORMAL` (V4.5)\n* `combomode` — optional: mode to use when `#SELMODE_COMBO` is active (see above); defaults to 0 (V5.0)",
    "example": "```\nCreateBrush(1, 320, 256)\nSelectBrush(1)\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 256, #RED)\nEndSelect()\nMoveBrush(1, #CENTER, #BOTTOMOUT, #CENTER, #TOPOUT, 10)\n```\n\nThe above code creates a 320x256 brush, draws a red rectangle into it and then scrolls the rectangle on the screen. This is very abstract example. You can of course do a lot of more with this command, just have a look at the examples supplied with the Hollywood distribution. They use `SelectBrush()` in more advanced contexts.",
    "platforms": ["All"],
    "insertText": "SelectBrush(${1:id})"
  },
  {
    "name": "SelectMask",
    "helpId": "SelectMask",
    "shortDescription": "select a mask as output device",
    "version": "2.0",
    "synopsis": "SelectMask(id[, type, frame])",
    "functionDocs": "This function selects the mask of the graphics object specified by `id` as the current output device. This means that all graphics data that are output by Hollywood will be drawn to this mask. Masks are no stand-alone objects in Hollywood; they are always connected to an image object, for example a brush or an animation.\n\nBy default, `SelectMask()` always works with the masks of brushes. However, starting with Hollywood 4.5, you can also use it to draw to the masks of animations and BGPics. To do this you have to specify `#ANIM` or `#BGPIC` in the optional `type` argument. If you specify `#ANIM` in `type`, you have to specify the frame of the animation that you want to draw to, too. See [SelectAnim()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAnim_.html) for more information. If you specify `#BGPIC` in `type`, note that you can only modify the masks of BGPics that are currently not associated with a display. Starting with Hollywood 4.7, you can also pass `#LAYER` as the `type` to modify the mask of a layer. Note that if the layer is an anim layer, you will also have to specify the number of the frame to select.\n\nMasks are used to control the transparency of a graphics object. They do not carry any color information. Every pixel in a mask can only have two different states: 1, which means that this pixel is visible and 0, which means that the pixel is invisible. Therefore you need to tell Hollywood whether or not the drawing commands should draw visible pixels (1) or invisible pixels (0) to the mask. This is done by using the [SetMaskMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetMaskMode_.html) command. The color argument that several Hollywood functions (like [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html) or [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html)) expect, is superfluous when rendering to masks. You only need to use SetMaskMode().\n\nIf the graphics object you specify in id does not have a mask yet, it will be automatically created when you call a command that wants to draw to the mask. If a mask is created by `SelectMask()`, it will initially be fully opaque.\n\nTo cancel mask rendering mode and return to main display output, just call the [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) function.\n\nIf you do not need a mask any longer, you can remove it from a brush by calling [SetBrushTransparency()](https://www.hollywood-mal.com/docs/html/hollywood/SetBrushTransparency_.html) with the argument `#NOTRANSPARENCY`. Or simply use [DeleteMask()](https://www.hollywood-mal.com/docs/html/hollywood/DeleteMask_.html).\n\nYou cannot use brush links with this command because the graphics data of the brush specified by `id` will be changed. It is also forbidden to call commands which change the dimensions of the brush/anim that is currently used as output device, e.g. you may not call [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) or [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) to scale the brush/anim that is currently the output device. Furthermore, it is not allowed to call `SelectMask()` for animations that are loaded from disk. Animations must always reside completely in memory if you want to draw to their frames using `SelectMask()`.\n\nOnly commands that output graphics directly can be used after `SelectMask()`. You may not call animated functions like [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectMask()` is active.\n\nPlease note that graphics objects cannot have a mask and an alpha channel. Only one transparency setting is possible. Thus, if you use this command on an object that already has an alpha channel, this alpha channel will be deleted.\n\nIf you are using type `#LAYER` and the specified layer is a vector layer, `SelectMask()` will rasterize the layer to a brush layer first. See [SelectLayer](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html).",
    "inputsDocs": "* `id` — graphics object whose mask shall be used as output device\n* `type` — optional: type of the graphics object specified in id; can be `#BRUSH`, `#ANIM`, `#BGPIC`, or `#LAYER` (defaults to `#BRUSH`) (V4.5)\n* `frame` — optional: animation frame to use; only required if type is set to `#ANIM` or if `#LAYER` is used on an anim layer (V4.5)",
    "example": "```\nw = GetAttribute(#BRUSH, 1, #ATTRWIDTH)\nh = GetAttribute(#BRUSH, 1, #ATTRHEIGHT)\n\nSetFillStyle(#FILLCOLOR)\nSelectMask(1)               ; select mask as output device\nSetMaskMode(#MASKINVISIBLE) ; all calls will draw invisible pixels now\nCls                         ; clear all pixels\nSetMaskMode(#MASKVISIBLE)   ; all calls will draw visible pixels now\nBox(0, 0, w, h, 0, 20)      ; draw a rectangle with rounded edges\nEndSelect                   ; select display as output device again\n```\n\nThe code above renders a rectangle with rounded edges to the mask of brush 1. When you display brush 1 now, it will appear with rounded edges.",
    "platforms": ["All"],
    "insertText": "SelectMask(${1:id})"
  },
  {
    "name": "SepiaToneBrush",
    "helpId": "SepiaToneBrush",
    "shortDescription": "apply sepia-tone effect to brush",
    "version": "5.0",
    "synopsis": "SepiaToneBrush(id, level)",
    "functionDocs": "This command can be used to apply a sepia-tone effect to the specified brush. The sepia-tone effect tries to simulate the look of old photographs. The second argument controls the intensity of the sepia-toning and can be any value between 0 and 255, or a percentage specification inside a string. Usually, a value around 204 is used (= 80%) for the best looks.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to sepia-tone\n* `level` — desired sepia-toning level (0 to 255, or a string containing a percentage specification)",
    "example": "```\nSepiaToneBrush(1, \"80%\")\n```\n\nThe code above applies a sepia-tone effect to brush 1 using an intensity of 80%.",
    "platforms": ["All"],
    "insertText": "SepiaToneBrush(${1:id}, ${2:level})"
  },
  {
    "name": "SetAlphaIntensity",
    "helpId": "SetAlphaIntensity",
    "shortDescription": "define intensity for alpha rendering",
    "version": "2.0",
    "synopsis": "SetAlphaIntensity(level)",
    "functionDocs": "This function allows you to specify the level of transparency all graphics functions shall use when they render into a brush's alpha channel (when [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html) is active). The transparency level must be in the range of 0 to 255, where 0 means 100% transparency and 255 means no transparency. The intensity you specify here will be used by all graphics functions of Hollywood instead of a color. The default alpha intensity is 128.\n\nLevel can also be a string containing a percent specification, e.g. \"50%\".\n\nPlease note that this is just the other way round from [SetLayerTransparency()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerTransparency_.html) where 0 means no transparency and 255 means full transparency.\n\nSee [SelectAlphaChannel](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html).\n\nNew in V2.5: You can also specify the special constant `#VANILLACOPY` as the level argument. If you do this, Hollywood will enable the new vanilla copy mode. This means that all graphics commands which render alpha channel pixels will copy these pixels directly to your brush's alpha channel. For instance, if you select an alpha channel of a brush and then use [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) to draw anti-aliased text, Hollywood will render the exact alpha channel data of the anti-aliased text to your brush's alpha channel where you can process it further. If `#VANILLACOPY` is active and you draw graphics to the alpha channel that do not have any alpha data, Hollywood will write an alpha intensity of 255 (i.e. fully visible) into your alpha channel.",
    "inputsDocs": "* `level` — desired transparency level (0 to 255 or percent specification) or: special constant `#VANILLACOPY` for special vanilla copy mode (V2.5)",
    "example": "See [SelectAlphaChannel](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html)",
    "platforms": ["All"],
    "insertText": "SetAlphaIntensity(${1:level})"
  },
  {
    "name": "SetBrushDepth",
    "helpId": "SetBrushDepth",
    "shortDescription": "set brush palette depth",
    "version": "9.0",
    "synopsis": "SetBrushDepth(id, depth[, t])",
    "functionDocs": "This function sets the depth of the palette of the brush specified by `id` to the depth specified in `depth`. `depth` must be a bit depth ranging from 1 (= 2 colors) to 8 (= 256 colors). See [Palette overview](https://www.hollywood-mal.com/docs/html/hollywood/PaletteOverview_.html). Note that if the specified depth is less than that of the pixel data attached to the palette, the pixel data will be remapped to match the new depth.\n\nStarting with Hollywood 10.0, `SetBrushDepth()` accepts an optional table argument which can contain the following tags:\n\n- `Remap`: If this tag is set to `False`, out-of-range pens will not be remapped to existing pens but instead they will simply be set to the pen specified in the `ClipPen` tag (see below), i.e. no remapping will take place. Note that `Remap` is only effective when reducing colors. If the new depth has more pens than the old depth, `Remap` won't do anything. (V10.0)\n\n- `ClipPen`: This is only used in case the `Remap` tag is set to `False` (see above). In that case, out-of-range pens will not be remapped to existing pens but will simply be set to the pen specified in the `ClipPen` tag, i.e. no remapping will take place. Note that `ClipPen` is only effective when reducing colors. If the new depth has more pens than the old depth, `ClipPen` won't do anything. (V10.0)",
    "inputsDocs": "* `id` — identifier of brush to modify\n* `depth` — desired new palette depth (ranging from 1 to 8)\n* `t` — optional: table argument containing further options (see above) (V10.0)",
    "example": "```\nSetBrushDepth(1, 8)\n```\n\nThe code above changes the depth of brush 1's palette to 8 (= 256 colors).",
    "platforms": ["All"],
    "insertText": "SetBrushDepth(${1:id}, ${2:depth})"
  },
  {
    "name": "SetBrushPalette",
    "helpId": "SetBrushPalette",
    "shortDescription": "change brush palette",
    "version": "9.0",
    "synopsis": "SetBrushPalette(id, palid[, t])",
    "functionDocs": "This function replaces the palette of the brush specified by `id` with the palette specified by `palid`. The optional table argument `t` allows you to specify some further options. The following tags are currently supported by the optional table argument `t`:\n\n- `Remap`: If this is set to `True`, the pixels of the brush will be remapped to match the colors of the new palette as closely as possible. By default, there will be no remapping and the actual pixel data of the brush will remain untouched. If you want remapping, set this tag to `True` but be warned that remapping all pixels will of course take much more time than just setting a new palette without remapping. Defaults to `False`.\n\n- `Dither`: If the `Remap` tag (see above) has been set to `True`, you can use the `Dither` tag to specify whether or not dithering should be used. Defaults to `True` which means dithering should be used.\n\n- `CopyCycleTable`: Palettes can have a table containing color cycling information. If you set this tag to `True`, this cycle table will be copied to the brush as well. Defaults to `False`.",
    "inputsDocs": "* `id` — identifier of brush to use\n* `palid` — identifier of palette to copy to brush\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetBrushPalette(${1:id}, ${2:palid})"
  },
  {
    "name": "SetBrushPen",
    "helpId": "SetBrushPen",
    "shortDescription": "change brush palette pen",
    "version": "9.0",
    "synopsis": "SetBrushPen(id, pen, color)",
    "functionDocs": "This function sets the color of the pen specified by `pen` to the color specified by `color` in the palette of the brush specified by `id`.",
    "inputsDocs": "* `id` — identifier of brush\n* `pen` — pen you want to modify (starting from 0)\n* `color` — new color for the pen, must be specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\nSetBrushPen(1, 0, #RED)\n```\n\nThe code above sets pen 0 to red in the palette of brush 1.",
    "platforms": ["All"],
    "insertText": "SetBrushPen(${1:id}, ${2:pen}, ${3:color})"
  },
  {
    "name": "SetBrushTransparency",
    "helpId": "SetBrushTransparency",
    "shortDescription": "define transparent color of a brush",
    "version": "1.5",
    "synopsis": "SetBrushTransparency(id, col)",
    "functionDocs": "This function makes the color specified by `col` transparent in the brush with the number `id`. This is done by creating a mask for the brush. `SetBrushTransparency()` will scan through all pixels of the brush and mask out all pixels that have the specified color. The mask that is created by this function is not automatically updated when you call [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) to modify pixels of your brush. Hence, it is necessary to call `SetBrushTransparency()` again after a call to [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html), so that the mask can be updated, too.\n\nYou can also use this function to remove a mask from a brush. Just specify `#NOTRANSPARENCY` as the color.\n\nNote that this function cannot be used with palette brushes. You can use [SetTransparentPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetTransparentPen_.html) to change the transparent pen in a palette brush. See [SetTransparentPen](https://www.hollywood-mal.com/docs/html/hollywood/SetTransparentPen_.html).",
    "inputsDocs": "* `id` — source brush id\n* `col` — color to be displayed transparently or `#NOTRANSPARENCY` to kill the brush's mask",
    "example": "```\nCreateBrush(1, 320, 256)\nSelectBrush(1)\nSetFillStyle(#FILLCOLOR)\nCircle(0, 0, 100, #RED)\nEndSelect()\nSetBrushTransparency(1, #BLACK)\nMoveBrush(1, #CENTER, #BOTTOMOUT, #CENTER, #TOPOUT, 10)\n```\n\nThe above code creates a brush, draws a filled circle on it and then sets the background color black as transparent color. After that it scrolls the circle through the screen. It is important that you call `SetBrushTransparency()` when output is done, i.e. after calling [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).",
    "platforms": ["All"],
    "insertText": "SetBrushTransparency(${1:id}, ${2:col})"
  },
  {
    "name": "SetBrushTransparentPen",
    "helpId": "SetBrushTransparentPen",
    "shortDescription": "set transparent pen of brush palette",
    "version": "9.0",
    "synopsis": "SetBrushTransparentPen(id, pen)",
    "functionDocs": "This function sets the transparent pen of the palette of the brush specified by `id` to the pen specified in `pen`. Pens are counted from 0.",
    "inputsDocs": "* `id` — identifier of brush to use\n* `pen` — desired transparent pen (starting from 0)",
    "example": "```\nSetBrushTransparentPen(1, 4)\n```\n\nThe code makes pen 4 in the palette of brush 1 transparent.",
    "platforms": ["All"],
    "insertText": "SetBrushTransparentPen(${1:id}, ${2:pen})"
  },
  {
    "name": "SetMaskMode",
    "helpId": "SetMaskMode",
    "shortDescription": "define rendering mode for masks",
    "version": "2.0",
    "synopsis": "SetMaskMode(mode)",
    "functionDocs": "This function can be used to define the rendering mode when [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) is active. The argument mode can either be `#MASKVISIBLE` or `#MASKINVISIBLE`. The default is `#MASKVISIBLE`. If you select the visible mode, all graphics commands will draw visible pixels into the mask, otherwise invisible pixels will be drawn. Obviously, a mask does not carry any color information but only those two flags per pixel (visible or invisible).\n\nAs of Hollywood 4.0, the following new mask modes are supported:\n\n- `#MASKVANILLACOPY`: Masking data of the source image will be copied exactly to the destination.\n\n- `#MASKAND`: Masking data of the source image will be copied to the destination mask using a logical AND operation on each pixel.\n\n- `#MASKOR`: Masking data of the source image will be copied to the destination mask using a logical OR operation on each pixel.\n\n- `#MASKXOR`: Masking data of the source image will be copied to the destination mask using a logical XOR operation on each pixel.\n\nBelow is a table summing up the different mask modes. Please note that the mask mode `#MASKVISIBLE`, `#MASKINVISIBLE`, and `#MASKVANILLACOPY` are independent of the destination mask data. Destination mask data is only taken into account by the `#MASKAND`, `#MASKOR`, and `#MASKXOR` modes.\n\n![maskmodes](https://www.hollywood-mal.com/docs/html/hollywood/img/maskmodes.png)\n\nSee [SelectMask](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html).",
    "inputsDocs": "* `mode` — mask rendering mode (see above)",
    "example": "See [SelectMask](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html)",
    "platforms": ["All"],
    "insertText": "SetMaskMode(${1:mode})"
  },
  {
    "name": "SharpenBrush",
    "helpId": "SharpenBrush",
    "shortDescription": "apply sharpening filter to brush",
    "version": "5.0",
    "synopsis": "SharpenBrush(id[, radius])",
    "functionDocs": "This command sharpens the appearance of the specified brush. The optional argument `radius` can be used to specify the sharpening radius. The larger the radius you specify here, the longer this function needs to apply the sharpening effect. If you do not specify the optional argument, this command will automatically choose an appropriate radius.\n\nNote that this function cannot be used with palette brushes.",
    "inputsDocs": "* `id` — brush to sharpen\n* `radius` — optional: sharpening radius (defaults to 0 which means that the radius will be chosen automatically)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SharpenBrush(${1:id})"
  },
  {
    "name": "SolarizeBrush",
    "helpId": "SolarizeBrush",
    "shortDescription": "apply solarization effect to brush",
    "version": "5.0",
    "synopsis": "SolarizeBrush(id, level)",
    "functionDocs": "This command can be used to apply a solarization effect to the specified brush. The solarization effect tries to simulate the look of photographic film exposed to light. The second argument controls the intensity of the solarization effect and can be any value between 0 and 255, or a percentage specification inside a string.\n\nNote that if `id` specifies a palette brush, `SolarizeBrush()` will just solarize the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — brush to solarize\n* `level` — desired solarization level (0 to 255, or a string containing a percentage specification)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SolarizeBrush(${1:id}, ${2:level})"
  },
  {
    "name": "SwirlBrush",
    "helpId": "SwirlBrush",
    "shortDescription": "apply swirl effect to brush",
    "version": "5.0",
    "synopsis": "SwirlBrush(id, degrees)",
    "functionDocs": "This command applies a swirl effect to the specified brush. The brush will be swirled around its center point by the specified amount of degrees. This can range from 0 for no swirling to 360 for the most dramatic swirling effect.",
    "inputsDocs": "* `id` — brush to swirl\n* `degrees` — desired swirl level (can be from 0 to 360)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SwirlBrush(${1:id}, ${2:degrees})"
  },
  {
    "name": "TintBrush",
    "helpId": "TintBrush",
    "shortDescription": "tint brush",
    "version": "1.5",
    "synopsis": "TintBrush(id, color, level)",
    "functionDocs": "This function tints the brush specified by `id` with the [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) specified by `color` at a level which ranges from 0 to 255.\n\nStarting with Hollywood 2.0, `level` can also be a string containing a percent specification, e.g. \"50%\".\n\nNote that if `id` specifies a palette brush, `TintBrush()` will just tint the palette colors which makes this function really fast when used with palette brushes.",
    "inputsDocs": "* `id` — identifier of the brush to tint\n* `color` — a [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) to use for tinting\n* `level` — tint level (0 to 255 or percent specification)",
    "example": "```\nTintBrush(1, #RED, 128)\n```\n\nThe code above gives brush number 1 a red look.",
    "platforms": ["All"],
    "insertText": "TintBrush(${1:id}, ${2:color}, ${3:level})"
  },
  {
    "name": "TransformBrush",
    "helpId": "TransformBrush",
    "shortDescription": "apply affine transformation to a brush",
    "version": "4.5",
    "synopsis": "TransformBrush(id, sx, rx, ry, sy[, smooth])",
    "functionDocs": "This function can be used to apply affine transformation to a brush. You have to pass a 2x2 transformation matrix to this function that will define how each pixel in the brush will be transformed. This function is useful if you want to apply rotation and scaling at the same time. Of course, you could do this with calls to [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) and then [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html), but this would lead to quality losses. If you do the transformation using `TransformBrush()` instead, everything will be done in a single run.\n\nThe 2x2 transformation matrix consists of four floating point factors:\n\n- `sx`: Specifies the amount of scaling on the x axis. This must not be zero. If it is negative, the image is flipped on the y axis.\n\n- `rx`: Specifies the amount of rotation on the x axis. This can be 0.\n\n- `ry`: Specifies the amount of rotation on the y axis. This can be 0.\n\n- `sy`: Specifies the amount of scaling on the y axis. This must not be zero. If it is negative, the image is flipped on the x axis.\n\nThe identity matrix is defined as\n\n```\n( 1  0 )\n( 0  1 )\n```\n\nIf you pass this matrix, then no transformation will be applied because there is no rotation and no scaling defined. I.e. if Hollywood applied this matrix to every pixel in your brush, the result would be just a copy of the brush. But of course, if `TransformBrush()` detects that you passed an identity matrix, it will return immediately and do nothing.\n\nThe optional argument `smooth` can be set to `True` if Hollywood shall use interpolation during the transformation. This yields results that look better but interpolation is quite slow.\n\nPlease note: You should always do transformation operations using the original brush. For instance, if you transform brush 1 to 12x8 pixels and then transform it back to 640x480, you will get a messed image. Therefore you should always keep the original brush and transform only copies of it.\n\nNote that for vector brushes, `TransformBrush()` will always operate on the untransformed brush. This means that any previous transformations applied to the brush using `TransformBrush()`, [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html), or [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html) will be undone when calling `TransformBrush()`.",
    "inputsDocs": "* `id` — identifier of the brush to be transformed\n* `sx` — scale x factor; must never be 0\n* `rx` — rotate x factor\n* `ry` — rotate y factor\n* `sy` — scale y factor; must never be 0\n* `smooth` — optional: whether or not affine transformation should use interpolation",
    "example": "```\nangle = Rad(45)    ; convert degrees to radians\nTransformBrush(1, Cos(angle), Sin(angle), -Sin(angle), Cos(angle))\n```\n\nThe code above rotates brush number 1 by 45 degrees using a 2x2 transformation matrix.",
    "platforms": ["All"],
    "insertText": "TransformBrush(${1:id}, ${2:sx}, ${3:rx}, ${4:ry}, ${5:sy})"
  },
  {
    "name": "TrimBrush",
    "helpId": "TrimBrush",
    "shortDescription": "remove blank spaces from a brush",
    "version": "4.6",
    "synopsis": "left, top = TrimBrush(id)",
    "functionDocs": "This command will remove all bordering blank spaces from the specified brush. If the specified brush does not have a mask or an alpha channel, this function does nothing. `TrimBrush()` will return the number of columns removed from the left side as well as the number of rows removed from the top side of the brush. You can calculate the right/bottom trim values on your own then.",
    "inputsDocs": "* `id` — brush to trim",
    "resultsDocs": "* `left` — number of columns removed from the left\n* `top` — number of rows removed from the top",
    "example": "```\nCreateBrush(1, 640, 480, #BLACK, {Mask = True, Clear = True})\nSelectBrush(1, #SELMODE_COMBO)\nSetFillStyle(#FILLCOLOR)\nBox(#CENTER, #CENTER, 100, 100, #RED)\nEndSelect\nTrimBrush(1)\n```\n\nThe code above will create a 640x480 brush, draw a 100x100 red rectangle to it and then trim it down to 100x100 because all borders are blank.",
    "platforms": ["All"],
    "insertText": "TrimBrush(${1:id})"
  },
  {
    "name": "WaterRippleBrush",
    "helpId": "WaterRippleBrush",
    "shortDescription": "apply water ripple effect to brush",
    "version": "5.0",
    "synopsis": "WaterRippleBrush(id[, wavelength, amplitude, phase, cx, cy])",
    "functionDocs": "This command can be used to apply a water ripple effect to the specified brush. The five optional arguments allow you to control the parameters of the water ripple effect. `Wavelength`, `amplitude`, and `phase` control the look of the ripples, whereas the `cx` and `cy` arguments can be used to specify the center point of the ripple. This point must be specified as a floating point value ranging from 0.0 (left/top) to 1.0 (right/bottom). The center of the brush is thus at position 0.5/0.5.",
    "inputsDocs": "* `id` — brush to apply water ripples to\n* `wavelength` — optional: desired wavelength of the ripple (defaults to 32)\n* `amplitude` — optional: desired ripple amplitude (defaults to 1)\n* `phase` — optional: desired ripple phase (defaults to 0)\n* `cx` — optional: x center point of ripple (defaults to 0.5)\n* `cy` — optional: y center point of ripple (defaults to 0.5)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "WaterRippleBrush(${1:id})"
  },
  {
    "name": "WriteBrushPixel",
    "helpId": "WriteBrushPixel",
    "shortDescription": "write single pixel to brush",
    "version": "5.0",
    "synopsis": "WriteBrushPixel(id, x, y, color[, trans])",
    "functionDocs": "This command writes the specified [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) to the brush passed in `id` at the position specified in the first two arguments. If the optional argument `trans` is specified and the brush has a mask or an alpha channel, then the value specified in the optional argument is written to the transparency channel of the brush. If the brush has a mask, `trans` may be set to 0 or 1, and if the brush has an alpha channel, then `trans` must be in the range of 0 to 255.\n\nYou can also write pixels to brushes by selecting the brush as the output device using [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) and then call the [Plot()](https://www.hollywood-mal.com/docs/html/hollywood/Plot_.html) function. Using `WriteBrushPixel()`, however, is faster for most cases because it allows you to modify color and transparency channels at the same time and you can also avoid the overhead that is generated by calling [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) and [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nNote that when `id` specifies a palette brush, `color` must not be an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) but a pen value.",
    "inputsDocs": "* `id` — identifier of the brush to use\n* `x` — x offset\n* `y` — y offset\n* `color` — [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) color or pen to write to brush\n* `trans` — optional: value to copy to the transparency channel",
    "example": "```\nWriteBrushPixel(1, 100, 100, #RED)\n```\n\nPlots a red pixel at position 100:100 in brush 1.",
    "platforms": ["All"],
    "insertText": "WriteBrushPixel(${1:id}, ${2:x}, ${3:y}, ${4:color})"
  }
]
