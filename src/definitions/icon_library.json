[
  {
    "name": "idx = AddIconImage",
    "helpId": "AddIconImage",
    "shortDescription": "add image to icon",
    "version": "8.0",
    "synopsis": "AddIconImage(id, table)",
    "functionDocs": "This function can be used to add a new image to the icon specified by `id`. The image must be specified in the `table` parameter which must be set to a table that recognizes the following fields:\n\n- `Type`: This tag allows you to set the source type of the image you wish to add to the icon. This can be `#BRUSH` if you want to add a brush, or `#FILE` if you would like to add an image from an external file source. The default is `#BRUSH`. Note that that default is different to the default used by the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command, which is `#FILE`.\n\n- `Image`: This tag specifies the actual image source and must be set. If `Type` has been set to `#BRUSH`, you have to set this tag to the identifier of a brush you want to add to the icon. Otherwise, `Image` needs to be set to the path of an image file that should be added to the icon. The image file may be in any of the image file formats supported by Hollywood. Note that if the image file specified here has an alpha channel, the alpha channel data is loaded automatically. Also note that in every icon, each image size must only be used once, i.e. it is not possible to add two 48x48 images to a single icon. There can only be one image for each size in every icon. Also note that it's not possible to add a vector graphics image to an icon because vector icons must only contain a single image. See [CreateIcon](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html).\n\n- `SelImage`: This tag allows you to include an additional image that should be used as a selected version of the image specified in `Image`. This tag is optional. If you set it, the image specified here must be of exactly the same size as the one specified in `Image`. Besides that, `SelImage` is used in the very same way as `Image`, i.e. it depends on the image type set in `Type` what you have to pass here, either a brush identifier or a path to an external image file.\n\n- `Standard`: This tag allows you to set the image that is about to be added as the standard size for the icon. Setting a standard size is important in some contexts, so that Hollywood knows which image to pick for higher resolutions, e.g. if you designate a 64x64 image inside an icon as the standard size, Hollywood knows to pick the 128x128 image in case the monitor's resolution uses a DPI setting that is twice as high as the normal setting. Obviously, there can be only one standard image inside every icon, so if there already is a standard image in the icon, an error is generated.\n\n`AddIconImage()` returns the index where the image has been added inside the icon. Note that this isn't necessarily the last index in the icon because the individual images inside icons are sorted by their width in ascending the order. The indices returned by `AddIconImage()` start at 1.\n\nTo remove an image from an icon, use the [RemoveIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveIconImage_.html) function.",
    "inputsDocs": "* `id` — identifier of the icon to use\n* `table` — table describing the image to be added to the icon (see above)",
    "resultsDocs": "* `idx` — index where the image has been added (starting at 1)",
    "example": "```\nAddIconImage(1, {Image = \"ic16x16.png\"})\n```\n\nThe code above adds the image file \"ic16x16.png\" to icon 1.",
    "platforms": ["All"],
    "insertText": "AddIconImage(${1:id}, ${2:table})"
  },
  {
    "name": "ChangeApplicationIcon",
    "helpId": "ChangeApplicationIcon",
    "shortDescription": "change docky icon",
    "version": "6.0",
    "synopsis": "ChangeApplicationIcon(id1[, id2, type])",
    "functionDocs": "This function can be used to change your application's icon in AmiDock at runtime. You have to pass at least one brush to this function. If you pass a second brush in the optional argument, then this brush will be used as the icon's second state. Both brushes must have the same dimensions. For the best visual appearance, you should only use brushes with alpha channel transparency with this function.\n\nPlease note that only standard dockies support two state icons in AmiDock. If your application is represented by an app docky in AmiDock, you may only specify one image here. See [AmiDock information](https://www.hollywood-mal.com/docs/html/hollywood/AmiDockInfo_.html).\n\nAlso note that changing the application icon of standard dockies causes a clearly visible relayout of AmiDock and thus is not apt to display animations in AmiDock. If you want to change the icon in a smooth way, you need to use an app docky. See [AmiDock information](https://www.hollywood-mal.com/docs/html/hollywood/AmiDockInfo_.html).\n\nStarting with Hollywood 9.0, you can also use Hollywood icons with `ChangeApplicationIcon()`. To do that, you have to pass `#ICON` in the optional `type` argument. In that case, `id1` needs to be the identifier of an icon that should be used. If `type` has been set to `#ICON`, the `id2` parameter will be ignored. In case of `#ICON`, the `id2` parameter is unnecessary because in contrast to brushes, Hollywood icons can contain images for multiple states so `ChangeApplicationIcon()` can simply use the selected image stored in the icon.\n\nThe initial icon for your application in AmiDock can be specified using the [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) preprocessor command or the `DockyBrush` tag of the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command.\n\nPlease note that this function can only be used if you have set the `RegisterApplication` tag in [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) to `True`. See [OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html).",
    "inputsDocs": "* `id1` — brush or icon that should replace the current docky icon's normal state\n* `id2` — optional: brush that should replace the current docky icon's selected state\n* `type` — optional: type of the object passed in `id1` (must be either `#BRUSH` or `#ICON`, defaults to `#BRUSH`) (V9.0)",
    "resultsDocs": "none",
    "platforms": ["AmigaOS 4"],
    "insertText": "ChangeApplicationIcon(${1:id1})"
  },
  {
    "name": "CreateIcon",
    "helpId": "CreateIcon",
    "shortDescription": "create an icon",
    "version": "8.0",
    "synopsis": "[id] = CreateIcon(id, table)",
    "functionDocs": "This function can be used to create an icon from a collection of individual image files or brushes. You have to pass the desired identifier for the new icon in the `id` parameter. `If` you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, `CreateIcon()` will automatically choose an identifier for this icon and return it to you. In Hollywood, an icon is a collection of the same image in different sizes and color depths.\n\nBy using individually designed images for each size instead of just scaling one and the same image to each size, a better quality is achieved, especially when it comes to smaller image sizes, which look much better when they are specifically designed for their resolution. Typical sizes for the individual images within an icon are 16x16, 24x24, 32x32, 48x48, 64x64, 96x96, 128x128, 256x256, and 512x512, but they can also be completely arbitrary. The advantage of having the same image in different sizes in an icon is that Hollywood can choose an appropriate size depending on the screen resolution.\n\nFurthermore, images inside Hollywood icons can also be specifically designed for different color depths. For example, you can provide 24x24 images in various color depths, e.g. in 256 colors (8 bits) and in true color with alpha channel (32 bits). Thus, it is possible to have images of the same size inside an icon as long as they differ in their color depth. This once again gives Hollywood the advantage of choosing the best image from an icon for a certain screen resolution and color depth.\n\nFinally, each image inside an icon set can have two different states: normal and selected. Normally, you only ever need the normal state, but on AmigaOS and compatibles the selected state is sometimes used as well.\n\nOn top of the identifier for the new icon that is to be passed in `id`, you also have to pass a table in the `table` parameter to `CreateIcon()`. This table must contain a number of subtables, one for each image size you wish to add to the icon.\n\nThe individual subtables can use the following tags:\n\n- `Type`: This tag allows you to set the source type of the image you wish to add to the icon. This can be `#BRUSH` if you want to add a brush, or `#FILE` if you would like to add an image from an external file source. The default is `#BRUSH`. Note that that default is different to the default used by the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command, which is `#FILE`.\n\n- `Image`: This tag specifies the actual image source and must be set in every subtable. If `Type` has been set to `#BRUSH`, you have to set this tag to the identifier of a brush you want to add to the icon. The brush can be an RGB or palette brush. Otherwise, `Image` needs to be set to the path of an image file that should be added to the icon. The image file may be in any of the image file formats supported by Hollywood. Note that if the image file specified here has an alpha channel, the alpha channel data is loaded automatically. If it is a palette image and the `LoadPalette` tag is set to `True` (see below), the image's transparent pen will also be loaded automatically. Also note that in every icon, each image size must only be used once for each color depth, i.e. it is not possible to add two 48x48 images that use the same color depth to a single icon. There can only be one image for each size and color depth in every icon. Note that if the image you specify here is in a vector graphics format, i.e. either a vector brush or a file in a vector image format, you mustn't pass any other images because in the case of vector graphics, one image is used for all sizes and Hollywood will automatically render it to all sizes it needs. So if you use vector instead of raster graphics, there must only be one subtable in the table you pass to `CreateIcon()`.\n\n- `SelImage`: This tag allows you to include an additional image that should be used as a selected version of the image specified in `Image`. This tag is optional. If you set it, the image specified here must be of exactly the same size as the one specified in `Image`. Besides that, `SelImage` is used in the very same way as `Image`, i.e. it depends on the image type set in `Type` what you have to pass here, either a brush identifier or a path to an external image file.\n\n- `Standard`: This tag allows you to set the image specified in this subtable as the standard size for the icon. Setting a standard size is important in some contexts, so that Hollywood knows which image to pick for higher resolutions, e.g. if you designate a 64x64 image inside an icon as the standard size, Hollywood knows to pick the 128x128 image in case the monitor's resolution uses a DPI setting that is twice as high as the normal setting. Obviously, there can be only one standard image inside every icon, so setting this tag to `True` twice will result in an error. Also note that it is not necessary to declare a standard icon size, but for many use cases it is recommended to do it.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load the image files specified in `Image` and `SelImage`. If specified, this must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). Obviously, this tag is only used when `Type` is set to `#FILE`.\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the files specified in `Image` and `SelImage`. If specified, this must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). Obviously, this tag is only used when `Type` is set to `#FILE`.\n\n- `LoadPalette`: If this tag is set to `True` and `Type` is set to `#FILE`, Hollywood will try to load the image's palette and store the image as a palette image within the icon. If the image has a transparent pen, that transparent pen will be loaded automatically. (V9.0)\n\nThis command is also available from the preprocessor: Use [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) to create icons from the preprocessor.\n\nTo add and remove individual images from an icon, use the [AddIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/AddIconImage_.html) and [RemoveIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveIconImage_.html) functions.",
    "inputsDocs": "* `id` — identifier for the icon or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `table` — table containing the individual images to be added to the icon (see above)",
    "example": "```\nCreateIcon(1, {\n    {Image = \"ic16x16.png\", Type = #FILE},\n    {Image = \"ic24x24.png\", Type = #FILE},\n    {Image = \"ic32x32.png\", Type = #FILE},\n    {Image = \"ic48x48.png\", Type = #FILE},\n    {Image = \"ic64x64.png\", Type = #FILE},\n    {Image = \"ic96x96.png\", Type = #FILE},\n    {Image = \"ic128x128.png\", Type = #FILE},\n    {Image = \"ic256x256.png\", Type = #FILE},\n    {Image = \"ic512x512.png\", Type = #FILE},\n    {Image = \"ic1024x1024.png\", Type = #FILE}})\n```\n\nThe code above creates icon 1 from a set of external images in different sizes ranging from 16x16 pixels to 1024x1024 pixels.\n\n---\n\n```\nCreateIcon(1, {{Image = \"icon.svg\", Type = #FILE}})\n```\n\nThe code above creates icon 1 and uses just a single image because the image is in a vector graphics format (SVG) and in that case only a single image must be specified (see above).",
    "platforms": ["AmigaOS 4"],
    "insertText": "CreateIcon(${1:id}, ${2:table})"
  },
  {
    "name": "FreeIcon",
    "helpId": "FreeIcon",
    "shortDescription": "free an icon",
    "version": "8.0",
    "synopsis": "FreeIcon(id)",
    "functionDocs": "This function frees the memory of the icon specified by `id`. To save memory, you should always free icons when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the icon to free",
    "resultsDocs": "none",
    "platforms": ["AmigaOS 4"],
    "insertText": "FreeIcon(${1:id})"
  },
  {
    "name": "GetIconProperties",
    "helpId": "GetIconProperties",
    "shortDescription": "retrieve properties from an icon",
    "version": "4.5",
    "synopsis": "t = GetIconProperties(id)  \ntype, tooltypes, deftool$ = GetIconProperties(file$)",
    "functionDocs": "This function can be used to get the properties of an icon. This is mostly useful for Amiga icons because they contain metadata besides the image data, e.g. icon type, tooltypes, default tool, and so on.\n\nThere are two ways of using this function: You can either pass the identifier of an icon in the first parameter or the filename of an icon file. Passing a filename to `GetIconProperties()` is only supported on AmigaOS and compatibles, passing an icon identifier is supported on all platforms however.\n\nIf you choose to pass the identifier of an icon in the first parameter, `GetIconProperties()` will return a table that has the following fields initialized:\n\n- `Type`: This tag will be set to the Amiga icon type of the icon. This will be one of the following constants:\n\n  - `#AMIGAICON_DISK`: An icon of a drive (e.g. RAM, HD, CD-ROM, etc.)\n\n  - `#AMIGAICON_DRAWER`: An icon of a drawer.\n\n  - `#AMIGAICON_TOOL`: An icon of a program\n\n  - `#AMIGAICON_PROJECT`: An icon of a project. A project is a data file that can be opened by an other program. The program that should be used to open the project will be passed in `DefaultTool`, e.g. `SYS:Utilities/MultiView`.\n\n  - `#AMIGAICON_GARBAGE`: A trashcan icon.\n\n  - `##AMIGAICON_DEVICE`: A device icon.\n\n  - `#AMIGAICON_KICKSTART`: A Kickstart icon.\n\n  (V9.0)\n\n- `IconX`: The icon's x position relative to the top-left corner of the drawer it is stored in. (V9.0)\n\n- `IconY`: The icon's y position relative to the top-left corner of the drawer it is stored in. (V9.0)\n\n- `DrawerX`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag will be set to the x position of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerY`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag will be set to the y position of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerWidth`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag will be set to the width of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerHeight`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag will be set to the height of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `ViewAll`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag will be set to `True` if all files of the drawer should be shown instead of just the ones that have an icon. (V9.0)\n\n- `StackSize`: In case `Type` is set to `#AMIGAICON_TOOL` or `#AMIGAICON_PROJECT`, the desired stack size for the program to be launched. (V9.0)\n\n- `DefaultTool`: In case `Type` is set to `#AMIGAICON_PROJECT`, this will be set to a string containing name (and optionally path) of the program to open the file with. (V9.0)\n\n- `ToolTypes`: If there are tooltypes in the icon, they will be returned in this tag. The `ToolTypes` tag will contain a table that contains a list of subtables, one subtable per tooltype entry. Each subtable will contain the following tags:\n\n  - `Key`: This tag contains the name of the tooltype.\n\n  - `Value`: This tag contains the tooltype's value.\n\n  - `Enabled`: This tag is a boolean that indicates whether or not the tooltype is enabled.\n\n  Alternatively, you can also get the tooltypes by using the `RawToolTypes` tag (see below).\n\n  (V9.0)\n\n- `RawToolTypes`: If you don't want to use the `ToolTypes` tag for some reason, you can also use `RawToolTypes` to get them. In contrast to `ToolTypes`, the `RawToolTypes` tag doesn't divide tooltypes into their individual constituents (key, value, enabled flag). Instead, the `RawToolTypes` tag will just return the tooltypes as they are stored in the icon, i.e. without any additional processing. This makes it possible to get custom data stored in tooltypes as well. `RawToolTypes` will be set to a table that contains the tooltypes as strings. (V9.0)\n\n- `Images`: This tag will be set to a table containing information about the individual images within the icon. The table will contain a subtable for each image in the icon. Each subtable will have the following fields:\n\n  - `Width`: Image width in pixels.\n\n  - `Height`: Image height in pixels.\n\n  - `Standard`: `True` if the image is the standard image, `False` otherwise.\n\n  - `Frames`: Number of image frames. This can be either 1 or 2. If it is 1, there is only a normal image, if it is 2, there is a selected state image as well.\n\n  (V9.0)\n\nTo set the properties of an icon, use the [SetIconProperties()](https://www.hollywood-mal.com/docs/html/hollywood/SetIconProperties_.html) command.",
    "inputsDocs": "* `id` — syntax 1: identifier of an icon to examine\n* `file$` — syntax 2: the icon to examine",
    "resultsDocs": "* `t` — syntax 1: table containing icon properties\n* `type` — syntax 2: type of the icon; will be one of the constants from above\n* `tooltypes` — syntax 2: a table containing a list of all tooltypes; each list entry will have the fields `Key`, `Value`, and `Enabled` initialized\n* `deftool$` — syntax 2: the default tool set for this icon; only set for icons of type `#AMIGAICON_PROJECT`",
    "example": "```\nt = GetIconProperties(1)\nFor k = 0 To ListItems(t.ToolTypes) - 1\n   DebugPrint(\"Item:\", k, \"Key:\", t.ToolTypes[k].key,\n       \"Value:\", t.ToolTypes[k].value,\n       \"Enabled:\", t.ToolTypes[k].enabled)\nNext\n```\n\nThe code above gets the properties of icon 1 and then prints all information stored in its tooltypes.\n\n---\n\n```\ntype, tt, deftool$ = GetIconProperties(\"MyIcon.info\")\nFor k = 0 To ListItems(tt) - 1\n   DebugPrint(\"Item:\", k, \"Key:\", tt[k].key, \"Value:\", tt[k].value,\n              \"Enabled:\", tt[k].enabled)\nNext\n```\n\nThe code above gets the properties of the icon \"MyIcon.info\" and then prints all information stored in its tooltypes.",
    "platforms": ["AmigaOS 4"],
    "insertText": "GetIconProperties(${1:id})"
  },
  {
    "name": "LoadIcon",
    "helpId": "LoadIcon",
    "shortDescription": "load an icon",
    "version": "8.0",
    "synopsis": "[id] = LoadIcon(id, filename$[, table])",
    "functionDocs": "This function loads the icon specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadIcon()` will automatically choose an identifier and return it.\n\nIn Hollywood, an icon is a collection of the same image in different sizes. By using individually designed images for each size instead of just scaling one and the same image to each size, a better quality is achieved, especially when it comes to smaller image sizes, which look much better when they are specifically designed for their resolution. Additionally, each image inside an icon set can have two different states: normal and selected. Normally, you only ever need the normal state, but on AmigaOS and compatibles the selected state is sometimes used as well. Typical sizes for the individual images within an icon are 16x16, 24x24, 32x32, 48x48, 64x64, 96x96, 128x128, 256x256, and 512x512, but they can also be completely arbitrary. The advantage of having the same image in different sizes in an icon is that Hollywood can choose an appropriate size depending on the screen resolution.\n\nThe icon passed in `filename$` must be in Hollywood's custom PNG icon format. You can use [SaveIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SaveIcon_.html) to create such icons. Note that although Hollywood icons are normal PNG images, they contain additional metadata which is why you mustn't edit them with your favourite image manipulation tool because that might lead to the loss of said metadata. Hollywood icons should only ever be created by using the [SaveIcon()](https://www.hollywood-mal.com/docs/html/hollywood/SaveIcon_.html) function.\n\nIf you don't want to use Hollywood's custom icon format, you can also create icons from brushes or normal images using the [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) function or the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command. Those commands also have the advantage that you can use vector brushes, which can be losslessly scaled to any size, leading to a perfectly crisp look in all kinds of different resolutions.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this icon. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nThis command is also available from the preprocessor: Use [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) to preload icons.",
    "inputsDocs": "* `id` — identifier for the icon or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the icon; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadIcon(1, \"test.png\")\n```\n\nThis loads \"test.png\" as icon 1.",
    "platforms": ["AmigaOS 4"],
    "insertText": "LoadIcon(${1:id}, ${2:filename$})"
  },
  {
    "name": "RemoveIconImage",
    "helpId": "RemoveIconImage",
    "shortDescription": "remove image from icon",
    "version": "8.0",
    "synopsis": "RemoveIconImage(id, idx)",
    "functionDocs": "This command can be used to remove a single image from the icon specified by `id`. The image to be removed must be specified by its index using the `idx` parameter. Indices start at 1 for the first image and run up to the number of images in the icon. You can query the number of images in an icon by using the `#ATTRNUMENTRIES` attribute with [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html).\n\nNote that the individual images inside icons are sorted by their width in ascending order. This means that the indices passed to `RemoveIconImage()` aren't necessarily the same as the order of images passed to functions like [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) or the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command.\n\nSince icons must contain at least one image, it's also not allowed to remove the very last image from an icon.\n\nTo add images to icons, use the [AddIconImage()](https://www.hollywood-mal.com/docs/html/hollywood/AddIconImage_.html) function.",
    "inputsDocs": "* `id` — identifier of the icon to use\n* `idx` — index of the image to remove (starting at 1)",
    "example": "```\nRemoveIconImage(1, 1)\n```\n\nThe code above removes the first image from icon 1.",
    "platforms": ["AmigaOS 4"],
    "insertText": "RemoveIconImage(${1:id}, ${2:idx})"
  },
  {
    "name": "SaveIcon",
    "helpId": "SaveIcon",
    "shortDescription": "save icon to a file",
    "version": "8.0",
    "synopsis": "SaveIcon(id, f$[, fmt, t])",
    "functionDocs": "This function saves the icon specified by `id` to the file specified by `f$` in By default, the icon will be saved in Hollywood's custom icon format based on PNG. You can change this by passing a different icon format constant in the `fmt` argument. The only icon format supported internally by Hollywood is `#ICNFMT_HOLLYWOOD`, which is Hollywood's custom icon format based on PNG. Additional icon formats might be made available by Hollywood plugins.\n\nNote that although Hollywood's custom icon format stores icons as seemingly normal PNG images, they contain additional metadata which is why you mustn't edit them with your favourite image manipulation tool because that might lead to the loss of said metadata. Hollywood icons should only ever be created by using the `SaveIcon()` function.\n\nAlso note that when using Hollywood's custom icon format the icon specified in `id` mustn't contain any vector graphics. Hollywood icons only support raster graphics because they are based on PNG which is a raster graphics format. If you want to use vector graphics in an icon, you can create such icons using the [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) function and the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command.\n\nFinally, icons in Hollywood's custom icon format also mustn't contain any palette graphics. That is why `SaveIcon()` will fail if the icon specified by `id` contains palette images.\n\nStarting with Hollywood 9.0, `SaveIcon()` accepts an optional table argument that can contain the following options:\n\n- `Compression`: For icon formats that support compression, you can set this tag to `True` or `False` to enable or disable compression. Defaults to `True`. (V9.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)",
    "inputsDocs": "* `id` — identifier of the icon to save\n* `f$` — destination file\n* `fmt` — optional: desired output icon format (defaults to `#ICNFMT_HOLLYWOOD`) (V9.0)\n* `t` — optional: table containing further arguments (V9.0)",
    "resultsDocs": "none",
    "platforms": ["AmigaOS 4"],
    "insertText": "SaveIcon(${1:id}, ${2:f$})"
  },
  {
    "name": "SetIconProperties",
    "helpId": "SetIconProperties",
    "shortDescription": "change properties of an icon",
    "version": "4.5",
    "synopsis": "SetIconProperties(id, table)  \nSetIconProperties(file$, type[, tooltypes, deftool$]) (Amiga only)",
    "functionDocs": "This function can be used to change the properties of an icon. This is mostly useful for Amiga icons because those contain metadata besides the image data, e.g. icon type, tooltypes, default tool, and so on. This metadata can be modified using `SetIconProperties()`.\n\nThere are two ways of using this function: You can either pass the identifier of an icon in the first parameter and a table in the second parameter or you can pass the filename of an icon file in the first parameter and more arguments in the following parameters. Passing a filename to `SetIconProperties()` is only supported on AmigaOS and compatibles, passing an icon identifier is supported on all platforms however.\n\nIf you choose to pass an icon identifier to `SetIconProperties()`, you have to pass a table in the second argument to specify the actual properties to modify. The following icon properties can currently be modified:\n\n- `Type`: This tag allows you to set the desired Amiga icon type for the icon. This must be one of the following constants:\n\n  - `#AMIGAICON_DISK`: An icon of a drive (e.g. RAM, HD, CD-ROM, etc.)\n\n  - `#AMIGAICON_DRAWER`: An icon of a drawer.\n\n  - `#AMIGAICON_TOOL`: An icon of a program\n\n  - `#AMIGAICON_PROJECT`: An icon of a project. A project is a data file that can be opened by an other program. The program that should be used to open the project should be passed in the `DefaultTool` tag (see below).\n\n  - `#AMIGAICON_GARBAGE`: A trashcan icon.\n\n  - `##AMIGAICON_DEVICE`: A device icon.\n\n  - `#AMIGAICON_KICKSTART`: A Kickstart icon.\n\n  (V9.0)\n\n- `IconX`: The icon's x position relative to the top-left corner of the drawer it is stored in. (V9.0)\n\n- `IconY`: The icon's y position relative to the top-left corner of the drawer it is stored in. (V9.0)\n\n- `DrawerX`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag can be used to set the x position of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerY`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag can be used to set the y position of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerWidth`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag can be used to set the width of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `DrawerHeight`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, this tag can be used to set the height of the new window that will be opened when double-clicking the icon. (V9.0)\n\n- `ViewAll`: In case `Type` is set to a container type like `#AMIGAICON_DRAWER`, you can set this tag to `True` to tell Workbench to show all files of the drawer, not just the ones that have an icon. (V9.0)\n\n- `StackSize`: In case `Type` is set to `#AMIGAICON_TOOL` or `#AMIGAICON_PROJECT`, the desired stack size for the program to be launched. (V9.0)\n\n- `DefaultTool`: In case `Type` is set to `#AMIGAICON_PROJECT`, this can be set to a string containing name (and optionally path) of the program to open the file with. (V9.0)\n\n- `ToolTypes`: If you want to add tooltypes to the icon, you have to pass a table in the `ToolTypes` tag. The table must contain a list of subtables, one subtable per tooltype entry. Each subtable can contain the following tags:\n\n  - `Key`: This tag is mandatory. It specifies the name of the tooltype. Tooltype names should use letters of the English alphabet only. They should always be in upper-case format and must not use any SPACE characters. If you want a SPACE, use an underscore instead (\"_\"). Furthermore, numbers should not be used as the initial characters of a tooltype name.\n\n  - `Value`: This tag is optional. You can use it to assign a value to the tooltype. If you do not set this value, the tooltype will be a boolean one.\n\n  - `Enabled`: This tag is optional. It defaults to `True`. If you want to add tooltypes that are initially disabled, you can set this tag to `False`. In that case, the tooltype will be enclosed by parentheses which means that it is disabled.\n\n  Alternatively, you can also set tooltypes by using the `RawToolTypes` tag (see below).\n\n  (V9.0)\n\n- `RawToolTypes`: If you don't want to use the `ToolTypes` tag for some reason, you can also use `RawToolTypes` to set them. In contrast to `ToolTypes`, the `RawToolTypes` tag doesn't divide tooltypes into their individual constituents (key, value, enabled flag). Instead, the `RawToolTypes` tag will just copy the tooltypes to the icon without any additional processing. This makes it possible to store custom data in tooltypes as well. If you want to do that, just set `RawToolTypes` to a table that contains all tooltypes that should be set as simple strings. (V9.0)\n\nTo read the properties of an icon, use the [GetIconProperties()](https://www.hollywood-mal.com/docs/html/hollywood/GetIconProperties_.html) command.",
    "inputsDocs": "* `id` — syntax 1: identifier of icon to modify\n* `table` — syntax 1: table containing icon properties to set\n* `file$` — syntax 2: the icon to modify\n* `type` — syntax 2: new type for the icon; must be one of the constants from above\n* `tooltypes` — syntax 2, optional: a table containing a list of all tooltypes you want to set; each list entry must have at least the `Key` field set; defaults to {}  (empty table)\n* `deftool$` — syntax 2, optional: the default tool to set for this icon; will only be set for icons of type `#AMIGAICON_PROJECT`; defaults to \"\"",
    "example": "```\nSetIconProperties(1, {\n    Type = #AMIGAICON_PROJECT,\n    DefaultTool = \"Hollywood:System/Hollywood\",\n    ToolTypes = {\n       {Key = \"BORDERLESS\"},\n       {Key = \"BACKFILL\", Value = \"GRADIENT\"},\n       {Key = \"STARTCOLOR\", Value = \"$000000\"},\n       {Key = \"ENDCOLOR\", Value = \"$0000ff\"},\n       {Key = \"FIXED\", Enabled = False}\n    }\n})\n```\n\nThe code above sets the type of icon 1 to `#AMIGAICON_PROJECT`, the default tool to \"Hollywood:System/Hollywood\" and adds some tooltypes.\n\n---\n\n```\nSetIconProperties(\"MyCoolScript.hws.info\", #AMIGAICON_PROJECT, {\n{Key = \"BORDERLESS\"},\n{Key = \"BACKFILL\", Value = \"GRADIENT\"},\n{Key = \"STARTCOLOR\", Value = \"$000000\"},\n{Key = \"ENDCOLOR\", Value = \"$0000ff\"},\n{Key = \"FIXED\", Enabled = False} }, \"Hollywood:System/Hollywood\")\n```\n\nThe code above sets Hollywood as the default tool for \"MyCoolScript.hws\". Furthermore, it adds several tooltypes to the script's icon that tell Hollywood what eye candy it should add to the script (e.g. gradient backfill).",
    "platforms": ["AmigaOS 4"],
    "insertText": "SetIconProperties(${1:id}, ${2:table})"
  },
  {
    "name": "SetStandardIconImage",
    "helpId": "SetStandardIconImage",
    "shortDescription": "set icon's standard image",
    "version": "8.0",
    "synopsis": "SetStandardIconImage(id, idx)",
    "functionDocs": "This command can be used to set the standard image of the icon specified by `id`. The image to be made the standard one must be specified by its index using the `idx` parameter. Indices start at 1 for the first image and run up to the number of images in the icon. You can query the number of images in an icon by using the `#ATTRNUMENTRIES` attribute with [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html).\n\nNote that the individual images inside icons are sorted by their width in ascending order. This means that the indices passed to `SetStandardIconImage()` aren't necessarily the same as the order of images passed to functions like [CreateIcon()](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html) or the [@ICON](https://www.hollywood-mal.com/docs/html/hollywood/atICON_.html) preprocessor command.\n\nSetting an image inside the icon as the standard one can be important in some contexts so that Hollywood knows which image to pick for higher resolutions, e.g. if you designate a 64x64 image inside an icon as the standard size, Hollywood knows to pick the 128x128 image in case the monitor's resolution uses a DPI setting that is twice as high as the normal setting. Obviously, there can be only one standard image inside every icon, so making one image the standard one will automatically clear the standard flag for any image that was the standard one before. To make no image the standard one, pass 0 in `idx`.",
    "inputsDocs": "* `id` — identifier of the icon to use\n* `idx` — index of the image to set as standard (starting at 1)",
    "example": "```\nSetStandardIconImage(1, 1)\n```\n\nThe code above makes the first image 1 in icon 1 the standard one.",
    "platforms": ["AmigaOS 4"],
    "insertText": "SetStandardIconImage(${1:id}, ${2:idx})"
  },
  {
    "name": "SetTrayIcon",
    "helpId": "SetTrayIcon",
    "shortDescription": "install brush as a system tray icon",
    "version": "5.2",
    "synopsis": "SetTrayIcon(id[, tooltip$, type])",
    "functionDocs": "This function can be used to install the image specified in `id` as an icon in the Windows system tray. Whenever the user clicks on this icon, your script will get an event of type `TrayIcon` which you can listen to using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). The optional argument `tooltip$` can be used to specify a string that should be displayed as a tooltip whenever the mouse hovers over the system tray icon.\n\nThe image that you pass to this function should be 16x16 pixels and should use an alpha channel for transparency.\n\nIn case you have already installed a system tray icon when you call this function, the icon will be changed to the graphics of the specified brush. If you pass the special value `#NONE` as the brush identifier, the system tray icon will be removed.\n\nAnother special value that you can pass to this function is `#DEFAULTICON`. If you pass `#DEFAULTICON` in `id`, `SetTrayIcon()` will use the icon that has been declared using the [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) preprocessor command, or, in case no [@APPICON](https://www.hollywood-mal.com/docs/html/hollywood/atAPPICON_.html) declaration has been made, Hollywood's default icon, the clapperboard.\n\nStarting with Hollywood 8.0 there is an optional `type` argument which allows you to specify the source image type for the tray icon. This defaults to `#BRUSH` which means that you have to pass the identifier of a brush in the `id` argument. However, you can also set the `type` argument to `#ICON`, in which case you have to pass the identifier of a Hollywood icon in the `id` argument. This has the advantage that Hollywood can choose different images depending on the resolution of the host system's monitor. This is very useful for systems using high DPI monitors. By using an icon that contains an image in several resolutions, you can make sure that the tray icon looks perfectly crisp even on high DPI monitors. See [CreateIcon](https://www.hollywood-mal.com/docs/html/hollywood/CreateIcon_.html).\n\nNote that if you pass an icon in `id`, you have to make sure to set the 16x16 image as the standard image inside the icon because 16x16 pixels is the default icon size for the Windows system tray. See [SetStandardIconImage](https://www.hollywood-mal.com/docs/html/hollywood/SetStandardIconImage_.html).",
    "inputsDocs": "* `id` — identifier of the image to use as system tray icon or `#NONE` or `#DEFAULTICON`\n* `tooltip$` — optional: text to display as an icon tooltip\n* `type` — optional: type of the image passed in `id`; this can be either `#BRUSH` or `#ICON` (defaults to `#BRUSH`) (V8.0)",
    "example": "```\nInstallEventHandler({TrayIcon = ...})\nSetTrayIcon(1, \"My program\")\n```\n\nThe code above enables the tray icon event handler and then installs brush number 1 as a system tray icon.",
    "platforms": ["Windows"],
    "insertText": "SetTrayIcon(${1:id})"
  },
  {
    "name": "SetWBIcon",
    "helpId": "SetWBIcon",
    "shortDescription": "change Hollywood's iconify icon",
    "version": "4.5",
    "synopsis": "SetWBIcon(icon$[, ...])",
    "functionDocs": "This function can be used to specify your custom icon that Hollywood shall show on the Workbench when it is in iconified state. You must specify an icon file here that is in the `*.info` format. All icons that the currently installed Workbench can read are supported. Thus, if you are on MorphOS or are using an appropriate patch, you could also use PNG icons here.\n\nFor best compatibility, however, you should stick to standard icons in the GlowIcon format.\n\nThe following special constants can be passed to `icon$`:\n\n- `#AMIGAICON_NONE`: Pass this if you do not want Hollywood to add an appicon to the Workbench when it is iconified. (V5.2)\n\n- `#AMIGAICON_SHOW`: Show the app icon. This is useful if you want your app icon to be permanently shown on Workbench screen and not only when your program is iconified. (V6.1)\n\n- `#AMIGAICON_HIDE`: Hide the app icon. (V6.1)\n\n- `#AMIGAICON_SETTITLE`: Set text to show below the app icon. This defaults to what you specified in the [@APPTITLE](https://www.hollywood-mal.com/docs/html/hollywood/atAPPTITLE_.html) preprocessor command. The text to show needs to be passed as the second argument. (V6.1)\n\n- `#AMIGAICON_SETPOSITION`: Change position of the app icon. You have to pass two additional arguments specifying the new x and y position of the app icon. If you omit the two additional arguments, the app icon's position will be reset to the position stored in the `*.info` file. (V6.1)\n\nNote that you might need to call `SetWBIcon()` several times in order to achieve the desired effect. For example, if you'd like to change the app icon and show it permanently, you first have to call `SetWBIcon()` to set the `*.info` file to show and then you have to call `SetWBIcon()` again and pass `#AMIGAICON_SHOW` to permanently show your app icon.",
    "inputsDocs": "* `icon$` — icon file to use when iconified or a special constant (see above)\n* `...` — additional arguments depending on the special constant passed (see above)",
    "example": "```\nSetWBIcon(\"MyCoolProg.info\")\n```\n\nThis code uses the program's icon as its default WB icon.",
    "platforms": ["AmigaOS"],
    "insertText": "SetWBIcon(${1:icon$})"
  }
]
