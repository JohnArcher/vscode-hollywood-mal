[
  {
    "name": "ClearObjectData",
    "helpId": "ClearObjectData",
    "shortDescription": "clear private data key in an object",
    "version": "5.0",
    "synopsis": "ClearObjectData(type, id[, key$])",
    "functionDocs": "This function can be used to remove private data from an object. You have to pass the type and identifier of the object whose private data you would like to modify. If the optional argument `key$` is specified, `ClearObjectData()` will remove the data associated with this key only. If `key$` is omitted, `ClearObjectData()` will remove the private data of all keys in this object.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — type of the object\n* `id` — identifier of the object\n* `key$` — optional: key which shall be removed from object; if this argument is omitted, all keys will be removed from this object",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ClearObjectData(${1:type}, ${2:id})"
  },
  {
    "name": "CopyObjectData",
    "helpId": "CopyObjectData",
    "shortDescription": "copy private data between objects",
    "version": "5.0",
    "synopsis": "CopyObjectData(srctype, srcid, dsttype, dstid[, overwrite])",
    "functionDocs": "This function copies all private data associated with the object specified by `srctype` and `srcid` to the object specified by `dsttype` and `dstid`. The optional `overwrite` argument specifies whether or not `CopyObjectData()` should overwrite keys in the destination object in case they share the name of keys in the source object. By default, this is set to `True` which means that existing keys in the destination object will be replaced with the keys in the source object in case their names are the same. If you do not want this behaviour, set `overwrite` to `False`.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `srctype` — type of source object to use\n* `srcid` — identifier of source object to use\n* `dsttype` — type of destination object to use\n* `dstid` — identifier of destination object to use\n* `overwrite` — optional: specifies whether or not existing keys in the destination object should be overwritten (defaults to `True`)",
    "example": "```\nSetObjectData(#BRUSH, 1, \"name\", \"mybrush\")\nCopyObjectData(#BRUSH, 1, #BRUSH, 2)\nDebugPrint(GetObjectData(#BRUSH, 2, \"name\"))\n```\n\nThe code above copies all data keys of brush 1 to brush 2. The call to DebugPrint() will print \"mybrush\" then.",
    "platforms": ["All"],
    "insertText": "CopyObjectData(${1:srctype}, ${2:srcid}, ${3:dsttype}, ${4:dstid})"
  },
  {
    "name": "GetAttribute",
    "helpId": "GetAttribute",
    "shortDescription": "get information about an object",
    "version": "1.0",
    "synopsis": "info = GetAttribute(obj, id, attr[, param, param2])",
    "functionDocs": "This function can be used to retrieve properties from all different kinds of Hollywood objects. For example, you can query the dimensions of a brush or the length of sound file. Please see below for a complete list of object types and their attributes. \n\nThe following attributes can be queried for `#ANIM`:\n\n- `#ATTRWIDTH`: Returns width of the animation.\n\n- `#ATTRHEIGHT`: Returns height of the animation.\n\n- `#ATTRTRANSPARENTCOLOR`: Returns the transparent color of the animation or `#NOTRANSPARENCY`.\n\n- `#ATTRNUMFRAMES`: Returns the number of frames in this animation. (V2.0)\n\n- `#ATTRHASMASK`: Returns `True` if animation has a mask. (V2.0)\n\n- `#ATTRHASALPHA`: Returns `True` if animation has an alpha channel. (V4.5)\n\n- `#ATTRFRAMEDELAY`: Returns the time anim players should wait after the specified frame in milliseconds. You also need to specify the frame number you want to query in the `param` argument. Frames are counted from 1. If you leave out the `param` argument, the first frame will be used. Please note that not all animation formats support frame delays and that the information might only be available for frames that are already loaded; i.e. if you are querying a random frame of a disk-based anim, it could be that you get a zero return value because the frame has not been loaded yet. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many animations there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this animation. (V6.0)\n\n- `#ATTRDEPTH`: Returns the depth of the frame specified in the `param` argument. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. If the depth is less than or equal to 8, the anim is a palette anim. (V9.0)\n\n- `#ATTRPALETTE`: Returns the palette of the frame specified in the `param` argument. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. The frame's palette will be returned as a table and will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the frame doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the palette of the frame specified by `param`. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. If there is no transparent pen or the frame doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRTYPE`: Returns the type of the anim. This will be set to either `#ANIMTYPE_RASTER` for a raster anim or `#ANIMTYPE_VECTOR` for a [vector anim](https://www.hollywood-mal.com/docs/html/hollywood/VectorAnimNote_.html). (V9.0)\n\n- `#ATTRFORMAT`: Returns the anim format name as a string. (V10.0)\n\n\n\nThe following attributes can be queried for `#ANIMSTREAM`:\n\n- `#ATTRCOUNT`: Returns how many anim stream objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n\n\nThe following attributes can be queried for `#ASYNCDRAW`:\n\n- `#ATTRTYPE`: Returns the type of this asynchronous drawing object; will be `#ADF_FX`, `#ADF_MOVEOBJECT` or `#ADF_ANIM`. (V4.5)\n\n- `#ATTRNUMFRAMES`: Returns the number of frames of this asynchronous drawing object. Please note that if you use this value as the basis for a loop over [AsyncDrawFrame()](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html), you must add one loop iteration because the final call to AsyncDrawFrame(), which will free the async draw object, does not count as a frame. Alternatively, you can also just iterate `#ATTRNUMFRAMES` number of times and call [FinishAsyncDraw()](https://www.hollywood-mal.com/docs/html/hollywood/FinishAsyncDraw_.html) to free the async draw object manually. See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html). (V4.5)\n\n- `#ATTRCURFRAME`: Returns the frame currently on display in this async drawing object. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many async draw objects there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n\n\nThe following attributes can be queried for `#ASYNCOBJ`:\n\n- `#ATTRCOUNT`: Returns how many asynchronous operation handles there are currently in memory. Useful for tracking memory consumption. (V9.0)\n\n\n\nThe following attributes can be queried for `#BGPIC`:\n\n- `#ATTRWIDTH`: Returns width of the BGPic.\n\n- `#ATTRHEIGHT`: Returns height of the BGPic.\n\n- `#ATTRTRANSPARENTCOLOR`: Returns the transparent color of the BGPic or `#NOTRANSPARENCY`.\n\n- `#ATTRLAYERS`: Returns the number of layers attached to this BGPic. (V1.5)\n\n- `#ATTRHASMASK`: Returns `True` if BGPic has a mask. (V2.0)\n\n- `#ATTRHASALPHA`: Returns `True` if BGPic has an alpha channel. (V4.5)\n\n- `#ATTRCLIPREGION`: Returns the identifier of the clip region currently active on this BGPic or -1 if there is no active clip region. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many BGPics there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRTYPE`: Returns the type of the BGPic. This will be set to either `#IMAGETYPE_RASTER` for a raster BGPic or `#IMAGETYPE_VECTOR` for a [vector BGPic](https://www.hollywood-mal.com/docs/html/hollywood/VectorBGPicNote_.html). (V5.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this BGPic. (V6.0)\n\n- `#ATTRSPRITES`: Returns the number of sprites currently visible on this BGPic. (V7.0)\n\n- `#ATTRDEPTH`: Returns the depth of the BGPic. If this is less than or equal to 8, the BGPic is a palette BGPic. (V9.0)\n\n- `#ATTRPALETTE`: Returns the BGPic's palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the BGPic doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the BGPic's palette. If there is no transparent pen or the BGPic doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRCYCLE`: If the BGPic has a palette which has color cycling ranges defined, this attribute will return a table containing all color cycling ranges that are defined. In that case, the table returned by `#ATTRCYCLE` will contain a number of subtables which will have the following fields initialized:\n\n  - `Low`: The pen index that marks that start of the color range.\n\n  - `High`: The pen index that marks the end of the color range.\n\n  - `Rate`: The desired speed of the color cycling effect. A value of 16384 indicates 60 frames per second. All other speeds scale linearly from this base, e.g. a value of 8192 indicates 30 frames per second, and so on.\n\n  - `Reverse`: If this tag is set to `True`, the colors should be cycled in reverse.\n\n  - `Active`: If this tag is set to `True`, this color cycling range is marked as active.\n\n  (V9.0)\n\n- `#ATTRFORMAT`: Returns the image format name as a string. (V10.0)\n\n\n\nThe following attributes can be queried for `#BRUSH`:\n\n- `#ATTRWIDTH`: Returns width of the brush.\n\n- `#ATTRHEIGHT`: Returns height of the brush.\n\n- `#ATTRTRANSPARENTCOLOR`: Returns the transparent color of the brush or `#NOTRANSPARENCY`.\n\n- `#ATTRHASMASK`: Returns `True` if brush has a mask. (V2.0)\n\n- `#ATTRHASALPHA`: Returns `True` if brush has an alpha channel. (V2.0)\n\n- `#ATTRCOUNT`: Returns how many brushes there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRTYPE`: Returns the type of the brush. This will be set to either `#IMAGETYPE_RASTER` for a raster brush or `#IMAGETYPE_VECTOR` for a [vector brush](https://www.hollywood-mal.com/docs/html/hollywood/VectorBrushNote_.html). (V5.0)\n\n- `#ATTRHARDWARE`: Returns `True` if the specified brush is a hardware brush. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V5.0)\n\n- `#ATTRDISPLAY`: Returns the identifier of the display that this brush belongs to if the brush is a display-dependent hardware brush. Otherwise -1 is returned. See [hardware brushes](https://www.hollywood-mal.com/docs/html/hollywood/HardwareBrushNote_.html). (V6.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this brush. (V6.0)\n\n- `#ATTRDEPTH`: Returns the depth of the brush. If this is less than or equal to 8, the brush is a palette brush. (V9.0)\n\n- `#ATTRPALETTE`: Returns the brush's palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the brush doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the brush's palette. If there is no transparent pen or the brush doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRCYCLE`: If the brush has a palette which has color cycling ranges defined, this attribute will return a table containing all color cycling ranges that are defined. In that case, the table returned by `#ATTRCYCLE` will contain a number of subtables which will have the following fields initialized:\n\n  - `Low`: The pen index that marks that start of the color range.\n\n  - `High`: The pen index that marks the end of the color range.\n\n  - `Rate`: The desired speed of the color cycling effect. A value of 16384 indicates 60 frames per second. All other speeds scale linearly from this base, e.g. a value of 8192 indicates 30 frames per second, and so on.\n\n  - `Reverse`: If this tag is set to `True`, the colors should be cycled in reverse.\n\n  - `Active`: If this tag is set to `True`, this color cycling range is marked as active.\n\n  (V9.0)\n\n- `#ATTRFORMAT`: Returns the image format name as a string. (V10.0)\n\n\n\nThe following attributes can be queried for `#CLIENT`:\n\n- `#ATTRCOUNT`: Returns how many network client objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n- `#ATTRADAPTER`: Returns the name of the adapter that has been used to open this connection or `inbuilt` if the connection has been opened using Hollywood's inbuilt connection handler. (V8.0)\n\n\n\nThe following attributes can be queried for `#CLIPREGION`:\n\n- `#ATTRXPOS`: Returns the x-position of the clip region. (V3.0)\n\n- `#ATTRYPOS`: Returns the y-position of the clip region. (V3.0)\n\n- `#ATTRWIDTH`: Returns the width of the clip region. (V3.0)\n\n- `#ATTRHEIGHT`: Returns the height of the clip region. (V3.0)\n\n- `#ATTRCOUNT`: Returns how many clip regions there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n\n\nThe following attributes can be queried for `#CONSOLEWINDOW`:\n\n- `#ATTRCOUNT`: Returns how many console windows are currently in memory. Useful for tracking memory consumption. (V10.0)\n\n\n\nThe following attributes can be queried for `#DIRECTORY`:\n\n- `#ATTRCOUNT`: Returns how many directory handles there are currently open. Useful for tracking resources. (V4.5)\n\n- `#ATTRADAPTER`: Returns the name of the adapter that has been used to open this directory or `inbuilt` if this directory has been opened using Hollywood's inbuilt directory handler. (V6.0)\n\n- `#ATTRFORMAT`: Returns the directory format name as a string. This is typically only set if the directory is handled by a plugin because by default, directories don't have a \"format\" but plugins might implement adapters that map zip files et al. to directories. In that case, `#ATTRFORMAT` allows you to find out the format of the directory source, e.g. \"zip archive\". (V10.0)\n\n\n\nThe following attributes can be queried for `#DISPLAY`:\n\n- `#ATTRWIDTH`: Returns the width of the display; this value does not include the width of the window border.\n\n- `#ATTRHEIGHT`: Returns the height of the display; this value does not include the height of the window border.\n\n- `#ATTRMAXWIDTH`: Returns the maximum possible width for this display (i.e. current desktop resolution minus border width).\n\n- `#ATTRMAXHEIGHT`: Returns the maximum possible height for this display (i.e. current desktop resolution minus border height).\n\n- `#ATTRBGPIC`: Returns the BGPic associated with this display. (V1.5)\n\n- `#ATTRLAYERS`: Returns the number of layers in the associated BGPic. (V1.5)\n\n- `#ATTRCURSORX`: Returns current x-position of the cursor. (V2.5)\n\n- `#ATTRCURSORY`: Returns current y-position of the cursor. (V2.5)\n\n- `#ATTRXPOS`: Returns the x-position of the display on the screen. (V3.0)\n\n- `#ATTRYPOS`: Returns the y-position of the display on the screen. (V3.0)\n\n- `#ATTRBORDERLEFT`: Returns the width of the left display border or 0 if the display is borderless. (V3.0)\n\n- `#ATTRBORDERRIGHT`: Returns the width of the right display border or 0 if the display is borderless. (V3.0)\n\n- `#ATTRBORDERTOP`: Returns the height of the top display border or 0 if the display is borderless. (V3.0)\n\n- `#ATTRBORDERBOTTOM`: Returns the height of the bottom display border or 0 if the display is borderless. (V3.0)\n\n- `#ATTRHOSTWIDTH`: Returns the width of the screen on which the display is open (usually the desktop screen). (V3.0)\n\n- `#ATTRHOSTHEIGHT`: Returns the height of the screen on which the display is open (usually the desktop screen). (V3.0)\n\n- `#ATTRFONTASCENDER, #ATTRFONTDESCENDER, #ATTRFONTNAME, #ATTRFONTSIZE, #ATTRFONTSCALABLE, #ATTRFONTAA, #ATTRFONTDEPTH, #ATTRFONTPALETTE, #ATTRFONTTRANSPARENTPEN, #ATTRFONTENGINE, #ATTRFONTTYPE, #ATTRFONTCHARMAP, #ATTRFONTLOADER, #ATTRFONTHEIGHT, #ATTRFONTFORMAT`: Information about the font currently selected into this display; please read below in `#TEXTOBJECT` for the info on these attributes. (V3.1)\n\n- `#ATTRPOINTER`: Returns the identifier of the mouse pointer currently associated with this display. (V4.5)\n\n- `#ATTRSTATE`: Returns the current state of this display; can be either `#DISPSTATE_OPEN` (if display is open), or `#DISPSTATE_CLOSED` (display is currently closed), or `#DISPSTATE_MINIMIZED` (display is currently minimized). (V4.5)\n\n- `#ATTRACTIVE`: Returns whether or not this display is currently active; only one display can be active at a time. (V4.5)\n\n- `#ATTRMODE`: Returns the current display mode; this can be either `#DISPMODE_WINDOWED` for windowed mode or it can be `#DISPMODE_FULLSCREEN` for full screen mode. Note that this is a global setting. You can safely pass 0 for display when querying `#ATTRMODE`. (V4.5)\n\n- `#ATTRSCALEMODE`: Returns the scale mode currently active in this display. Can be either `#SCALEMODE_NONE`, `#SCALEMODE_AUTO`, or `#SCALEMODE_LAYER`. (V4.5)\n\n- `#ATTRSCALEWIDTH`: Returns the currently set scaling width for this display. If no scaling is active, this attribute will return the same width as `#ATTRWIDTH`. (V4.5)\n\n- `#ATTRSCALEHEIGHT`: Returns the currently set scaling height for this display. If no scaling is active, this attribute will return the same height as `#ATTRHEIGHT`. (V4.5)\n\n- `#ATTRBORDERLESS`: Returns whether or not the display is borderless. (V4.5)\n\n- `#ATTRSIZEABLE`: Returns whether or not the display is resizeable. (V4.5)\n\n- `#ATTRFIXED`: Returns whether or not the display is fixed. (V4.5)\n\n- `#ATTRNOHIDE`: Returns whether or not the display can be iconified by the user. (V4.5)\n\n- `#ATTRNOMODESWITCH`: Returns `True` if display mode switching via CMD+RETURN (LALT+RETURN on Windows) hotkey is disabled for this display. (V4.5)\n\n- `#ATTRTITLE`: Returns the display's title string. (V4.5)\n\n- `#ATTRMARGINLEFT, #ATTRMARGINRIGHT`: Returns the current margin settings for this display as set using [SetMargins()](https://www.hollywood-mal.com/docs/html/hollywood/SetMargins_.html). (V4.5)\n\n- `#ATTRDOUBLEBUFFER`: Returns `True` if the specified display is a double- buffered one, `False` if it is not double-buffered. (V4.5)\n\n- `#ATTROUTPUTDEVICE`: This attribute returns three values containing information about the current output device. The first return value can be either `#DISPLAY`, `#BGPIC`, `#BRUSH`, `#ANIM`, or `#DOUBLEBUFFER`. The second return value specifies the corresponding identifier to the type indicated by the first return value. The third return value, finally, is only used by types `#BRUSH`, `#ANIM` and `#BGPIC` (NB: For `#BGPIC` it is only used when [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html) was called with mode set to either `#SELMODE_NORMAL` or `#SELMODE_COMBO`). In that case, it specifies the graphics of the brush/animation/BGPic that are currently selected: This can be either `#MASK`, `#ALPHACHANNEL` or `#BRUSH`. Note that the third return value will be set to `#BRUSH` also in case #ANIM/#BGPIC is returned by the first return value. If `#BRUSH` is returned as the third return value, it means that the color channel of the brush/animation is currently selected. If [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html) is in `#SELMODE_LAYERS`, the first and third return value will both be `#BGPIC`. If [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html) is in a different mode, the first return value will be `#BGPIC`, but the third return value will be either `#BRUSH`, `#MASK`, or `#ALPHACHANNEL`. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many display handles there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRMASKMODE`: Returns the current mask mode. This is a global setting not tied to a specific display. See [SetMaskMode](https://www.hollywood-mal.com/docs/html/hollywood/SetMaskMode_.html). (V4.5)\n\n- `#ATTRALPHAINTENSITY`: Returns the current alpha intensity. This is a global setting not tied to a specific display. See [SetAlphaIntensity](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html). (V4.5)\n\n- `#ATTRLAYERSON`: Returns `True` if the specified display has layers enabled, `False` if that is not the case. (V5.0)\n\n- `#ATTRORIENTATION`: Returns the current orientation of the mobile device that Hollywood is running on. The return value will be one of the following orientation modes:\n\n  ```\n  #ORIENTATION_PORTRAIT\n  #ORIENTATION_LANDSCAPE\n  #ORIENTATION_PORTRAITREV\n  #ORIENTATION_LANDSCAPEREV\n  ```\n\n  Please note that this tag is only supported in the mobile version of Hollywood. In the desktop version it will always return `#ORIENTATION_NONE`. (V5.0)\n\n- `#ATTRPUBSCREEN`: Returns the public screen that this display is currently opened on. This is only supported on AmigaOS compatible operating systems. (V5.2)\n\n- `#ATTRDENSITY`: Returns the logical density of the display. The return value will be one of the following predefined density values:\n\n  ```\n  #DENSITY_LOW\n  #DENSITY_MEDIUM\n  #DENSITY_HIGH\n  ```\n\n  Please note that this tag is only supported in the mobile version of Hollywood. In the desktop version it will always return `#DENSITY_NONE`. (V5.3)\n\n- `#ATTRXDPI`: Returns the exact physical pixels per inch of the screen on the X axis. Please note that this tag may return a spurious value on older Android devices. (V5.3)\n\n- `#ATTRYDPI`: Returns the exact physical pixels per inch of the screen on the Y axis. Please note that this tag may return a spurious value on older Android devices. (V5.3)\n\n- `#ATTRMENU`: Returns the identifier of the menu strip attached to this display or -1 if this display doesn't have a menu strip attached. (V6.0)\n\n- `#ATTRMONITOR`: Returns the monitor number that this display has been opened on. Monitors are counted from 1 which is the primary monitor. (V6.0)\n\n- `#ATTRHOSTMONITORS`: Returns the total number of monitors currently available to the system. You can query their dimensions and extended desktop positions using [GetMonitors()](https://www.hollywood-mal.com/docs/html/hollywood/GetMonitors_.html). (V6.0)\n\n- `#ATTRXSERVER`: Returns the name of the X Server that this display is connected to. This is only supported on Linux. (V6.0)\n\n- `#ATTRADAPTER`: Returns the name of the display adapter currently in use. If Hollywood's inbuilt display adapter is used, `inbuilt` is returned. (V6.0)\n\n- `#ATTRMAXIMIZED`: Returns `True` if the display is currently maximized, `False` otherwise. (V7.0)\n\n- `#ATTRRAWWIDTH`: Returns the raw physical width of the display, regardless of any scaling engine currently active. Use this attribute with care because it can conflict with scaling engines because they always pretend that Hollywood is in running in a different resolution. (V7.0)\n\n- `#ATTRRAWHEIGHT`: Returns the raw physical height of the display, regardless of any scaling engine currently active. Use this attribute with care because it can conflict with scaling engines because they always pretend that Hollywood is in running in a different resolution. (V7.0)\n\n- `#ATTRHOSTTITLEBARHEIGHT`: Returns the height of the host screen's title bar. Note that not all systems have a title bar, most notably Windows doesn't have any. In that case, 0 is returned. (V7.0)\n\n- `#ATTRHOSTTASKBAR`: Returns information about the taskbar on Windows. This tag will return 5 values: The first two values describe the x- and y-position of the taskbar on the host screen, return values three and four contain the dimensions of the taskbar and the fifth and last return value is a boolean which indicates whether or not the taskbar is currently visible. This tag is currently only supported on Windows. (V7.0)\n\n- `#ATTRSPRITES`: Returns the number of sprites currently active on this display. (V7.0)\n\n- `#ATTRHOSTSCALEX`: Returns the scaling coefficient on the x-axis of the display's monitor. Normally, this is 1 but for high resolution displays (e.g. Retina Macs or 4K monitors on Windows) this can be greater than 1. Note that on Windows this will always be 1 unless you explicitly enable DPI-awareness by setting the `DPIAware` tag in the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command to `True`. (V7.0)\n\n- `#ATTRHOSTSCALEY`: Returns the scaling coefficient on the y-axis of the display's monitor. Normally, this is 1 but for high resolution displays (e.g. Retina Macs or 4K monitors on Windows) this can be greater than 1. Note that on Windows this will always be 1 unless you explicitly enable DPI-awareness by setting the `DPIAware` tag in the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command to `True`. (V7.0)\n\n- `#ATTRHOSTSCALE`: Returns the global scaling coefficient of the display's monitor. Normally, this is 1 but for high resolution displays (e.g. Retina Macs or 4K monitors on Windows) this can be greater than 1. Note that on Windows this will always be 1 unless you explicitly enable DPI-awareness by setting the `DPIAware` tag in the [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) preprocessor command to `True`. (V8.0)\n\n- `#ATTRIMMERSIVEMODE`: Returns the immersive mode used by the display. The return value will be one of the following special constants:\n\n  ```\n  #IMMERSIVE_NONE\n  #IMMERSIVE_NORMAL\n  #IMMERSIVE_LEANBACK\n  #IMMERSIVE_STICKY\n  ```\n\n  See [DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html). (V9.0)\n\n- `#ATTRSYSTEMBARS`: Returns `True` if the system bars are currently visible, `False` otherwise. This is currently only supported on Android. Note that the system bars can only ever be invisible when a display is in immersive mode. See [DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html). (V9.0)\n\n- `#ATTRDEPTH`: Returns the depth of the display. If this is less than or equal to 8, the display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). (V9.0)\n\n- `#ATTRPALETTE`: Returns the display's palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the display doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the display's palette. If there is no transparent pen or the display doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRPALETTEMODE`: Returns the current palette mode set using [SetPaletteMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html). See [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html). (V9.0)\n\n- `#ATTRDITHERMODE`: Returns the current dither mode set using [SetDitherMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetDitherMode_.html). See [SetDitherMode](https://www.hollywood-mal.com/docs/html/hollywood/SetDitherMode_.html). (V9.0)\n\n- `#ATTRPEN`: Returns the current draw pen set using [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html). See [SetDrawPen](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html). (V9.0)\n\n- `#ATTRSHADOWPEN`: Returns the current shadow pen set using [SetShadowPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetShadowPen_.html). See [SetShadowPen](https://www.hollywood-mal.com/docs/html/hollywood/SetShadowPen_.html). (V9.0)\n\n- `#ATTRBORDERPEN`: Returns the current border pen set using [SetBorderPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetBorderPen_.html). See [SetBorderPen](https://www.hollywood-mal.com/docs/html/hollywood/SetBorderPen_.html). (V9.0)\n\n- `#ATTRBULLETPEN`: Returns the current bullet pen set using [SetBulletPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletPen_.html). See [SetBulletPen](https://www.hollywood-mal.com/docs/html/hollywood/SetBulletPen_.html). (V9.0)\n\n- `#ATTRSCALESWITCH`: Returns if this display will just scale itself to the monitor's current resolution when pressing the `CMD+RETURN` (`LALT+RETURN` on Windows) hotkey or using `#DISPMODE_MODESWITCH` with [ChangeDisplayMode()](https://www.hollywood-mal.com/docs/html/hollywood/ChangeDisplayMode_.html). (V9.0)\n\n- `#ATTRINTERPOLATE`: When a scaling engine is active, this will return whether or not interpolated scaling will be used. (V9.0)\n\n\n\nThe following attributes can be queried for `#EVENTHANDLER`:\n\n- `#ATTRFUNCTION`: Returns the callback function associated with the specified event handler. Note that you need to pass the name of the event handler as a string in id. Just as you would do in [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). (V4.5)\n\n- `#ATTRUSERDATA`: Returns the user data that is associated with the specified event handler. Note that you need to pass the name of the event handler as a string in id. Just as you would do in [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html). (V4.5)\n\n\n\nThe following attributes can be queried for `#FILE`:\n\n- `#ATTRMODE`: Returns the mode this file was opened in. Can be either `#MODE_READ`, `#MODE_WRITE`, or `#MODE_READWRITE`. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many file handles there are currently open. Useful for tracking resources. (V4.5)\n\n- `#ATTRADAPTER`: Returns the name of the adapter that has been used to open this file or `inbuilt` if this file has been opened using Hollywood's inbuilt file handler. (V6.0)\n\n- `#ATTRENCODING`: Returns the encoding set for the file using [OpenFile()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFile_.html) or [SetFileEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetFileEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V9.0)\n\n- `#ATTRFORMAT`: Returns the file format as a string. This is typically only set if the file is handled by a plugin because Hollywood's default file handler doesn't provide any format recognition. Plugins, however, might implement adapters that allow you to open files from zip archives etc. In that case, `#ATTRFORMAT` allows you to find out the format of the file source, e.g. \"zip archive\".(V10.0)\n\n\n\nThe following attributes can be queried for `#FONT`:\n\n- `#ATTRFONTASCENDER, #ATTRFONTDESCENDER, #ATTRFONTNAME, #ATTRFONTSIZE, #ATTRFONTSCALABLE, #ATTRFONTAA, #ATTRFONTDEPTH, #ATTRFONTPALETTE, #ATTRFONTTRANSPARENTPEN, #ATTRFONTENGINE, #ATTRFONTTYPE, #ATTRFONTCHARMAP, #ATTRFONTLOADER, #ATTRFONTHEIGHT, #ATTRFONTFORMAT`: Please see below in `#TEXTOBJECT` for information about the meaning of these attributes. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many fonts there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n\n\nThe following attributes can be queried for `#ICON`:\n\n- `#ATTRNUMENTRIES`: Returns the number of images in the icon. (V8.0)\n\n- `#ATTRSTANDARD`: Returns the index of the standard image in the icon or 0 in case there is no standard image in the icon. (V8.0)\n\n- `#ATTRWIDTH`: Returns the width of the image at the index specified in the optional `param` argument. Indices start at 1. (V8.0)\n\n- `#ATTRHEIGHT`: Returns the height of the image at the index specified in the optional `param` argument. Indices start at 1. (V8.0)\n\n- `#ATTRNUMFRAMES`: Returns the number of frames of the image at the index specified in the optional `param` argument. This can be either 1 or 2, depending on whether the image has only a normal state, or a normal and a selected state. Indices start at 1. (V8.0)\n\n- `#ATTRCOUNT`: Returns how many icons are currently in memory. Useful for tracking memory consumption. (V8.0)\n\n- `#ATTRDEPTH`: Returns the depth of the image at the index specified in the `param` argument. Indices start at 1. If `param2` is set to `True` the selected image is queried, if it is `False` (also the default) the normal image is queried. If the depth is less than or equal to 8, the image is a palette image. (V9.0)\n\n- `#ATTRPALETTE`: Returns the palette of the image at the index specified in the `param` argument. Indices start at 1. If `param2` is set to `True` the selected image is queried, if it is `False` (also the default) the normal image is queried. The image's palette will be returned as a table and will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the image doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the palette of the image at the index specified in the `param` argument. Indices start at 1. If `param2` is set to `True` the selected image is queried, if it is `False` (also the default) the normal image is queried. If there is no transparent pen or the image doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRFORMAT`: Returns the icon format name as a string. (V10.0)\n\n\n\nThe following attributes can be queried for `#INTERVAL`:\n\n- `#ATTRDURATION`: Returns the frequency of this interval object in milliseconds. (V4.5)\n\n- `#ATTRFUNCTION`: Returns the callback function associated with the specified interval object. (V4.5)\n\n- `#ATTRUSERDATA`: Returns the user data associated with this interval object. (V4.5)\n\n\n\nThe following attributes can be queried for `#LAYER`:\n\n- `#ATTRTYPE`: Returns the type of the layer (e.g. `#PRINT`). (V1.5)\n\n- `#ATTRXPOS`: Returns the x-position of the layer on the display. (V1.5)\n\n- `#ATTRYPOS`: Returns the y-position of the layer on the display. (V1.5)\n\n- `#ATTRWIDTH`: Returns width of the layer. (V1.5)\n\n- `#ATTRHEIGHT`: Returns height of the layer. (V1.5)\n\n- `#ATTRVISIBLE`: Returns `True` if the layer is currently visible, `False` if it is hidden. (V1.5)\n\n- `#ATTRLAYERID`: Returns the identifier of the specified layer; obviously, this makes only sense if you specify a layer name instead of an id as the source. (V2.0)\n\n- `#ATTRNUMFRAMES`: Returns the number of frames of this layer; only works when used with layers of type `#ANIM` (V2.0) or `#VIDEO` (V6.0).\n\n- `#ATTRCURFRAME`: Returns the frame which is currently displayed; works only with layers of type `#ANIM`. Note in contrast to most other commands, frames are counted from 0 here so you'll get 0 for the first frame, not 1. (V2.0)\n\n- `#ATTRTEXT, #ATTRFONTASCENDER, #ATTRFONTDESCENDER, #ATTRFONTNAME, #ATTRFONTSIZE, #ATTRFONTSCALABLE, #ATTRFONTAA, #ATTRFONTDEPTH, #ATTRFONTPALETTE, #ATTRFONTTRANSPARENTPEN, #ATTRFONTENGINE, #ATTRFONTTYPE, #ATTRFONTCHARMAP, #ATTRFONTLOADER, #ATTRFONTHEIGHT, #ATTRFONTFORMAT`: These attributes can be used with layers of type `#PRINT` and `#TEXTOUT` only; to learn more about them read below in the `#TEXTOBJECT` section. (V4.0)\n\n- `#ATTRFRAMEDELAY`: Returns the time anim players should wait after displaying the current frame in milliseconds; this works only with layers of type `#ANIM`. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many layers there are currently in memory. Useful for tracking memory consumption. Note that this will return the sum of all layers from all BGPics. If you want to query the number of layers in the current BGPic, use `#ATTRLAYERS` with type `#BGPIC`. (V4.5)\n\n- `#ATTRRAWXPOS, #ATTRRAWYPOS, #ATTRRAWWIDTH, #ATTRRAWHEIGHT`: These four attributes can be used to find out the real position and size of a layer. The difference between these attributes and the standard `#ATTRXPOS`, `#ATTRWIDTH` etc. attributes is that the standard attributes will always return the position and size of the basic, untransformed layer. The standard attributes will also not take any under/overhangs into account. Still, you should work with the standard attributes whenever possible because the `#ATTRRAWxxx` attributes operate on a low level in the layers system and could be affected by future changes in the layers system. (V4.7)\n\n- `#ATTRZPOS`: Returns the z-position of the layer. See [SetLayerZPos](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerZPos_.html). (V5.1)\n\n- `#ATTRDURATION`: Returns the video layer's source duration in milliseconds. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRPOSITION`: Returns the current position of a playing or paused video layer in milliseconds. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRFORMAT`: Returns the video layer's source format name as a string. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRCANSEEK`: Returns whether or not [SeekLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SeekLayer_.html) can be used on this video layer. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRPLAYING`: Returns `True` if this video layer is currently playing. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRPAUSED`: Return `True` if this video is layer currently paused. This is only supported for layers of type `#VIDEO`. (V6.0)\n\n- `#ATTRID`: Returns the identifier of this layer's source object. This is only applicable for layers of type `#ANIM`, `#BRUSH`, `#BRUSHPART`, `#BGPICPART`, `#TEXTOBJECT`, `#VECTORPATH` and `#VIDEO`. (V6.0)\n\n- `#ATTRDEPTH`: Returns the depth of the layer. If this is less than or equal to 8, the layer is a palette layer. (V9.0)\n\n- `#ATTRPALETTE`: Returns the layer's palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the layer doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the layer's palette. If there is no transparent pen or the layer doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRBUTTON`: If the layer is attached to a button, this will return the id of that button. Otherwise [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) will be returned. (V9.1)\n\n- `#ATTRGROUP`: Returns the name of the group that this layer is attached to or an empty string if the layer isn't attached to a group. See [GroupLayer](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html). (V10.0)\n\nPlease note that the position and size values will always refer to the layer in its original, untransformed state. If you rotate or scale a layer, you will still get its original dimensions through `#ATTRWIDTH` and `#ATTRHEIGHT`. \n\nThe following attributes can be queried for `#MEMORY`:\n\n- `#ATTRSIZE`: Returns the size of specified memory block. (V4.5)\n\n- `#ATTRCOUNT`: Returns how many memory blocks there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n\n\nThe following attributes can be queried for `#MENU`:\n\n- `#ATTRCOUNT`: Returns how many menu strips are currently available. Useful for keeping track of the resources used by your script. (V6.0)\n\n\n\nThe following attributes can be queried for `#MOVELIST`:\n\n- `#ATTRCOUNT`: Returns how many move list objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n\n\nThe following attributes can be queried for `#MUSIC`:\n\n- `#ATTRTYPE`: Returns the format of the music raw data; this attribute will return one of `#MONO8`, `#MONO16`, `#STEREO8` and `#STEREO16`; not possible with Protracker modules. (V2.0)\n\n- `#ATTRDURATION`: Returns the music duration in milliseconds. This is unsupported for Protracker modules. If you query `#ATTRDURATION` for Protracker modules, -1 will be returned. (V2.0)\n\n- `#ATTRPITCH`: Returns the playback pitch (frequency) of the music in Hertz; not possible with Protracker modules. (V2.0)\n\n- `#ATTRPOSITION`: Returns the position of the music object in milliseconds. (V2.0)\n\n- `#ATTRFORMAT`: Returns the music format as a string. (V2.0)\n\n- `#ATTRBITRATE`: Returns the bitrate of the music object; if the music object is currently playing and uses a variable bitrate, you will receive the bitrate of the current frame; not possible with Protracker modules. (V2.0)\n\n- `#ATTRCOUNT`: Returns how many music objects there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRCANSEEK`: Returns whether or not [SeekMusic()](https://www.hollywood-mal.com/docs/html/hollywood/SeekMusic_.html) can be used on this music object. (V5.0)\n\n- `#ATTRNUMSUBSONGS`: Returns the number of subsongs which you can play using [PlaySubsong()](https://www.hollywood-mal.com/docs/html/hollywood/PlaySubsong_.html). If this 1, then there is only one song in the music object. (V5.3)\n\n- `#ATTRCURSUBSONG`: Returns the number of the currently playing subsong. (V5.3)\n\n- `#ATTRPLAYING`: Returns `True` if this music object is currently playing. (V6.0)\n\n- `#ATTRPAUSED`: Return `True` if this music object is currently paused. (V6.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this music object. (V6.0)\n\n\n\nThe following attributes can be queried for `#PALETTE`:\n\n- `#ATTRPALETTE`: Returns the palette's pens as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the palette. If there is no transparent pen, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRDEPTH`: Returns the depth of the palette. This will always be a value between 1 (= 2 colors) and 8 (= 256 colors). (V9.0)\n\n- `#ATTRCYCLE`: If the palette is a one which has color cycling ranges defined, this attribute will return a table containing all color cycling ranges that are defined. In that case, the table returned by `#ATTRCYCLE` will contain a number of subtables which will have the following fields initialized:\n\n  - `Low`: The pen index that marks that start of the color range.\n\n  - `High`: The pen index that marks the end of the color range.\n\n  - `Rate`: The desired speed of the color cycling effect. A value of 16384 indicates 60 frames per second. All other speeds scale linearly from this base, e.g. a value of 8192 indicates 30 frames per second, and so on.\n\n  - `Reverse`: If this tag is set to `True`, the colors should be cycled in reverse.\n\n  - `Active`: If this tag is set to `True`, this color cycling range is marked as active.\n\n  (V9.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this palette. (V9.0)\n\n- `#ATTRCOUNT`: Returns how many palette objects there are currently in memory. Useful for tracking memory consumption. (V9.0)\n\n\n\nThe following attributes can be queried for `#POINTER`:\n\n- `#ATTRWIDTH`: Returns the width of the pointer image. (V4.5)\n\n- `#ATTRHEIGHT`: Returns the height of the pointer image. (V4.5)\n\n- `#ATTRTYPE`: Returns type of this pointer image; can be `#STDPTR_CUSTOM`, `#STDPTR_SYSTEM` or `#STDPTR_BUSY`; See [CreatePointer](https://www.hollywood-mal.com/docs/html/hollywood/CreatePointer_.html). (V4.5)\n\n- `#ATTRCOUNT`: Returns how many pointer images there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n\n\nThe following attributes can be queried for `#SAMPLE`:\n\n- `#ATTRTYPE`: Returns the format of the samples raw data; this attribute will return one of `#MONO8`, `#MONO16`, `#STEREO8` and `#STEREO16`. (V2.0)\n\n- `#ATTRDURATION`: Returns the sample duration in milliseconds. (V2.0)\n\n- `#ATTRPITCH`: Returns the playback pitch (frequency) of the sample in hertz. (V2.0)\n\n- `#ATTRPOSITION`: Returns how long the sample has been playing and how many times it has looped. The position returned will be a value in milliseconds (1000 milliseconds = 1 second). This value will be reset everytime the sample loops so that the returned position value will never exceed the sample length. The second return value specifies how many times the sample was played. It will be increased by one every time the sample loops. If you need to find out the total playing time in milliseconds, just multiply the second return value minus 1 by the sample duration (use `#ATTRDURATION`) and add the first return value to it. (V2.0)\n\n- `#ATTRCOUNT`: Returns how many samples there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRNUMFRAMES`: Returns the number of PCM frames in the sample. (V5.0)\n\n- `#ATTRPLAYING`: Returns `True` if this sample is currently playing. (V6.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this sample. (V6.0)\n\n- `#ATTRFORMAT`: Returns the sound format name as a string. (V10.0)\n\n\n\nThe following attributes can be queried for `#SERIAL`:\n\n- `#ATTRCOUNT`: Returns how many serial connection objects are currently in memory. Useful for keeping track of the resources used by your script. (V8.0)\n\n\n\nThe following attributes can be queried for `#SERVER`:\n\n- `#ATTRCOUNT`: Returns how many network server objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n\n\nThe following attributes can be queried for `#SPRITE`:\n\n- `#ATTRWIDTH`: Returns width of the sprite. (V2.0)\n\n- `#ATTRHEIGHT`: Returns height of the sprite. (V2.0)\n\n- `#ATTRTRANSPARENTCOLOR`: Returns the transparent color of the sprite or `#NOTRANSPARENCY`. (V2.0)\n\n- `#ATTRHASMASK`: Returns `True` if sprite has a mask. (V2.0)\n\n- `#ATTRHASALPHA`: Returns `True` if sprite has an alpha channel. (V2.0)\n\n- `#ATTRNUMFRAMES`: Returns the number of frames in this sprite. (V2.0)\n\n- `#ATTRCURFRAME`: Returns the frame which is currently displayed. (V2.0)\n\n- `#ATTRONSCREEN`: Returns `True` if the specified sprite is currently on screen. (V2.5)\n\n- `#ATTRXPOS`: Returns the x-position of the sprite on the screen. (V2.5)\n\n- `#ATTRYPOS`: Returns the y-position of the sprite on the screen. (V2.5)\n\n- `#ATTRCOUNT`: Returns how many sprites there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRZPOS`: Returns the z-position of the sprite. See [SetSpriteZPos](https://www.hollywood-mal.com/docs/html/hollywood/SetSpriteZPos_.html). (V7.0)\n\n- `#ATTRDEPTH`: Returns the depth of the frame specified in the `param` argument. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. If the depth is less than or equal to 8, the sprite is a palette sprite. (V9.0)\n\n- `#ATTRPALETTE`: Returns the palette of the frame specified in the `param` argument. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. The frame's palette will be returned as a table and will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the frame doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the palette of the frame specified by `param`. Frames are counted from 1. If the `param` argument is omitted, the first frame will be used. If there is no transparent pen or the frame doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n\n\nThe following attributes can be queried for `#TEXTOBJECT`:\n\n- `#ATTRWIDTH`: Returns width of the text object.\n\n- `#ATTRHEIGHT`: Returns height of the text object.\n\n- `#ATTRFONTASCENDER`: Returns the ascender of the current font in pixels; the ascender of a font is the maximum character extent from the baseline to the top of the line; ascender + descender is always equal to the font's pixel height. (V3.1)\n\n- `#ATTRFONTDESCENDER`: Returns the descender of the current font in pixels; the descender of a font is the maximum character extent from the baseline to the bottom of the line; ascender + descender is always equal to the font's pixel height. (V3.1)\n\n- `#ATTRFONTNAME`: Returns the name of the currently selected font. (V3.1)\n\n- `#ATTRFONTSIZE`: Returns the size of the currently selected font. (V3.1)\n\n- `#ATTRFONTSCALABLE`: Returns `True` if the font is a scalable vector font. (V3.1)\n\n- `#ATTRFONTAA`: Returns `True` if the font can be anti-aliased. (V3.1)\n\n- `#ATTRTEXT`: Returns the text string of this text object. (V4.0)\n\n- `#ATTRCOUNT`: Returns how many text objects there are currently in memory. Useful for tracking memory consumption. (V4.5)\n\n- `#ATTRDEPTH`: Returns the depth of the text object. If this is less than or equal to 8, the brush is a palette text object. (V9.0)\n\n- `#ATTRPALETTE`: Returns the text object's palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). If the text object doesn't have a palette, an empty table will be returned. (V9.0)\n\n- `#ATTRTRANSPARENTPEN`: Returns the pen that is transparent in the text object's palette. If there is no transparent pen or the text object doesn't have a palette, `#NOPEN` will be returned. (V9.0)\n\n- `#ATTRTYPE`: Returns the type of the text object. This will be set to either `#IMAGETYPE_RASTER` for a raster text object or `#IMAGETYPE_VECTOR` for a vector text object. (V10.0)\n\n- `#ATTRFONTDEPTH`: If the font is an Amiga color font, this attribute will return its depth. (V9.0)\n\n- `#ATTRFONTPALETTE`: If the font is an Amiga color font, this attribute will return its palette as a table. The table will contain as many items as there are pens in the palette. The individual pens will be returned as [RGB colors](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). (V9.0)\n\n- `#ATTRFONTTRANSPARENTPEN`: If the font is an Amiga color font, this attribute will return the pen that is transparent in the font's palette. (V9.0)\n\n- `#ATTRFONTENGINE`: Returns the engine that was used to open this font. This will be either `#FONTENGINE_INBUILT`, `#FONTENGINE_NATIVE` or `#FONTENGINE_PLUGIN`. See [SetFont](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html). (V9.0)\n\n- `#ATTRFONTTYPE`: Returns the font type. This can be one of the following types:\n\n  - `#FONTTYPE_BITMAP`: An Amiga bitmap font.\n\n  - `#FONTTYPE_COLOR`: An Amiga color font.\n\n  - `#FONTTYPE_VECTOR`: A vector font, e.g. in TrueType or OpenType format.\n\n  - `#FONTTYPE_BRUSH`: A custom font created from a brush source using the [CreateFont()](https://www.hollywood-mal.com/docs/html/hollywood/CreateFont_.html) command. See [CreateFont](https://www.hollywood-mal.com/docs/html/hollywood/CreateFont_.html). (V10.0)\n\n  (V9.0)\n\n- `#ATTRFONTCHARMAP`: Returns the character map used by the font. This is only supported by fonts managed by the inbuilt font engine, i.e. the font must have been opened using `#FONTENGINE_INBUILT`. See [GetCharMaps](https://www.hollywood-mal.com/docs/html/hollywood/GetCharMaps_.html). (V9.0)\n\n- `#ATTRFONTLOADER`: Returns the name of the loader that was used to load this font. (V10.0)\n\n- `#ATTRFONTHEIGHT`: Returns the pixel height of the font. This is often the same as `#ATTRFONTSIZE` but not if the font has been opened in points mode or if the underlying text engine interprets the font size as something different from the font height. In any case, `#ATTRFONTHEIGHT` will always be the same as `#ATTRFONTASCENDER` + `#ATTRFONTDESCENDER`. (V10.0)\n\n- `#ATTRFONTFORMAT`: Returns the font format name as a string. (V10.0)\n\n- `#ATTRADJUSTX`: When drawing text objects using [DisplayTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTextObject_.html) Hollywood will position them in a way that they appear as if they had been drawn using [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) which means that they could be offset to the left and top in case parts of some characters are designed to appear in the area of previous characters. This is often the case with characters like \"j\". You can query the number of horizontal pixels Hollywood will offset the text object by querying this tag. Adjustment of text objects can be disabled by setting `NoAdjust` to `True` when calling [CreateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateTextObject_.html). (V10.0)\n\n- `#ATTRADJUSTY`: This does the same as `#ATTRADJUSTX` (see above) but returns the vertical adjustment pixels for this text object. (V10.0)\n\n\n\nThe following attributes can be queried for `#TIMEOUT`:\n\n- `#ATTRDURATION`: Returns the timeout duration of this timeout object in milliseconds. (V4.5)\n\n- `#ATTRFUNCTION`: Returns the callback function associated with the specified timeout object. (V4.5)\n\n- `#ATTRUSERDATA`: Returns the user data associated with this timeout object. (V4.5)\n\n\n\nThe following attributes can be queried for `#TIMER`:\n\n- `#ATTRCOUNT`: Returns how many timer objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n- `#ATTRELAPSE`: Returns the timer's elapse threshold. (V9.0)\n\n\n\nThe following attributes can be queried for `#UDPOBJECT`:\n\n- `#ATTRCOUNT`: Returns how many UDP objects are currently in memory. Useful for keeping track of the resources used by your script. (V5.0)\n\n\n\nThe following attributes can be queried for `#VECTORPATH`:\n\n- `#ATTRCOUNT`: Returns how many vector path objects there are currently in memory. Useful for tracking memory consumption. (V5.0)\n\n\n\nThe following attributes can be queried for `#VIDEO`:\n\n- `#ATTRWIDTH`: Returns width of the video. (V5.0)\n\n- `#ATTRHEIGHT`: Returns height of the video. (V5.0)\n\n- `#ATTRDURATION`: Returns the total video duration in milliseconds. (V5.0)\n\n- `#ATTRPOSITION`: Returns the current position of a playing or paused video in milliseconds. (V5.0)\n\n- `#ATTRFORMAT`: Returns the video format name as a string. (V5.0)\n\n- `#ATTRNUMFRAMES`: Returns the number of frames of this video. Please note that this is often an approximation because it would take too much time to do a precise calculation of all frames in a video stream. This can also return 0 if the video codec does not support frame calculation. (V5.0)\n\n- `#ATTRCOUNT`: Returns how many videos there are currently in memory. Useful for tracking memory consumption. (V5.0)\n\n- `#ATTRCANSEEK`: Returns whether or not [SeekVideo()](https://www.hollywood-mal.com/docs/html/hollywood/SeekVideo_.html) can be used on this video object. (V5.0)\n\n- `#ATTRDRIVER`: Returns the driver used for this video. See [ForceVideoDriver](https://www.hollywood-mal.com/docs/html/hollywood/ForceVideoDriver_.html). This is obsolete since Hollywood 6.0. Use `#ATTRLOADER` instead. (V5.1)\n\n- `#ATTRPLAYING`: Returns `True` if this video is currently playing. (V6.0)\n\n- `#ATTRPAUSED`: Return `True` if this video is currently paused. (V6.0)\n\n- `#ATTRSCALEWIDTH`: Returns the current scale width set for the video using [SetVideoSize()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoSize_.html). (V6.0)\n\n- `#ATTRSCALEHEIGHT`: Returns the current scale height set for the video using [SetVideoSize()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoSize_.html). (V6.0)\n\n- `#ATTRSCALEMODE`: Returns the current scale mode set for the video using [SetVideoSize()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoSize_.html). (V6.0)\n\n- `#ATTRLOADER`: Returns the name of the loader that was used to load this video. (V6.0)",
    "inputsDocs": "* `obj` — type of object to query (see list above)\n* `id` — object identifier\n* `attr` — which information to return\n* `param` — optional: additional parameter required by some attributes (see above)",
    "resultsDocs": "* `info` — the information you wanted",
    "example": "```\nwidth = GetAttribute(#DISPLAY, 0, #ATTRWIDTH)\n```\n\nThe above code queries the display for its current width. As there is only one display, you do not have to specify an id.",
    "platforms": ["All"],
    "insertText": "GetAttribute(${1:obj}, ${2:id}, ${3:attr})"
  },
  {
    "name": "GetObjectData",
    "helpId": "GetObjectData",
    "shortDescription": "retrieve private data from an object",
    "version": "5.0",
    "synopsis": "data = GetObjectData(type, id, key$)",
    "functionDocs": "This function can be used to retrieve private data from an object that has been stored using the [SetObjectData()](https://www.hollywood-mal.com/docs/html/hollywood/SetObjectData_.html) function. Just pass the type and the identifier of the object and the `key$` under which the data was stored to this function and it will return the corresponding data.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — type of the object\n* `id` — identifier of the object\n* `key$` — key under which the data was stored",
    "resultsDocs": "* `data` — data that has been stored under the specified key",
    "example": "See [SetObjectData](https://www.hollywood-mal.com/docs/html/hollywood/SetObjectData_.html)",
    "platforms": ["All"],
    "insertText": "GetObjectData(${1:type}, ${2:id}, ${3:key$})"
  },
  {
    "name": "GetObjects",
    "helpId": "GetObjects",
    "shortDescription": "get all objects of specified type",
    "version": "5.1",
    "synopsis": "table, count = GetObjects(type)",
    "functionDocs": "This function can be used to retrieve a list of all objects of the specified type that are currently in memory. This function will return a table containing the identifiers of the objects as well as the total number of objects of the specified type.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — return objects of this type",
    "resultsDocs": "* `table` — a table containing identifiers of all objects of the specified type\n* `count` — number of items in the table",
    "example": "```\nt, c = GetObjects(#BRUSH)\nFor Local k = 0 To c - 1 Do DebugPrint(t[k])\n```\n\nThe code above will list all objects of type `#BRUSH` currently in memory.",
    "platforms": ["All"],
    "insertText": "GetObjects(${1:type})"
  },
  {
    "name": "GetObjectType",
    "helpId": "GetObjectType",
    "shortDescription": "retrieve type of an object handle",
    "version": "5.0",
    "synopsis": "type = GetObjectType(handle)",
    "functionDocs": "This function returns the type of the specified object handle. The object handle passed to this function must have been created using automatic id selection. See [Auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html).\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `handle` — handle of object whose type you want to retrieve",
    "resultsDocs": "* `type` — type of the object handle",
    "example": "```\nmy_anim = LoadAnim(Nil, \"test.gif\")\nmy_brush = LoadBrush(Nil, \"test.png\")\nDebugPrint(GetObjectType(my_anim), GetObjectType(my_brush))\n```\n\nThe code above will print the values of constants `#ANIM` and `#BRUSH`.",
    "platforms": ["All"],
    "insertText": "GetObjectType(${1:handle})"
  },
  {
    "name": "HaveObject",
    "helpId": "HaveObject",
    "shortDescription": "check if a certain object is available",
    "version": "5.2",
    "synopsis": "r = HaveObject(type, id)",
    "functionDocs": "This function can be used to check whether a certain object has already been loaded. Just pass the object's type and identifier to this function and it will return `True` or `False` depending on whether or not the object is in memory.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — type of the object to check\n* `id` — identifier of the object to check",
    "resultsDocs": "* `r` — `True` if object is available, `False` otherwise",
    "example": "```\nDebugPrint(HaveObject(#BRUSH, 1))\n```\n\nThe code above prints `True` if brush number 1 is in memory, otherwise `False`.",
    "platforms": ["All"],
    "insertText": "HaveObject(${1:type}, ${2:id})"
  },
  {
    "name": "HaveObjectData",
    "helpId": "HaveObjectData",
    "shortDescription": "check if data exists in an object",
    "version": "6.1",
    "synopsis": "b = HaveObjectData(type, id, key$)",
    "functionDocs": "This function can be used to check if private data has been stored in an object under the specified key using the [SetObjectData()](https://www.hollywood-mal.com/docs/html/hollywood/SetObjectData_.html) function. Just pass the type and the identifier of the object and the `key$` to check to this function and it will return whether there is data for the key or not.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — type of the object\n* `id` — identifier of the object\n* `key$` — key to query",
    "resultsDocs": "* `b` — `True` if the key has data, `False` otherwise",
    "platforms": ["All"],
    "insertText": "HaveObjectData(${1:type}, ${2:id}, ${3:key$})"
  },
  {
    "name": "SetObjectData",
    "helpId": "SetObjectData",
    "shortDescription": "store private data in an object",
    "version": "5.0",
    "synopsis": "SetObjectData(type, id, key$, value)",
    "functionDocs": "This function can be used to associate any kind of private data with an object. You have to pass the type and identifier of the object as well as a key string under which the data should be stored inside the object structure. `value` can be any kind of Hollywood data value: It can be a string, a table, a number, or even a function. Everything is possible. If the key specified in `key$` is already used inside the object, the old data will be replaced with the new one.\n\nTo access the data later, you can use the [GetObjectData()](https://www.hollywood-mal.com/docs/html/hollywood/GetObjectData_.html) function.\n\nSee [Object types](https://www.hollywood-mal.com/docs/html/hollywood/ObjectTypes_.html).",
    "inputsDocs": "* `type` — type of the object to use\n* `id` — identifier of the object to use\n* `key$` — key under which the data should be stored\n* `value` — data to store",
    "example": "```\nSetObjectData(#BRUSH, 1, \"brushgroup\", \"A\")\nd$ = GetObjectData(#BRUSH, 1, \"brushgroup\")\n```\n\nThe code above stores the value \"A\" in brush 1 under the key \"brushgroup\" and then retrieves it again. `d$` will be set to \"A\".",
    "platforms": ["All"],
    "insertText": "SetObjectData(${1:type}, ${2:id}, ${3:key$}, ${4:value})"
  }
]
