[
  {
    "name": "CompareDates",
    "helpId": "CompareDates",
    "shortDescription": "compare two date strings",
    "version": "4.5",
    "synopsis": "result = CompareDates(date1$, date2$[, notime])",
    "functionDocs": "This function can be used to compare the time of two date strings and return their relation. Both date strings must be in the default time notation used by Hollywood:\n\n```\ndd-mmm-yyyy hh:mm:ss\n```\n\nThe `mmm` constituent is a string with three characters identifying the month. This can be `Jan`, `Feb`, `Mar`, `Apr`, `May`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, or `Dec`.\n\nIf you set the optional argument `notime` to `True`, only dates are compared. In that case, the two strings you pass to `CompareDates()` must not contain any time specifications.\n\nThe return value of `CompareDates()` indicates how the two dates are related. The following return values are possible:\n\n- 0: `date1$` and `date$` have exactly the same time\n\n- 1: `date1$` is later in time than `date2$`\n\n- 2: `date1$` is earlier in time than `date2$`",
    "inputsDocs": "* `date1$` — date string in the Hollywood date notation\n* `date2$` — date string in the Hollywood date notation\n* `notime` — optional: `True` to compare dates only (defaults to `False`)",
    "resultsDocs": "* `result` — result of comparison",
    "example": "```\nNPrint(CompareDates(\"10-Dec-2009 13:34:12\", \"09-Dec-2009 15:36:21\"))\nNPrint(CompareDates(\"12-Dec-2009 23:59:59\", \"13-Dec-2009 00:00:00\"))\nNPrint(CompareDates(\"24-Dec-2009 20:00:00\", \"24-Dec-2009 20:00:00\"))\n```\n\nThe code above will do three date comparisons. The results will be: 1,2,0",
    "platforms": ["All"],
    "insertText": "CompareDates(${1:date1$}, ${2:date2$})"
  },
  {
    "name": "DateToTimestamp",
    "helpId": "DateToTimestamp",
    "shortDescription": "convert local date to timestamp",
    "version": "7.1",
    "synopsis": "s = DateToTimestamp(d$[, isdst])",
    "functionDocs": "This function can be used to get the timestamp for the date passed in `d$`. This string must be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareDates](https://www.hollywood-mal.com/docs/html/hollywood/CompareDates_.html).\n\nNote that the date that you pass to this function is interpreted as local time whereas the timestamp returned starts from UTC time, i.e. from the Unix epoch which starts on January 1st, 1970, 00:00:00 UTC. This means that passing `01-Jan-1970 00:00:00` will only return 0 if the local timezone is identical to the UTC timezone. On systems east of UTC, passing the `01-Jan-1970 00:00:00` will lead to an error because January 1st, 1970, 00:00:00, east of UTC means December 31st, 1969 UTC which cannot be represented in the Unix epoch.\n\nThe optional argument `isdst` specifies whether or not daylight saving time is active at the specified date. Normally, you don't have to specify this argument because Hollywood will automatically query this information from the timezone database. It is only necessary to pass this information in case the specified time is ambiguous, i.e. when switching from daylight saving time back to standard time, a certain period of time (typically an hour) is repeated in the night. In Germany, for example, clocks are set back from 3am to 2am when switching from daylight saving time to standard time. This means that the hour between 2am and 3am happens twice: Once in daylight saving time, once in standard time. The `isdst` argument allows you to specify which hour you are referring to.\n\nTo convert a timestamp back into a date, use the [TimestampToDate()](https://www.hollywood-mal.com/docs/html/hollywood/TimestampToDate_.html) function. See [TimestampToDate](https://www.hollywood-mal.com/docs/html/hollywood/TimestampToDate_.html).",
    "inputsDocs": "* `d$` — Hollywood date to convert to the timestamp format\n* `isdst` — optional: whether or not daylight saving time is active at the specified date (defaults to -1 which means that this information should be retrieved from the local timezone database)",
    "resultsDocs": "* `s` — time in seconds that has elapsed since the Unix epoch or -1 if the specified date cannot be represented in Unix time",
    "platforms": ["All"],
    "insertText": "DateToTimestamp(${1:d$})"
  },
  {
    "name": "DateToUTC",
    "helpId": "DateToUTC",
    "shortDescription": "convert local date to UTC",
    "version": "7.1",
    "synopsis": "u$ = DateToUTC(d$[, isdst])",
    "functionDocs": "This function can be used to convert the local date passed in `d$` to a UTC date. The `d$` parameter must be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareDates](https://www.hollywood-mal.com/docs/html/hollywood/CompareDates_.html).\n\nThe optional argument `isdst` specifies whether or not daylight saving time is active at the specified date. Normally, you don't have to specify this argument because Hollywood will automatically query this information from the timezone database. It is only necessary to pass this information in case the specified time is ambiguous, i.e. when switching from daylight saving time back to standard time, a certain period of time (typically an hour) is repeated in the night. In Germany, for example, clocks are set back from 3am to 2am when switching from daylight saving time to standard time. This means that the hour between 2am and 3am happens twice: Once in daylight saving time, once in standard time. The `isdst` argument allows you to specify which hour you are referring to.\n\nTo convert a UTC date back into a local date, use the [UTCToDate()](https://www.hollywood-mal.com/docs/html/hollywood/UTCToDate_.html) function. See [UTCToDate](https://www.hollywood-mal.com/docs/html/hollywood/UTCToDate_.html).",
    "inputsDocs": "* `d$` — local date to convert to UTC date\n* `isdst` — optional: whether or not daylight saving time is active at the specified date (defaults to -1 which means that this information should be retrieved from the local timezone database)",
    "resultsDocs": "* `u$` — UTC equivalent of the local date argument",
    "platforms": ["All"],
    "insertText": "DateToUTC(${1:d$})"
  },
  {
    "name": "GetDate",
    "helpId": "GetDate",
    "shortDescription": "get current date",
    "version": "1.0",
    "synopsis": "date$ = GetDate([type])",
    "functionDocs": "This function can be used to query the current system date and time. Date and time can be returned in various formats depending on the value passed in `type`.\n\nThe following formats are currently recognized by `type`:\n\n- `#DATELOCALNATIVE`: This is the default format. If `type` is omitted, `GetDate()` will fall back to this type. `#DATELOCALNATIVE` will return the date in the system's language. For example, on a German system September 4th 2002 will be returned as \"04.09.02\" but on a system in the USA it would be \"09.04.02\". Note that the time isn't returned at all for this type.\n\n- `#DATELOCAL`: This will return the date in Hollywood's standard date and time format. It looks like the following:\n\n  ```\n  dd-mmm-yyyy hh:mm:ss\n  ```\n\n  September 4th 2002 at 3.16pm and 23 seconds would look like this in the default Hollywood notation:\n\n  ```\n  04-Sep-2002 15:16:23\n  ```\n\n  This notation is also used by other Hollywood commands, for example by the following commands: [GetFileAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/GetFileAttributes_.html), [SetFileAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetFileAttributes_.html), [FileAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/FileAttributes_.html), and [CompareDates()](https://www.hollywood-mal.com/docs/html/hollywood/CompareDates_.html).\n\n  Note that even though `#DATELOCAL` is the most common type for this function, it is not the default due to historic purposes. `#DATELOCALNATIVE` is the default type. (V4.5)\n\n- `#DATEUTC`: If you pass `#DATEUTC` for `type`, `GetDate()` will return the current UTC date and time. The UTC date and time will be passed in Hollywood's default date and time notation (see above). (V7.1)",
    "inputsDocs": "* `type` — date and time format that should be used (V4.5)",
    "resultsDocs": "* `date$` — current date and time in the desired format",
    "platforms": ["All"],
    "insertText": "GetDate()"
  },
  {
    "name": "GetDateNum",
    "helpId": "GetDateNum",
    "shortDescription": "get date information as a value",
    "version": "1.0",
    "synopsis": "info = GetDateNum(type)",
    "functionDocs": "This function allows you to retrieve date information as a value from Hollywood. The following constants can be specified as `type`:\n\n- `#DATEDAY`: Returns the day of the month (1-31)\n\n- `#DATEMONTH`: Returns the month (1-12)\n\n- `#DATETIME`: Returns the time (00hhmmss)\n\n- `#DATEYEAR`: Returns the year (yyyy)",
    "inputsDocs": "* `type` — one of the constants as listed above",
    "resultsDocs": "* `info` — day, month, time or year information",
    "platforms": ["All"],
    "insertText": "GetDateNum(${1:type})"
  },
  {
    "name": "GetTime",
    "helpId": "GetTime",
    "shortDescription": "get the current time",
    "version": "1.0",
    "synopsis": "time$ = GetTime([secs])",
    "functionDocs": "This function gets the current time at returns it to `time$`. If the optional argument `secs` is `True`, Hollywood will also add the seconds to the time string.",
    "inputsDocs": "* `secs` — optional: set this to `True` if you want to retrieve the seconds also",
    "resultsDocs": "* `time$` — current time as a string",
    "platforms": ["All"],
    "insertText": "GetTime()"
  },
  {
    "name": "GetTimer",
    "helpId": "GetTimer",
    "shortDescription": "get a timer's state",
    "version": "1.0",
    "synopsis": "time = GetTimer(id)",
    "functionDocs": "This function returns the timer's state, which is the time that has passed since the timer was started with [StartTimer()](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html). The time is returned in milliseconds.",
    "inputsDocs": "* `id` — identifier of the timer to query for its state",
    "resultsDocs": "* `time` — number of milliseconds that have passed since the timer was started (with respect to [PauseTimer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseTimer_.html) and [ResumeTimer()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeTimer_.html))",
    "example": "See [StartTimer](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html)",
    "platforms": ["All"],
    "insertText": "GetTimer(${1:id})"
  },
  {
    "name": "GetTimestamp",
    "helpId": "GetTimestamp",
    "shortDescription": "get timestamp",
    "version": "7.0",
    "synopsis": "s = GetTimestamp([type])",
    "functionDocs": "This function returns a timestamp. The time is returned in seconds as a fractional number, allowing for sufficient precision. The `type` parameter allows you to specify what kind of timestamp you'd like to get. This can be one of the following:\n\n- `#TIMESTAMP_START`: Return the time in seconds since Hollywood was started. This is the default.\n\n- `#TIMESTAMP_UNIX`: Return the time that has elapsed since the Unix epoch which started on January 1st, 1970, 00:00:00 UTC. Note that this depends on the system clock so there could be problems if the system clock is changed while your script is running. If you want to be independent of the system clock, use `#TIMESTAMP_RAW` instead (see below).\n\n- `#TIMESTAMP_RAW`: Return a raw clock value that is independent of the system clock and is monotonically increasing. This can be useful because `#TIMESTAMP_UNIX` depends on the system clock because it returns the number of seconds since January 1st, 1970 so you could be in trouble in case the system clock is changed between two `GetTimestamp()` calls. (V9.1)\n\n`GetTimestamp()` is especially useful in connection with Hollywood's event handler. All event messages will contain a field named `Timestamp` which contains the timestamp the event was generated. If you compare this time stamp against the return value of `GetTimestamp()`, you can filter out very old events, for example. See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\nTo convert a timestamp into a date, you can use the [TimestampToDate()](https://www.hollywood-mal.com/docs/html/hollywood/TimestampToDate_.html) function. To convert a date into a timestamp, use the [DateToTimestamp()](https://www.hollywood-mal.com/docs/html/hollywood/DateToTimestamp_.html) function.",
    "inputsDocs": "* `type` — optional: the kind of timestamp to get; see above for possible types (defaults to `#TIMESTAMP_START`)",
    "resultsDocs": "* `s` — timestamp in seconds as a fractional number",
    "platforms": ["All"],
    "insertText": "GetTimestamp()"
  },
  {
    "name": "GetTimeZone",
    "helpId": "GetTimeZone",
    "shortDescription": "get time zone information",
    "version": "7.1",
    "synopsis": "off, dst = GetTimeZone()",
    "functionDocs": "This function can be used to obtain information about the time zone the host system is in. It will return two values: `off` will be set to the number of minutes of this computer's time from UTC and `dst` will be a boolean value that specifies whether or not daylight saving time is currently active in the host system's time zone.\n\nNote that `off` will be negative if the host system is east of UTC and positive if it is west of UTC.",
    "inputsDocs": "none",
    "resultsDocs": "* `off` — offset in minutes from UTC\n* `dst` — `True` if daylight saving time is currently active, `False` otherwise",
    "example": "```\nPrint(GetTimeZone())\n```\n\nWhen run in January on a computer in Germany, this will print \"-60\" and \"0\" because there is no daylight saving time in Germany in January and CET is 60 minutes ahead of UTC in winter.",
    "platforms": ["All"],
    "insertText": "GetTimeZone()"
  },
  {
    "name": "GetWeekday",
    "helpId": "GetWeekday",
    "shortDescription": "get the weekday",
    "version": "1.0",
    "synopsis": "day$ = GetWeekday()",
    "functionDocs": "This function returns the weekday to the string `day$`. Note that the weekday will be returned in the user's native language (depending on his locale settings).",
    "inputsDocs": "none",
    "resultsDocs": "* `day$` — current weekday",
    "platforms": ["All"],
    "insertText": "GetWeekday()"
  },
  {
    "name": "MakeDate",
    "helpId": "MakeDate",
    "shortDescription": "make Hollywood date from components",
    "version": "7.1",
    "synopsis": "d$ = MakeDate(t)",
    "functionDocs": "This function composes a Hollywood date from a set of individual date components which have to be passed in the table `t`. The date that is returned by this function will be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareStr](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html).\n\nYou have to pass a table to `MakeDate()` that has the following fields initialized:\n\n- `MDay`: Day of the month (1-31).\n\n- `Mon`: Month of the year (1-12).\n\n- `Year`: Number of the year (e.g. 2018).\n\n- `Hour`: Hours since midnight (0-23).\n\n- `Min`: Minutes after the hour (0-59).\n\n- `Sec`: Seconds after the minute (0-59).\n\nTo break down a Hollywood date into its individual components, use the [ParseDate()](https://www.hollywood-mal.com/docs/html/hollywood/ParseDate_.html) function. See [ParseDate](https://www.hollywood-mal.com/docs/html/hollywood/ParseDate_.html).",
    "inputsDocs": "* `t` — table describing the date to compose (see above)",
    "resultsDocs": "* `d$` — date string in Hollywood's standard date format",
    "platforms": ["All"],
    "insertText": "MakeDate(${1:t})"
  },
  {
    "name": "ParseDate",
    "helpId": "ParseDate",
    "shortDescription": "break down Hollywood date into components",
    "version": "7.1",
    "synopsis": "t = ParseDate(d$)",
    "functionDocs": "This function parses the Hollywood date passed in `d$` and breaks it down into its individual components. Those components are then returned in a table. The date string passed to this function must be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareStr](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html).\n\n`ParseDate()` will return a table with the following fields initialized:\n\n- `MDay`: Day of the month (1-31).\n\n- `Mon`: Month of the year (1-12).\n\n- `Year`: Number of the year (e.g. 2018).\n\n- `Hour`: Hours since midnight (0-23).\n\n- `Min`: Minutes after the hour (0-59).\n\n- `Sec`: Seconds after the minute (0-59).\n\n- `WDay`: Days since Sunday (0-6).\n\n- `YDay`: Days since January 1 (0-365).\n\nTo compose a Hollywood date from its individual components, use the [MakeDate()](https://www.hollywood-mal.com/docs/html/hollywood/MakeDate_.html) function. See [MakeDate](https://www.hollywood-mal.com/docs/html/hollywood/MakeDate_.html).",
    "inputsDocs": "* `d$` — Hollywood date to decompose",
    "resultsDocs": "* `t` — table containing individual date components (see above)",
    "platforms": ["All"],
    "insertText": "ParseDate(${1:d$})"
  },
  {
    "name": "PauseTimer",
    "helpId": "PauseTimer",
    "shortDescription": "pause a timer",
    "version": "1.0",
    "synopsis": "PauseTimer(id)",
    "functionDocs": "This function pauses the timer specified by `id`. When a timer is paused, it does not count the time but you can still retrieve the timer's state through [GetTimer()](https://www.hollywood-mal.com/docs/html/hollywood/GetTimer_.html). The timer can be resumed by calling [ResumeTimer()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeTimer_.html).",
    "inputsDocs": "* `id` — identifier of the timer to pause",
    "example": "```\nnone\n```",
    "platforms": ["All"],
    "insertText": "PauseTimer(${1:id})"
  },
  {
    "name": "ResetTimer",
    "helpId": "ResetTimer",
    "shortDescription": "reset a timer",
    "version": "4.5",
    "synopsis": "ResetTimer(id[, time])",
    "functionDocs": "You can use this function to reset an existing timer to zero or to a specified time. If you want to reset the timer to zero, simply leave out the second argument. Otherwise use the second argument to specify a time in milliseconds for the timer.\n\nUsing `ResetTimer()` to clear a timer is generally faster than starting a new using [StartTimer()](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html), so you should use `ResetTimer()` if you can.",
    "inputsDocs": "* `id` — identifier of the timer that shall be reset\n* `time` — optional: desired time value for the timer in milliseconds (defaults to 0 which means no time)",
    "example": "```\nStartTimer(1)\nWait(1000, #MILLISECONDS)\nPrint(GetTimer(1))\nResetTimer(1, 2000)\nPrint(GetTimer(1))\n```\n\nThe code above will start a new timer 1, wait a second and then print the state of the timer which should be 1000 or a few milliseconds more. Then the timer state is set to 2000 milliseconds and printed again. This time it should be 2000 or a few milliseconds more.",
    "platforms": ["All"],
    "insertText": "ResetTimer(${1:id})"
  },
  {
    "name": "ResumeTimer",
    "helpId": "ResumeTimer",
    "shortDescription": "resume a paused timer",
    "version": "1.0",
    "synopsis": "ResumeTimer(id)",
    "functionDocs": "This function resumes the timer specified by `id`. The timer must be in pause mode (set by [PauseTimer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseTimer_.html)). If `ResumeTimer()` was successful, the timer resumes counting the time.",
    "inputsDocs": "* `id` — identifier of the timer to resume",
    "example": "```\nnone\n```",
    "platforms": ["All"],
    "insertText": "ResumeTimer(${1:id})"
  },
  {
    "name": "SetTimerElapse",
    "helpId": "SetTimerElapse",
    "shortDescription": "set timer elapse threshold",
    "version": "9.0",
    "synopsis": "SetTimerElapse(id, elapse[, reset])",
    "functionDocs": "This function sets the elapse threshold of the timer specified by `id` to the time specified in `elapse`. This time must be specified in milliseconds. You can then call [TimerElapsed()](https://www.hollywood-mal.com/docs/html/hollywood/TimerElapsed_.html) to find out when the timer has elapsed or use [WaitTimer()](https://www.hollywood-mal.com/docs/html/hollywood/WaitTimer_.html) to wait for the timer to elapse.\n\nBy default, `SetTimerElapse()` will also reset the timer. If you don't want that, pass `False` in the `reset` argument.\n\nNote that if you pass 0 in the `elapse` argument, elapsing will be disabled for this timer, i.e. [TimerElapsed()](https://www.hollywood-mal.com/docs/html/hollywood/TimerElapsed_.html) will never return `True` for timers which have an elapse threshold of 0.",
    "inputsDocs": "* `id` — identifier of the timer to modify\n* `elapse` — elapse threshold in milliseconds or 0 to disable elapsing\n* `reset` — optional: whether or not the timer should be reset (defaults to `True`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetTimerElapse(${1:id}, ${2:elapse})"
  },
  {
    "name": "StartTimer",
    "helpId": "StartTimer",
    "shortDescription": "start a new timer",
    "version": "1.0",
    "synopsis": "[id] = StartTimer(id[, elapse])",
    "functionDocs": "This function creates a new timer and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `StartTimer()` will automatically choose an identifier and return it. This timer will run until you call [PauseTimer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseTimer_.html) or [StopTimer()](https://www.hollywood-mal.com/docs/html/hollywood/StopTimer_.html). You can retrieve the current state of the timer by calling [GetTimer()](https://www.hollywood-mal.com/docs/html/hollywood/GetTimer_.html).\n\nStarting with Hollywood 9.0, there is a new optional `elapse` argument. If you set this to a time in milliseconds, [TimerElapsed()](https://www.hollywood-mal.com/docs/html/hollywood/TimerElapsed_.html) will return `True` as soon as the timer has been running for the specified amount of time. Alternatively, you can also use [WaitTimer()](https://www.hollywood-mal.com/docs/html/hollywood/WaitTimer_.html) to wait for a timer to elapse. Finally, the timer's elapse value can also be set or modified using [SetTimerElapse()](https://www.hollywood-mal.com/docs/html/hollywood/SetTimerElapse_.html). See [SetTimerElapse](https://www.hollywood-mal.com/docs/html/hollywood/SetTimerElapse_.html).",
    "inputsDocs": "* `id` — id for your timer or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `elapse` — optional: number of milliseconds until the timer should elapse (defaults to 0 which means that it will never elapse) (V9.0)",
    "resultsDocs": "* `id` — optional: identifier of the timer; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nStartTimer(1)\nWait(200)\nt = GetTimer(1)\nPrint(t)\n```\n\nThe above code starts a new timer, waits 4 seconds and retrieves the timer state. The timer state is copied to the variable `t` and should have the value of about 4000 milliseconds.",
    "platforms": ["All"],
    "insertText": "StartTimer(${1:id})"
  },
  {
    "name": "StopTimer",
    "helpId": "StopTimer",
    "shortDescription": "stop a timer",
    "version": "1.0",
    "synopsis": "StopTimer(id)",
    "functionDocs": "This function stops the timer specified by `id`. If you stop a timer it will be completely removed from the system, therefore you cannot resume it. If you want to pause a timer, please use [PauseTimer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseTimer_.html) instead.",
    "inputsDocs": "* `id` — identifier of the timer that shall be stopped",
    "example": "See [StartTimer](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html)",
    "platforms": ["All"],
    "insertText": "StopTimer(${1:id})"
  },
  {
    "name": "TimerElapsed",
    "helpId": "TimerElapsed",
    "shortDescription": "check if timer has elapsed",
    "version": "9.0",
    "synopsis": "elapsed = TimerElapsed(id[, reset])",
    "functionDocs": "This function checks if the timer specified by `id` has elapsed and returns `True` if it has, `False` otherwise. By default, the timer will be reset to 0 when it has elapsed. If you don't want that, pass `False` in the `reset` argument.\n\nThe threshold when a timer elapses can be set either when creating a timer using [StartTimer()](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html) or later using [SetTimerElapse()](https://www.hollywood-mal.com/docs/html/hollywood/SetTimerElapse_.html).",
    "inputsDocs": "* `id` — identifier of the timer to examine\n* `reset` — optional: `True` if the elapsed timers should be reset to 0, `False` otherwise (defaults to `True`)",
    "resultsDocs": "* `elapse` — `True` if the timer has elapsed, `False` otherwise",
    "example": "```\nStartTimer(1, 10000)\nRepeat\n   VWait\nUntil TimerElapsed(1) = True\n```",
    "platforms": ["All"],
    "insertText": "TimerElapsed(${1:id})"
  },
  {
    "name": "TimestampToDate",
    "helpId": "TimestampToDate",
    "shortDescription": "convert timestamp to date",
    "version": "7.1",
    "synopsis": "d$ = TimestampToDate(s[, unixtime])",
    "functionDocs": "This function can be used to convert a timestamp into a date string in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareStr](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html). The optional argument `unixtime` specifies whether or not the timestamp is measured from the beginning of the Unix epoch (i.e. January 1st, 1970, 00:00:00 UTC) or from the time when Hollywood was started. By default, timestamps are measured from the time when Hollywood was started.\n\nTo convert a date back into a timestamp, use the [DateToTimestamp()](https://www.hollywood-mal.com/docs/html/hollywood/DateToTimestamp_.html) function. See [DateToTimestamp](https://www.hollywood-mal.com/docs/html/hollywood/DateToTimestamp_.html).",
    "inputsDocs": "* `s` — timestamp to convert into a date\n* `unixtime` — optional: if set to `True` the timestamp is interpreted as relative to the beginning of the Unix epoch; otherwise it is relative to the time when Hollywood was started (defaults to `False`)",
    "resultsDocs": "* `d$` — date in Hollywood's standard date format",
    "platforms": ["All"],
    "insertText": "TimestampToDate(${1:s})"
  },
  {
    "name": "UTCToDate",
    "helpId": "UTCToDate",
    "shortDescription": "convert UTC date to local date",
    "version": "7.1",
    "synopsis": "d$ = UTCToDate(u$)",
    "functionDocs": "This function can be used to convert the UTC date passed in `u$` to a local date. The `u$` parameter must be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareStr](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html).\n\nTo convert a local date back into a UTC date, use the [DateToUTC()](https://www.hollywood-mal.com/docs/html/hollywood/DateToUTC_.html) function. See [DateToUTC](https://www.hollywood-mal.com/docs/html/hollywood/DateToUTC_.html).",
    "inputsDocs": "* `u$` — UTC date to convert to local date",
    "resultsDocs": "* `d$` — local date equivalent of the UTC date",
    "platforms": ["All"],
    "insertText": "UTCToDate(${1:u$})"
  },
  {
    "name": "ValidateDate",
    "helpId": "ValidateDate",
    "shortDescription": "check if date is valid",
    "version": "7.1",
    "synopsis": "b = ValidateDate(d$)",
    "functionDocs": "This function can be used to check if the date given in `d$` is valid. `ValidateDate()` makes sure that all individual date and time components are within their valid ranges, e.g. February 29th is only a valid date in leap years. The `d$` parameter must be in Hollywood's standard date format, i.e. `dd-mmm-yyyy hh:mm:ss`. See [CompareStr](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html).",
    "inputsDocs": "* `d$` — date to validate",
    "resultsDocs": "* `b` — `True` if date is valid, `False` otherwise",
    "platforms": ["All"],
    "insertText": "ValidateDate(${1:d$})"
  },
  {
    "name": "WaitTimer",
    "helpId": "WaitTimer",
    "shortDescription": "wait until a timer has reached a certain time",
    "version": "2.0",
    "synopsis": "WaitTimer(id[, time, reset])  \nt = WaitTimer(table[, reset]) (V9.0)",
    "functionDocs": "This function waits until the timer specified by `id` has been running for the time specified in the `time` argument. This time must be specified in milliseconds. If you omit the `time` argument or set it to -1, `WaitTimer()` will wait until the timer has reached its elapse threshold set using [SetTimerElapse()](https://www.hollywood-mal.com/docs/html/hollywood/SetTimerElapse_.html) or using [StartTimer()](https://www.hollywood-mal.com/docs/html/hollywood/StartTimer_.html).\n\nBefore this function returns it will also reset the specified timer so that you can easily use this function in a loop. You can change this behaviour by setting the optional argument `reset` to `False`. In that case, the timer will not be reset.\n\nStarting with Hollywood 9.0, there is an alternative way of using `WaitTimer()`. Instead of the identifier of a single timer, you can also pass a table containing multiple timer identifiers. In that case, `WaitTimer()` will wait until at least one of the timers from the list specified in the `table` argument has elapsed. Once that happens, `WaitTimer()` will return a table to you. That table will be a list containing the identifiers of all timers that have elapsed. If the `reset` argument is `True`, which is also the default, all elapsed timers will be reset by `WaitTimer()`. Note that the table you pass to `WaitTimer()` can also be empty. In that case, `WaitTimer()` will simply wait for a timer to elapse from all timers that are currently running.\n\n`WaitTimer()` can be very useful to throttle the execution of loops so that they don't consume all of the CPU. For instance, if you have a loop that moves a sprite from the left to the right boundary of the display, you should add some kind of throttle because it doesn't make sense to update the screen more often than the monitor refreshes. This is very important. Even if the script runs at perfect speed without `WaitTimer()` you should not forget that there are faster machines than yours. Using `WaitTimer()` in your loops will make sure that your application runs at the same speed on every platform.\n\nSee [Script timing](https://www.hollywood-mal.com/docs/html/hollywood/PrgTUTiming_.html).",
    "inputsDocs": "* `id` — syntax 1: identifier of the timer to query\n* `time` — syntax 1, optional: time in milliseconds that the timer must have (defaults to timer's elapse threshold)\n* `table` — syntax 2: pass a table containing a list of timers here and `WaitTimer()` will return as soon as a timer from the list has elapsed (see above); if you pass an empty table, all running timers will be taken into account\n* `reset` — optional: specifies whether or not the timer shall be reset after `WaitTimer()` returns (defaults to `True` which means that the timer will be reset)",
    "resultsDocs": "* `t` — syntax 2: a list of the timers that have elapsed; this will only be returned if you pass a table instead of a timer identifier to `WaitTimer()` (see above for details)",
    "example": "```\nStartTimer(1)\nFor k = 0 To 640\n   DisplaySprite(1, k, 0)\n   WaitTimer(1, 40)\nNext\n```\n\nThe above code scrolls sprite 1 from left to right. After each call to DisplaySprite(), `WaitTimer()` is used to ensure that we wait at least 40 milliseconds until the next DisplaySprite(). Thus, this loop will not be executed more than 25 times a second because 40 * 25 = 1000.",
    "platforms": ["All"],
    "insertText": "WaitTimer(${1:id})"
  }
]
