[
  {
    "name": "ColorRequest",
    "helpId": "ColorRequest",
    "shortDescription": "prompt the user to select a color",
    "version": "5.0",
    "synopsis": "ret = ColorRequest(title$[, t])",
    "functionDocs": "This command opens a color requester prompting the user to select a color from a palette of predefined colors. Additionally, the user can also mix a custom color. The `title$` argument can be used to set the title for the color requester's dialog window. If an empty string (\"\") is passed as `title$`, the requester will use the title specified in the [@APPTITLE](https://www.hollywood-mal.com/docs/html/hollywood/atAPPTITLE_.html) preprocessor command.\n\n`ColorRequest()` supports several optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `ColorRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Color`: This table tag can be used to specify a color that is initially selected. If you do not set this table tag, a random color will be preselected.\n\n- `X`: Initial x-position for the color requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the color requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the color requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the color requester dialog. Not all platforms support this. (V9.0)\n\nPlease note that this command requires reqtools.library to be installed on AmigaOS and compatibles.",
    "inputsDocs": "* `title$` — title for the requester\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `ret` — the user's selection or -1 if the user cancelled the requester",
    "example": "```\nr = ColorRequest(\"Select a color\")\nIf r = -1\n  Print(\"Requester cancelled!\")\nElse\n  SetFillStyle(#FILLCOLOR)\n  Box(0, 0, 640, 480, r)\nEndIf\n```\n\nAsk the user for a color and then draws a filled rectangle using the selected color.",
    "platforms": ["All"],
    "insertText": "ColorRequest(${1:title$})"
  },
  {
    "name": "FileRequest",
    "helpId": "FileRequest",
    "shortDescription": "open a file requester",
    "version": "1.0",
    "synopsis": "f$ = FileRequest(title$[, t])",
    "functionDocs": "This function opens a file requester that allows the user to select a file. You can specify the title of the requester by setting the `title$` argument. This can also be an empty string (\"\") to use the default title. The file that the user has selected will be returned in `f$` including the path where it resides. If the user cancels the requester, the string `f$` will be empty.\n\n`FileRequest()` supports many optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `FileRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Mode`: This table tag allows you to put the requester into save or multiselect mode. For save mode, pass `#REQ_SAVEMODE` and for multiselect mode pass `#REQ_MULTISELECT`. If you use multiselect mode, this function will not return a string but a table that contains all the files the user selected terminated by an empty string. Starting with Hollywood 6.0 you can also set the flag `#REQ_HIDEICONS` if you want to have `*.info` files hidden on AmigaOS. Note that `#REQ_HIDEICONS` is a flag that can be combined with the other modes by ORing it into a bitmask. `#REQ_HIDEICONS` is only supported on AmigaOS. (V2.0)\n\n- `Path`: This table tag can be used to specify the initial path for the file requester. (V3.0)\n\n- `File`: This table tag can be used to specify the initial file for the file requester. (V3.0)\n\n- `Filters`: This table tag can be used to specify filters that define which files should be shown in the requester. This can either be a string or a table.\n\n  If it is a string, it must contain the extensions of the files that should be shown in the requester. These extensions must be separated by '|' characters. For example: \"voc|wav|8svx|16sv|iff|aiff\" will only show files which have one of those extensions. Make sure not to include the `.` before the file extension but just the actual extension. The default is \"*\" which means that all files should be shown.\n\n  Starting with Hollywood 9.0, you can also set `Filters` to a table to define individual groups of files and a description for each group. To do this, set `Filters` to a table that contains an arbitrary number of subtables, each describing a single group of files. Each subtable must contain the following items:\n\n  - `Filter`: A string containing the file extensions of this group. This string must be in the same format as described above, i.e. the individual extensions must be separated by the vertical bar character (|), for example \"jpg|jpeg\".\n\n  - `Description`: A string describing the filter group, e.g. \"JPEG images\".\n\n  - `HideFilter`: This table item is optional. If you set it to `True`, `FileRequest()` won't show the individual file extensions that belong to the filter group but just its description. Note that not all platforms support this. Defaults to `False`.\n\n- `X`: Initial x-position for the file requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the file requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the file requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the file requester dialog. Not all platforms support this. (V9.0)",
    "inputsDocs": "* `title$` — title for the requester; pass an empty string (\"\") to use the default title\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `f$` — the user's selection or an empty string if the requester was cancelled; if the requester was opened in multi-select mode, a table containing all files will be returned",
    "example": "```\nf$ = FileRequest(\"Select a picture\", {Filters = \"png|jpg|jpeg|bmp\"})\nIf f$ = \"\"\n  Print(\"Requester cancelled!\")\nElse\n  Print(\"Your selection:\", f$)\nEndIf\n```\n\nAsk the user for a file and print the result.\n\n---\n\n```\nfiles = FileRequest(\"Select some files\", {Mode = #REQ_MULTISELECT})\nIf files[0] = \"\"\n  Print(\"Requester cancelled!\")\nElse\n  NPrint(\"Path:\", PathPart(files[0]))\n  NPrint(\"Files selected:\", ListItems(files) - 1)\n  While files[c] <> \"\"\n    NPrint(FilePart(files[c]))\n    c = c + 1\n  Wend\nEndIf\n```\n\nThe code above opens a multi-select file requester and prints all the files which the user selected.\n\n---\n\n```\nf$ = FileRequest(\"Select file\", {Filters = {\n  {Description = \"Image files\", Filter = \"png|jpg|jpeg|bmp\"},\n  {Description = \"Audio files\", Filter = \"wav|mp3|mp4\"},\n  {Description = \"All files\", Filter = \"*\"}}\n})\n```\n\nThe code above shows how to use multiple filter groups with descriptions.",
    "platforms": ["All"],
    "insertText": "FileRequest(${1:title$})"
  },
  {
    "name": "FontRequest",
    "helpId": "FontRequest",
    "shortDescription": "ask user to select a font",
    "version": "5.0",
    "synopsis": "t = FontRequest(title$[, t])",
    "functionDocs": "This command will open a requester that will list all fonts currently available in the system. The user is then prompted to select a font from this list. The user can also choose an output size for the font, as well as the font style and font color. Note that the color selection is not supported on every platform. The `title$` argument specifies the title text for the requester's dialog window.\n\n`FontRequest()` supports several additional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `FontRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Font`: Use this table tag to specify the name of a font that shall be initially selected.\n\n- `Size`: Use this table tag to specify the font size that shall be initially selected.\n\n- `X`: Initial x-position for the font requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the font requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the font requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the font requester dialog. Not all platforms support this. (V9.0)\n\nUpon return, `FontRequest()` initializes a table containing all parameters selected by the user and returns this table to the script. The return table will have the following fields initialized:\n\n- `Name`: The complete font name (i.e. family name plus style). For example, \"Arial Bold Italic\". This is a string you could pass directly to [SetFont()](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html) or [OpenFont()](https://www.hollywood-mal.com/docs/html/hollywood/OpenFont_.html).\n\n- `Family`: The family name of this font, e.g. \"Arial\".\n\n- `Size`: Contains the selected font size (e.g. 36).\n\n- `Weight`: The weight of the font. This will be set to one of the following weight constants:\n\n  ```\n  #FONTWEIGHT_THIN\n  #FONTWEIGHT_EXTRALIGHT\n  #FONTWEIGHT_ULTRALIGHT\n  #FONTWEIGHT_LIGHT\n  #FONTWEIGHT_BOOK\n  #FONTWEIGHT_NORMAL\n  #FONTWEIGHT_REGULAR\n  #FONTWEIGHT_MEDIUM\n  #FONTWEIGHT_SEMIBOLD\n  #FONTWEIGHT_DEMIBOLD\n  #FONTWEIGHT_BOLD\n  #FONTWEIGHT_EXTRABOLD\n  #FONTWEIGHT_ULTRABOLD\n  #FONTWEIGHT_HEAVY\n  #FONTWEIGHT_BLACK\n  #FONTWEIGHT_EXTRABLACK\n  #FONTWEIGHT_ULTRABLACK\n  ```\n\n- `Slant`: The slant style of the font. This will be set to one of the following slant constants:\n\n  ```\n  #FONTSLANT_ROMAN\n  #FONTSLANT_ITALIC\n  #FONTSLANT_OBLIQUE\n  ```\n\n- `Bold`: `True` if the user chose a bold font style.\n\n- `Italic`: `True` if the user chose an italic font style.\n\n- `Underline`: `True` if the user chose an underlined font style.\n\n- `StrikeOut`: `True` if the user chose a striked out font style.\n\n- `Color`: The font color chosen by the user in [RGB format](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).\n\nPlease note that the `Underline`, `StrikeOut`, and `Color` fields are not supported on all platforms. If the host operating system's font dialog does not support them, they will all be set to `False`.",
    "inputsDocs": "* `title$` — title for the requester\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `t` — a table containing all parameters chosen by the user (see above for a description of the table fields)",
    "example": "```\nt = FontRequest(\"Select a font\")\nNPrint(\"Font:\", t.name)\nNPrint(\"Family:\", t.family)\nNPrint(\"Size:\", t.size)\nNPrint(\"Weight:\", t.weight)\nNPrint(\"Slant:\", t.slant)\nNPrint(\"Underline:\", t.underline)\nNPrint(\"Strike:\", t.strikeout)\nNPrint(\"Color:\", HexStr(t.color))\n```\n\nThe code above pops up a font requester and then prints out all information gathered from the user.",
    "platforms": ["All"],
    "insertText": "FontRequest(${1:title$})"
  },
  {
    "name": "ImageRequest",
    "helpId": "ImageRequest",
    "shortDescription": "prompt the user to select an image",
    "version": "8.0",
    "synopsis": "[id] = ImageRequest(id[, type])",
    "functionDocs": "This function can be used to prompt the user to select an image. The image will then be stored as the brush specified in `id`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, `ImageRequest()` will automatically choose an identifier for the brush and return the identifier to you.\n\nThe optional type argument allows you to specify the image source to use when prompting the user for an image. This can currently be set to one of the following predefined constants:\n\n- `#REQ_GALLERY`: Open the device's gallery and prompt the user to select an image that will then be returned as a Hollywood brush to your script.\n\n- `#REQ_CAMERA`: Open the device's camera and prompt the user to take a picture that will then be returned as a Hollywood brush to your script.\n\nThe default mode is `#REQ_GALLERY`, i.e. `ImageRequest()` will prompt the user to select an image from the device's gallery.\n\nTo find out if this function has failed because the user cancelled the image requester, just use [HaveObject()](https://www.hollywood-mal.com/docs/html/hollywood/HaveObject_.html) to see if the brush object exists after `ImageRequest()` returns. If it doesn't exist, the user has cancelled the image requester. See [HaveObject](https://www.hollywood-mal.com/docs/html/hollywood/HaveObject_.html).",
    "inputsDocs": "* `id` — id for the brush or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `type` — optional: image source to use; see above for possible modes; defaults to `#REQ_GALLERY`",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nImageRequest(1, #REQ_CAMERA)\nIf HaveObject(#BRUSH, 1)\n   DisplayBrush(1, #CENTER, #CENTER)\nElse\n   NPrint(\"Requester cancelled!\")\nEndIf\n```\n\nThe code above prompts the user to take a picture with the camera and then displays this picture. It also checks if the requester has been cancelled.",
    "platforms": ["Android"],
    "insertText": "ImageRequest(${1:id})"
  },
  {
    "name": "ListRequest",
    "helpId": "ListRequest",
    "shortDescription": "prompt choice from a list of options",
    "version": "5.0",
    "synopsis": "choice = ListRequest(title$, body$, choices[, t])",
    "functionDocs": "This command can be used to present a list of choices to the user and ask him to select one of the list entries. The first argument specifies the title text for the requester's dialog window. The second argument specifies the body text that shall appear above the list of choices. The third argument must be a table containing an arbitrary number of strings from which the user shall be able to choose.\n\nWhen `ListRequest()` returns, you will receive the index of the list entry that the user has selected as the return value. If the user hasn't selected an item or cancelled the requester, -1 will be returned.\n\n`ListRequest()` supports several additional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `ListRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Active`: This table tag can be used to preselect one of the choices in the list. Simply pass the index of the entry to preselect in the `Active` table tag. Indices start at 0 for the first entry and run through number of entries minus 1. If `Active` is omitted or out of range, nothing will be preselected.\n\n- `X`: Initial x-position for the list requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the list requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the list requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the list requester dialog. Not all platforms support this. (V9.0)\n\nStarting with Hollywood 6.0 you can pass an empty string (\"\") as `title$`. In that case, the requester will use the title specified in the [@APPTITLE](https://www.hollywood-mal.com/docs/html/hollywood/atAPPTITLE_.html) preprocessor command.",
    "inputsDocs": "* `title$` — title for the requester\n* `body$` — body text to display above the list view widget\n* `choices` — table containing a number of string entries that constitute the available choices\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `choice` — index of the user's selection or -1 if the user cancelled the requester; indices start at 0 for the first entry and run through the number of entries minus 1",
    "example": "```\nr = ListRequest(\"User prompt\", \"Which of these is not an island?\",\n{\"Australia\", \"Fiji\", \"New Zealand\", \"Easter Island\", \"Hawaii\",\n\"Goa\", \"Madagascar\", \"Maldives\", \"Seychelles\"})\nIf r = -1\n  Print(\"You chose the chicken exit!\")\nElseIf r = 5\n  Print(\"That's right, congratulations!\")\nElse\n  Print(\"Sorry, but that is an island...\")\nEndIf\n```\n\nThe code above shows how to use `ListRequest()` for a little quiz.",
    "platforms": ["Android"],
    "insertText": "ListRequest(${1:title$}, ${2:body$}, ${3:choices})"
  },
  {
    "name": "PathRequest",
    "helpId": "PathRequest",
    "shortDescription": "pop up a path requester",
    "version": "2.0",
    "synopsis": "p$ = PathRequest(title$[, t])",
    "functionDocs": "This function opens a path requester that allows the user to select a path. You can specify the title of the requester by setting the `title$` argument. This can also be an empty string (\"\") to use the default title.\n\n`PathRequest()` returns the user's path selection or \"\" if the user has cancelled the requester.\n\n`PathRequest()` supports several optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `PathRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Mode`: The `Mode` table tag allows you to specify the mode of the path requester. This can either be `#REQ_SAVEMODE` for save mode or `#REQ_NORMAL` for normal mode. Defaults to `#REQ_NORMAL`.\n\n- `Path`: This table tag can be used to specify the initial path for the path requester. (V3.0) By default, this will be the current directory.\n\n- `X`: Initial x-position for the path requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the path requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the path requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the path requester dialog. Not all platforms support this. (V9.0)",
    "inputsDocs": "* `title$` — title for the requester; pass an empty string (\"\") to use the default title\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `p$` — the user's selection or an empty string if he cancelled the requester",
    "example": "```\np$ = PathRequest(\"Select a path\")\nIf p$ = \"\"\n  Print(\"Requester cancelled!\")\nElse\n  Print(\"Your selection: \")\n  Print(p$)\nEndIf\n```\n\nAsk the user for a path and print its name.",
    "platforms": ["Android"],
    "insertText": "PathRequest(${1:title$})"
  },
  {
    "name": "PermissionRequest",
    "helpId": "PermissionRequest",
    "shortDescription": "request permission from user",
    "version": "8.0",
    "synopsis": "ok = PermissionRequest(perms)",
    "functionDocs": "This function can be used to request certain permissions from the user. Due to security reasons, Android apps need first ask for user permission before they will be able to execute certain actions. This function can be used to request such permissions from the user. Android will then show a dialog box in which the user can either accept or decline the permissions. If he declines, `PermissionRequest()` will return `False`, otherwise `True` will be returned.\n\nThe permissions you want to request have to be passed in the `perms` argument. This can be set to one or more of the following permission flags:\n\n- `#PERMREQ_READEXTERNAL`: If your app has this permission, it will be able to read files from the external storage device. The external storage device can be accessed through the `SDCard` item in the table returned by [GetSystemInfo()](https://www.hollywood-mal.com/docs/html/hollywood/GetSystemInfo_.html). By default, Android apps are not allowed to read from the external storage device.\n\n- `#PERMREQ_WRITEEXTERNAL`: If your app has this permission, it will be able to write and read files to/from the external storage device. The external storage device can be accessed through the `SDCard` item in the table returned by [GetSystemInfo()](https://www.hollywood-mal.com/docs/html/hollywood/GetSystemInfo_.html). By default, Android apps are not allowed to write to the external storage device. Note that `#PERMREQ_WRITEEXTERNAL` implies `#PERMREQ_READEXTERNAL` so you don't have to set `#PERMREQ_READEXTERNAL` when using this flag.\n\nTo ask for multiple permissions at once, simply combine them using the [bitwise Or operator](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprBitw_.html).\n\nNote that this function is only needed when compiling stand-alone APKs using the Hollywood APK Compiler. When using the Hollywood Player, the Hollywood Player will automatically request the `#PERMREQ_WRITEEXTERNAL` permission for you so you don't have to do that manually.",
    "inputsDocs": "* `perms` — one or more permissions to request (see above for possible values)",
    "resultsDocs": "* `ok` — `True` if user granted permission, `False` if he declined them",
    "example": "```\nIf PermissionRequest(#PERMREQ_WRITEEXTERNAL)\n  t = GetSystemInfo()\n  StringToFile(\"Hello World\", FullPath(t.SDCard, \"test.txt\"))\nElse\n  NPrint(\"Sorry, no permission!\")\nEndIf\n```\n\nThe code above tries to get a permission from the user to write to the external storage device. If the user grants this permission, the code will write a file named `test.txt` to the external storage device.",
    "platforms": ["Android"],
    "insertText": "PermissionRequest(${1:perms})"
  },
  {
    "name": "StringRequest",
    "helpId": "StringRequest",
    "shortDescription": "ask the user to enter a string",
    "version": "2.0",
    "synopsis": "s$, ok = StringRequest(title$, body$[, t])",
    "functionDocs": "This function opens a requester prompting the user to enter a string. You can specify the title for the requester window in `title$` and the body text in `body$`. If you pass an empty string (\"\") `title$`, the requester will use the title specified in the [@APPTITLE](https://www.hollywood-mal.com/docs/html/hollywood/atAPPTITLE_.html) preprocessor command.\n\n`StringRequest()` will return the string the user has entered if the user acknowledges the requester. If the user cancels this requester, an empty string will be returned. The second return value allows you identify whether or not the user pressed the 'OK' button. This is normally only needed if your application allows an empty string on 'OK'. In that case you need to check the second return value, too.\n\n`StringRequest()` supports many optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `StringRequest()`.\n\nThe following table fields are recognized by this function:\n\n- `Type`: This table tag can be used to specify which characters the user is allowed to enter. This can currently be `#NUMERICAL` for numbers only or `#ALL` for no restriction on characters that can be entered. Defaults to `#ALL`.\n\n- `Password`: Set this table tag to `True` to put the requester in password mode. In that case, the user's input will be hidden. Defaults to `False`.\n\n- `MaxLength`: This table tag can be used to specify the number of characters the user will be allowed to enter. This defaults to 0, which means that there is no limit concerning the number of characters the user may enter.\n\n- `Text`: This table tag can be used to specify the default text for the string requester. The text you specify here will be initially shown in the string requester's text entry widget.\n\n- `X`: Initial x-position for the string requester on the screen. Not all platforms support this. (V9.0)\n\n- `Y`: Initial y-position for the string requester on the screen. Not all platforms support this. (V9.0)\n\n- `Width`: Initial width for the string requester dialog. Not all platforms support this. (V9.0)\n\n- `Height`: Initial height for the string requester dialog. Not all platforms support this. (V9.0)\n\nPlease note that this command requires reqtools.library to be installed on AmigaOS 3, MorphOS, and AROS. Under AmigaOS 4 the `StringRequest()` function works without reqtools.library.",
    "inputsDocs": "* `title$` — title for the requester window\n* `body$` — text for the requester body\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "resultsDocs": "* `s$` — the string entered by the user or \"\" if requester was cancelled\n* `ok` — `True` if the user pressed the 'OK' button, `False` otherwise (V4.5)",
    "example": "```\na$ = StringRequest(\"My Program\", \"Please enter your name!\")\nPrint(\"Hello,\", a$, \"!\")\n```\n\nAsk the user for his name and print it out.",
    "platforms": ["Android"],
    "insertText": "StringRequest(${1:title$}, ${2:body$})"
  },
  {
    "name": "SystemRequest",
    "helpId": "SystemRequest",
    "shortDescription": "pop up a choice requester",
    "version": "1.0",
    "synopsis": "res = SystemRequest(title$, body$, buttons$[, icon])",
    "functionDocs": "This function pops up a standard system requester that displays a message (body$) and also allows the user to make a selection using one of the buttons specified by `buttons$`. Separate the buttons specified in `buttons$` by a \"|\". The return value tells you which button the user has pressed. Please note that the right most button always has the value of `False` (0) because it is typically used as the \"Cancel\" button. For example, if you have three buttons \"One|Two|Three\", button \"Three\" has a return value of 0, \"Two\" returns 2, and \"One\" returns 1.\n\nNew in Hollywood 4.0: You can use the optional argument icon to add a little icon to the requester. The following icons are possible:\n\n- `#REQICON_NONE`: No icon\n\n- `#REQICON_INFORMATION`: An information sign\n\n- `#REQICON_ERROR`: An error sign\n\n- `#REQICON_WARNING`: A warning sign\n\n- `#REQICON_QUESTION`: A question mark\n\nPlease note that currently requester icons are not supported on every platform that Hollywood runs on.\n\nStarting with Hollywood 6.0, `SystemRequest()` might map the following button specifications to certain system-specific buttons: \"OK\", \"OK|Cancel\", \"Yes|No\" and \"Yes|No|Cancel\". This means that it could happen that the buttons suddenly appear in the user's language instead of the English versions you passed to `SystemRequest()`. It can also mean that the order of the buttons is changed, e.g. on macOS the \"OK\" button is typically placed to the right of the \"Cancel\" button whereas on other systems it is the other way round. Nevertheless, the return values will always be consistent, i.e. \"OK\" or \"Yes\" will always have a return value of 1 whereas \"Cancel\" or \"No\" has a return value of 0 the only exception being \"Yes|No|Cancel\" where \"No\" has a return value of 2 because there is also a \"Cancel\" button which has a return value of 0.\n\nAlso, it is possible to pass an empty string (\"\") in the first parameter since Hollywood 6.0. In that case, the requester will use the title specified in the [@APPTITLE](https://www.hollywood-mal.com/docs/html/hollywood/atAPPTITLE_.html) preprocessor command.",
    "inputsDocs": "* `title$` — title for the requester\n* `body$` — text to appear in the body of the requester\n* `buttons$` — one or more buttons that the user can press\n* `icon` — optional: icon to show in the requester (defaults to `#REQICON_NONE`) (V4.0)",
    "resultsDocs": "* `res` — the button that was pressed by the user",
    "example": "```\nsel = SystemRequest(\"Pizza Service\", \"Select your pizza!\",\n                    \"Prosciutto e funghi|Calzone|Margerita|Hawaii\")\nSwitch sel\nCase 1:\n  Print(\"1x Prosciutto e funghi = 8 Euro\")\nCase 2:\n  Print(\"1x Calzone = 10 Euro\")\nCase 3:\n  Print(\"1x Margerita = 9 Euro\")\nCase 0:\n  Print(\"1x Hawaii = 12 Euro\")\nEndSwitch\n```\n\nThe above code asks the user for a pizza and displays the price of that pizza.",
    "platforms": ["Android"],
    "insertText": "SystemRequest(${1:title$}, ${2:body$}, ${3:buttons$})"
  }
]
