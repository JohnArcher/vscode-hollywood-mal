[
  {
    "name": "AddStr",
    "helpId": "AddStr",
    "shortDescription": "append substring to a string",
    "version": "1.0",
    "synopsis": "var$ = AddStr(string1$, string2$)",
    "functionDocs": "Appends `string2$` to `string1$` and returns the new string.\n\nThis function is obsolete and only here for compatibility reasons. Starting with Hollywood 2.0 you should use the [string concatenation operator ..](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprStrng_.html) for concatenating two strings.",
    "inputsDocs": "* `string1$` â€” source string\n* `string2$` â€” string to append",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = AddStr(\"Hello\", \" World!\")\nPrint(test$)\n```\n\nThis will print \"Hello World!\"",
    "platforms": ["All"],
    "insertText": "AddStr(${1:string1$}, ${2:string2$})"
  },
  {
    "name": "ArrayToStr",
    "helpId": "ArrayToStr",
    "shortDescription": "convert code point array to string",
    "version": "6.0",
    "synopsis": "s$ = ArrayToStr(t[, encoding])",
    "functionDocs": "This function reads all code points contained in the table `t`, appends them to a string and returns this string. `ArrayToStr()` will stop reading values from `t` once it encounters a code point of 0 (string terminator) or the end of the table.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nTo convert strings into arrays, you can use the function [StrToArray()](https://www.hollywood-mal.com/docs/html/hollywood/StrToArray_.html). See [StrToArray](https://www.hollywood-mal.com/docs/html/hollywood/StrToArray_.html).",
    "inputsDocs": "* `t` â€” a table containing an arbitrary number of code points\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `s$` â€” string made up of the code points in the table",
    "example": "```\ns$ = ArrayToStr({'H', 'e', 'l', 'l', 'o'})\nDebugPrint(s$)\n```\n\nPrints \"Hello\".",
    "platforms": ["All"],
    "insertText": "ArrayToStr(${1:t})"
  },
  {
    "name": "Asc",
    "helpId": "Asc",
    "shortDescription": "return code point of character in string",
    "version": "1.0",
    "synopsis": "var = Asc(string$[, pos, encoding])",
    "functionDocs": "Returns the code point value of the character at index `pos` in `string$`. The `pos` index must be in characters, not in bytes. If the `pos` argument is omitted, the code point of the first character will be returned.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nIf you want to work with raw bytes instead of code points, you can either set the `encoding` parameter to `#ENCODING_RAW` or use the [ByteAsc()](https://www.hollywood-mal.com/docs/html/hollywood/ByteAsc_.html) function. See [ByteAsc](https://www.hollywood-mal.com/docs/html/hollywood/ByteAsc_.html).",
    "inputsDocs": "* `string$` â€” input string\n* `pos` â€” optional: index of character whose code point should be returned (defaults to 0) (V7.0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var` â€” code point value",
    "example": "```\nresult = Asc(\"A\")\nPrint(result)\n```\n\nThis will print \"65\" which is the code point value of \"A\".",
    "platforms": ["All"],
    "insertText": "Asc(${1:string$})"
  },
  {
    "name": "Base64Str",
    "helpId": "Base64Str",
    "shortDescription": "encode or decode Base64 data",
    "version": "6.0",
    "synopsis": "data$ = Base64Str(s$, decode)",
    "functionDocs": "This function can be used to encode arbitrary data into the Base64 format or decode a Base64 formatted string back into its original binary data. The second argument specifies whether this function should encode or decode the data.",
    "inputsDocs": "* `s$` â€” data to encode or decode\n* `decode` â€” `True` to decode Base64 data, `False` to encode the specified data into Base64",
    "resultsDocs": "* `data$` â€” encoded or decoded data",
    "platforms": ["All"],
    "insertText": "Base64Str(${1:s$}, ${2:decode})"
  },
  {
    "name": "BinStr",
    "helpId": "BinStr",
    "shortDescription": "convert value to a binary formatted string",
    "version": "2.0",
    "synopsis": "bin$ = BinStr(val[, length])",
    "functionDocs": "This function converts the value specified by `val` into binary format (base 2) and returns it as a string. The optional argument `length` allows you to specify how many bits shall be put into the string. This can be `#INTEGER` for 32 bits, `#SHORT` for 16 bits, and `#BYTE` for 8 bits. By default, `#INTEGER` will be used.",
    "inputsDocs": "* `val` â€” value to convert\n* `length` â€” optional: how many bits shall be converted (must be `#INTEGER`, `#SHORT`, or `#BYTE`) (V3.0)",
    "resultsDocs": "* `bin$` â€” binary notation of `val`",
    "example": "```\na$ = BinStr(255, #BYTE)\n```\n\nThis returns the string \"11111111\".",
    "platforms": ["All"],
    "insertText": "BinStr(${1:val})"
  },
  {
    "name": "ByteAsc",
    "helpId": "ByteAsc",
    "shortDescription": "get single byte from string",
    "version": "7.1",
    "synopsis": "v = ByteAsc(string$[, pos])",
    "functionDocs": "Returns the value of the byte at the string index specified by `pos`. The return value `v` will be in the range of 0 to 255.\n\nSince Hollywood strings cannot only contain text but also raw binary data, this function is suitable for accessing raw string bytes at specified indices. The normal [Asc()](https://www.hollywood-mal.com/docs/html/hollywood/Asc_.html) function, on the other hand, is more appropriate for dealing with text strings because it operates in Unicode mode by default which means that the input string must be in valid UTF-8.",
    "inputsDocs": "* `string$` â€” input string\n* `pos` â€” optional: index of byte to return (defaults to 0)",
    "resultsDocs": "* `v` â€” string byte at specified index",
    "platforms": ["All"],
    "insertText": "ByteAsc(${1:string$})"
  },
  {
    "name": "ByteChr",
    "helpId": "ByteChr",
    "shortDescription": "convert single byte to string",
    "version": "7.1",
    "synopsis": "s$ = ByteChr(v)",
    "functionDocs": "Converts the byte value specified by `v` into a string. `v` must be in the range of 0 to 255.\n\nSince Hollywood strings cannot only contain text but also raw binary data, this function is suitable for composing strings using non-encoded byte data. The normal [Chr()](https://www.hollywood-mal.com/docs/html/hollywood/Chr_.html) function, on the other hand, is more appropriate for dealing with text strings because it operates in Unicode mode by default which means that it composes UTF-8 strings by default, i.e. passing 255 will result in a string that has two bytes because of the UTF-8 encoding rules.",
    "inputsDocs": "* `v` â€” byte to convert into string (in the range of 0 to 255)",
    "resultsDocs": "* `s$` â€” resulting string",
    "platforms": ["All"],
    "insertText": "ByteChr(${1:v})"
  },
  {
    "name": "ByteLen",
    "helpId": "ByteLen",
    "shortDescription": "return string length in bytes",
    "version": "7.0",
    "synopsis": "len = ByteLen(s$)",
    "functionDocs": "This function returns the length of string `s$` in bytes. If you need to know the string length in characters, use [StrLen()](https://www.hollywood-mal.com/docs/html/hollywood/StrLen_.html) instead. See [StrLen](https://www.hollywood-mal.com/docs/html/hollywood/StrLen_.html).\n\nIn the UTF-8 character encoding a single character may need a storage space of up to 4 bytes. In the ISO 8859-1 character encoding there is no difference between byte and character sizes.",
    "inputsDocs": "* `s$` â€” input string",
    "resultsDocs": "* `len` â€” length of input string in bytes",
    "example": "```\nlen = ByteLen(\"äöü\")\nPrint(len)\n```\n\nIf Hollywood is in Unicode mode, this will return 6 because each of the characters needs two bytes in the UTF-8 character encoding. In ISO 8859-1 mode, there is no difference between characters and bytes which means the code above will return 3.",
    "platforms": ["All"],
    "insertText": "ByteLen(${1:s$})"
  },
  {
    "name": "ByteOffset",
    "helpId": "ByteOffset",
    "shortDescription": "convert character to byte offset",
    "version": "7.0",
    "synopsis": "boff = ByteOffset(s$, coff[, encoding])",
    "functionDocs": "This function returns the byte offset of the character at the offset specified by `coff` inside string `s$`. This offset is in characters, starting from 0.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nIn the UTF-8 character encoding a single character may need a storage space of up to 4 bytes. In the ISO 8859-1 character encoding there is no difference between byte and character sizes. Hence, it doesn't really make sense to call this function with the character encoding set to `#ENCODING_ISO8859_1`.\n\nTo convert a byte offset into a character offset use the [CharOffset()](https://www.hollywood-mal.com/docs/html/hollywood/CharOffset_.html) function. See [CharOffset](https://www.hollywood-mal.com/docs/html/hollywood/CharOffset_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `coff` â€” character offset to be mapped to a byte offset (starting from 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `boff` â€” byte offset of the specified character",
    "example": "```\nboff = ByteOffset(\"äöü\", 2)\nPrint(boff)\n```\n\nIf Hollywood is in Unicode mode, this will return 4 because the two characters before the \"ü\" take up 2 bytes each in UTF-8 code space. In ISO 8859-1 there is no difference between characters and bytes, so 2 will be returned in that case.",
    "platforms": ["All"],
    "insertText": "ByteOffset(${1:s$}, ${2:coff})"
  },
  {
    "name": "ByteStrStr",
    "helpId": "ByteStrStr",
    "shortDescription": "convert value to raw bytes",
    "version": "8.0",
    "synopsis": "r$ = ByteStrStr(v[, type, le])",
    "functionDocs": "This function can be used to convert a numeric value to raw bytes that are returned as a string. The number of bytes that will be written to the return string depend on the type that you pass in the `type` argument. The following types are currently supported:\n\n- `#BYTE`: Stores an 8-bit value (1 byte) in the return string.\n\n- `#SHORT`: Stores a 16-bit value (2 bytes) in the return string.\n\n- `#INTEGER`: Stores a 32-bit value (4 bytes) in the return string. This is the default.\n\n- `#FLOAT`: Stores a 32-bit floating point value (4 bytes) in the return string.\n\n- `#DOUBLE`: Stores a 64-bit floating point value (8 bytes) in the return string.\n\nFor all multi-byte types, i.e. all types except `#BYTE`, you can use the additional `le` argument to specify the order in which the bytes should be stored in the return string. If you set `le` to `True`, the bytes will be stored in little endian order (LSB first), otherwise the bytes will be stored in big endian order (MSB first). Big endian is also the default.\n\nIf you need to convert raw bytes to a value, you can use the [ByteVal()](https://www.hollywood-mal.com/docs/html/hollywood/ByteVal_.html) function. See [ByteVal](https://www.hollywood-mal.com/docs/html/hollywood/ByteVal_.html).",
    "inputsDocs": "* `v` â€” numeric value to convert to binary data\n* `type` â€” optional: type of value to store in string (defaults to `#INTEGER`)\n* `le` â€” optional: whether or not to use little endian byte order (defaults to `False`)",
    "resultsDocs": "* `r$` â€” resulting string",
    "platforms": ["All"],
    "insertText": "ByteStrStr(${1:v})"
  },
  {
    "name": "ByteVal",
    "helpId": "ByteVal",
    "shortDescription": "convert raw bytes to value",
    "version": "8.0",
    "synopsis": "v = ByteVal(s$[, type, le])",
    "functionDocs": "This function can be used to convert raw bytes from the string passed in `s$` to a numeric value. The number of bytes that will be read from the string `s$` depend on the type that you pass in the `type` argument. The following types are currently supported:\n\n- `#BYTE`: Reads an 8-bit value (1 byte) from the string and returns it.\n\n- `#SHORT`: Reads a 16-bit value (2 bytes) from the string and returns it.\n\n- `#INTEGER`: Reads a 32-bit value (4 bytes) from the string and returns it. This is the default.\n\n- `#FLOAT`: Reads a 32-bit floating point value (4 bytes) from the string and returns it.\n\n- `#DOUBLE`: Reads a 64-bit floating point value (8 bytes) from the string and returns it.\n\nFor all multi-byte types, i.e. all types except `#BYTE`, you can use the additional `le` argument to specify the order in which the bytes should be read from `s$`. If you set `le` to `True`, the bytes will be read in little endian order (LSB first), otherwise the bytes will be read in big endian order (MSB first). Big endian is also the default.\n\nNote that for all integer types the result will always be unsigned. You can use the [Cast()](https://www.hollywood-mal.com/docs/html/hollywood/Cast_.html) function if you need to cast the result to a signed type. See [Cast](https://www.hollywood-mal.com/docs/html/hollywood/Cast_.html).\n\nIf you need to convert a value to raw bytes, you can use the [ByteStrStr()](https://www.hollywood-mal.com/docs/html/hollywood/ByteStrStr_.html) function. See [ByteStrStr](https://www.hollywood-mal.com/docs/html/hollywood/ByteStrStr_.html).",
    "inputsDocs": "* `s$` â€” string to read data from\n* `type` â€” optional: type of value to read (defaults to `#INTEGER`)\n* `le` â€” optional: whether or not to use little endian byte order (defaults to `False`)",
    "resultsDocs": "* `v` â€” resulting value",
    "platforms": ["All"],
    "insertText": "ByteVal(${1:s$})"
  },
  {
    "name": "CharOffset",
    "helpId": "CharOffset",
    "shortDescription": "convert byte to character offset",
    "version": "7.0",
    "synopsis": "coff = CharOffset(s$, boff[, encoding])",
    "functionDocs": "This function returns the offset, in characters, of the character at the offset specified by `boff`, in bytes and starting from 0, inside string `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nIn the UTF-8 character encoding a single character may need a storage space of up to 4 bytes. In the ISO 8859-1 character encoding there is no difference between byte and character sizes. Hence, it doesn't really make sense to call this function with the character encoding set to `#ENCODING_ISO8859_1`.\n\nTo convert a character offset into a byte offset use the [ByteOffset()](https://www.hollywood-mal.com/docs/html/hollywood/ByteOffset_.html) function. See [ByteOffset](https://www.hollywood-mal.com/docs/html/hollywood/ByteOffset_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `boff` â€” byte offset to be mapped to a character offset (starting from 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `coff` â€” character offset of the specified character",
    "example": "```\ncoff = CharOffset(\"äöü\", 2)\nPrint(coff)\n```\n\nIf Hollywood is in Unicode mode, this will return 1 because the \"ä\" character takes up 2 bytes in UTF-8 code space. In ISO 8859-1 there is no difference between characters and bytes, so 1 will be returned in that case.",
    "platforms": ["All"],
    "insertText": "CharOffset(${1:s$}, ${2:boff})"
  },
  {
    "name": "CharWidth",
    "helpId": "CharWidth",
    "shortDescription": "return byte width of character",
    "version": "7.0",
    "synopsis": "w = CharWidth(s$[, pos, encoding])",
    "functionDocs": "Calculates the byte width of the character at position `pos` inside `s$`. The position must be specified in characters, not in bytes. The `pos` argument is optional and defaults to 0, i.e. the beginning of the string, if omitted.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nIn the UTF-8 character encoding a single character may need a storage space of up to 4 bytes. In the ISO 8859-1 character encoding there is no difference between byte and character sizes. Hence, it doesn't really make sense to call this function with the character encoding set to `#ENCODING_ISO8859_1`.",
    "inputsDocs": "* `s$` â€” input string\n* `pos` â€” optional: index, in characters, of the character whose width should be calculated\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `w` â€” byte width of character at the specified position",
    "example": "```\nw = CharWidth(\"ä\")\nPrint(w)\n```\n\nIf Hollywood is in Unicode mode, this will return 2 because the \"ä\" character takes up 2 bytes in UTF-8 code space. In ISO 8859-1 there is no difference between characters and bytes, so 1 will be returned in that case.",
    "platforms": ["All"],
    "insertText": "CharWidth(${1:s$})"
  },
  {
    "name": "Chr",
    "helpId": "Chr",
    "shortDescription": "convert code point value to string",
    "version": "1.0",
    "synopsis": "var$ = Chr(value[, encoding])",
    "functionDocs": "Converts the code point value specified in `value` into a string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nIf you want to work with raw bytes instead of code points, you can either set the `encoding` parameter to `#ENCODING_RAW` or use the [ByteChr()](https://www.hollywood-mal.com/docs/html/hollywood/ByteChr_.html) function. See [ByteChr](https://www.hollywood-mal.com/docs/html/hollywood/ByteChr_.html).\n\nNote that if you pass 0 in `value` this function will always return an empty string. If you want to have a string that contains a `NULL` character instead, use the [ByteChr()](https://www.hollywood-mal.com/docs/html/hollywood/ByteChr_.html) function.",
    "inputsDocs": "* `value` â€” code point value\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = Chr(65)\nPrint(test$)\n```\n\nThis will print \"A\" to the screen because 65 is the code point value for \"A\", in both ASCII and Unicode character encodings.",
    "platforms": ["All"],
    "insertText": "Chr(${1:value})"
  },
  {
    "name": "CompareStr",
    "helpId": "CompareStr",
    "shortDescription": "compare two strings",
    "version": "7.0",
    "synopsis": "r = CompareStr(s1$, s2$[, casesen, encoding])",
    "functionDocs": "This function compares `s1$` and `s2$` and returns how the two strings are related. If `s1$` is lexically less than `s2$`, -1 is returned. If `s1$` is lexically greater than `s2$`, 1 is returned, otherwise, i.e. if the strings are equal, the return value is 0.\n\nThe optional argument `casesen` can be used to specify whether or not the strings should be compared in a case-sensitive manner. This defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s1$` â€” first string to compare\n* `s2$` â€” second string to compare\n* `casesen` â€” optional: `True` for a case-sensitive comparison, otherwise FALSE; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `r` â€” relation of the two strings",
    "example": "```\nDebugPrint(CompareStr(\"z\", \"a\"))\n```\n\nThe code above prints 1 because \"z\" is lexically greater than \"a\".",
    "platforms": ["All"],
    "insertText": "CompareStr(${1:s1$}, ${2:s2$})"
  },
  {
    "name": "ConvertStr",
    "helpId": "ConvertStr",
    "shortDescription": "convert between character encodings",
    "version": "7.0",
    "synopsis": "c$ = ConvertStr(s$, inencoding, outencoding)",
    "functionDocs": "Converts `s$` from the character encoding specified by `inencoding` to the character encoding specified by `outencoding` and returns it. See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `inencoding` â€” source character encoding\n* `outencoding` â€” destination character encoding",
    "resultsDocs": "* `c$` â€” converted string in new character encoding",
    "platforms": ["All"],
    "insertText": "ConvertStr(${1:s$}, ${2:inencoding}, ${3:outencoding})"
  },
  {
    "name": "CountStr",
    "helpId": "CountStr",
    "shortDescription": "count number of substring occurrences",
    "version": "4.5",
    "synopsis": "n = CountStr(s$, sub$[, casesen, startpos, encoding])",
    "functionDocs": "This function counts the number of occurrences of `sub$` inside `s$`. The optional argument `casesen` specifies whether or not the strings shall be compared in a case sensitive manner. Furthermore, you can use the `startpos` argument to specify an offset into `s$` at which `CountStr()` should start counting. This offset is in characters, not in bytes. Position 0 means the beginning of the string.\n\nThe `casesen` parameter defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `sub$` â€” the string to search in `s$`\n* `casesen` â€” optional: set this to `True` if the case in `s$` must match the case setting in `sub$`; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `startpos` â€” optional: character offset inside `s$` to start the search (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `n` â€” number of occurrences of `sub$` inside `s$`",
    "example": "```\nret = CountStr(\"What is that on your head? Is that a new hat? \" ..\n    \"You have not had that on our last chat!\", \"hat\")\n```\n\nThe above code should return 6 because \"hat\" occurs 6 times in the source string.",
    "platforms": ["All"],
    "insertText": "CountStr(${1:s$}, ${2:sub$})"
  },
  {
    "name": "CRC32Str",
    "helpId": "CRC32Str",
    "shortDescription": "calculate CRC32 checksum of string",
    "version": "5.0",
    "synopsis": "sum = CRC32Str(s$)",
    "functionDocs": "This function calculates the CRC32 checksum of the string specified in `s$` and returns it. Note that Hollywood strings can also contain binary data so that you can also use this function with non-text strings.\n\nIf you want to compute the CRC32 checksum of a file, use the [CRC32()](https://www.hollywood-mal.com/docs/html/hollywood/CRC32_.html) function instead.",
    "inputsDocs": "* `s$` â€” string whose checksum you want to have calculated",
    "resultsDocs": "* `sum` â€” CRC32 checksum of string",
    "platforms": ["All"],
    "insertText": "CRC32Str(${1:s$})"
  },
  {
    "name": "EmptyStr",
    "helpId": "EmptyStr",
    "shortDescription": "check if string is empty",
    "version": "7.1",
    "synopsis": "bool = EmptyStr(s$)",
    "functionDocs": "This function returns `True` if the string is empty, i.e. if it contains only whitespace characters. The following characters are whitespace characters: space, form-feed (\"\\f\"), newline (\"\\n\"), carriage return (\"\\r\"), horizontal tab (\"\\t\"), and vertical tab (\"\\v\").",
    "inputsDocs": "* `s$` â€” input string",
    "resultsDocs": "* `bool` â€” `True` if input string contains only whitespace characters",
    "platforms": ["All"],
    "insertText": "EmptyStr(${1:s$})"
  },
  {
    "name": "EndsWith",
    "helpId": "EndsWith",
    "shortDescription": "check if string ends on substring",
    "version": "7.1",
    "synopsis": "bool = EndsWith(s$, substr$[, casesen, encoding])",
    "functionDocs": "This function can be used to check if `s$` ends on the substring specified by `substr$`. If it does, `True` is returned, `False` otherwise. If the optional argument `casesen` is set to `False`, the strings do not have to match in case. `casesen` defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `substr$` â€” string to compare against `s$`\n* `casesen` â€” optional: whether or not a case sensitive comparison should be activated; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” boolean value indicating success or failure",
    "platforms": ["All"],
    "insertText": "EndsWith(${1:s$}, ${2:substr$})"
  },
  {
    "name": "Eval",
    "helpId": "Eval",
    "shortDescription": "evaluate string expression",
    "version": "5.0",
    "synopsis": "val = Eval(expr$[, table])",
    "functionDocs": "`Eval()` evaluates the numeric expression passed to it in `expr$` and returns its result as a number. The string passed in `expr$` can use all operators that are recognized by Hollywood except the string concatenation operator because this operator requires a string while the `Eval()` function only works with numbers. You can also prioritize certain subexpressions by using parentheses. The operators defined by `Eval()` use the same priorities as in Hollywood itself. See [Operator priorities](https://www.hollywood-mal.com/docs/html/hollywood/PrgOprPri_.html).\n\nNumbers inside `expr$` can be specified in decimal or hexadecimal format. If you use hexadecimal format, you have to prefix the number using the $ dollar sign.\n\nIt is also possible to use variables in the expression. Your script variables, however, are not automatically available to `Eval()`. To make your script variables available to `Eval()`, you need to set the `MapVariables` tag in the optional table argument to `True`. Alternatively, you can also choose to define private variables for `Eval()` by setting the `Variables` tag in the optional table argument. If both script variables and private variables are used, the private ones will take precedence.\n\nHere is a list of all tags currently supported by the optional table argument:\n\n- `Variables`: This tag can be used to pass an array of variables that you want your expression to be able to access to `Eval()`. You have to pass an array here that consists of a number of `Name` and `Value` pairs. `Name` must contain the desired name for the variable and `Value` must contain the value the variable should be initialized to. The semantics of the variable name are the same as in Hollywood, i.e. it is only allowed to use alphanumerical characters plus the special characters \"$\", \"!\", and \"_\". The first character must not be a number. See below for an example.\n\n- `MapVariables`: If this tag is set to `True`, `Eval()` will also take normal Hollywood variables into account when evaluating the expression. Note that the variables must be numeric variables only and the ones declared in the `Variables` tag (see above) will take precedence. Defaults to `False`. (V9.0)\n\n- `NoDeclare`: If this tag is set to `True`, all undeclared variables in the expression will be treated as 0. By default, `Eval()` will throw an error when trying to access an undeclared variable. Defaults to `False`. (V9.0)",
    "inputsDocs": "* `expr$` â€” numeric expression to evaluate\n* `table` â€” optional: table containing further arguments",
    "resultsDocs": "* `val` â€” evaluation result",
    "example": "```\nv = Eval(\"5*(6+1)\")\n```\n\nThe call above returns 35.\n\n---\n\n```\nv = Eval(\"var1*(var2+1)\", {Variables = {{Name = \"var1\", Value = 5},\n         {Name = \"var2\", Value = 6}}})\n```\n\nThe code above does the same as the first example but uses variables instead of direct numbers.\n\n---\n\n```\nvar1 = 5\nvar2 = 6\nv = Eval(\"var1*(var2+1)\", {MapVariables = True})\n```\n\nThe code above does the same as the first two examples but now maps the Hollywood variables `var1` and `var2` to `Eval()`'s variable space.",
    "platforms": ["All"],
    "insertText": "Eval(${1:expr$})"
  },
  {
    "name": "FindStr",
    "helpId": "FindStr",
    "shortDescription": "find a substring in a string",
    "version": "1.0",
    "synopsis": "pos = FindStr(string$, substring$[, casesensitive, startpos, encoding])",
    "functionDocs": "Searches for `substring$` in `string$` and returns the position of the substring. The position is returned in characters, not in bytes, starting at position 0 for the first character. If `substring$` cannot be found, -1 is returned. The optional argument `casesensitive` allows you to specify if the search should be case sensitive. This defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nStarting with Hollywood 4.5, you can also specify a starting position for the search in the optional argument `startpos`. This position needs to be specified in characters, not in bytes. Specifying 0 as the starting position means start searching from the beginning of the string. This is also the default.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to search in\n* `substring$` â€” string to find in `string$`\n* `casesensitive` â€” `True` for a case sensitive search or `False` for a case insensitive search; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `startpos` â€” optional: starting position of the search operation in characters (defaults to 0) (V4.5)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `pos` â€” position of `substring$` in `string$` in characters or -1 if not found",
    "example": "```\nresult = FindStr(\"Hello World!\", \"World\")\nPrint(result)\n```\n\nThis will print \"6\" which is the position of the first char \"W\".",
    "platforms": ["All"],
    "insertText": "FindStr(${1:string$}, ${2:substring$})"
  },
  {
    "name": "FormatNumber",
    "helpId": "FormatNumber",
    "shortDescription": "convert number to string with digit separation",
    "version": "10.0",
    "synopsis": "s$ = FormatNumber(n[, decimals, point$, thousands$])",
    "functionDocs": "This function converts the number specified by `n` to a string, separating the digits by the thousands and clipping the decimal places to the number passed in the `decimals` argument. You can also pass the character that should be used as a decimal separator in `point$` and the character that should be used as a thousands separator in `thousands$`. This makes `FormatNumber()` suitable for locale-sensitive number formatting. You can use the [GetLocaleInfo()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocaleInfo_.html) function to get the decimal point and thousand separator character for the current locale. See [GetLocaleInfo](https://www.hollywood-mal.com/docs/html/hollywood/GetLocaleInfo_.html).",
    "inputsDocs": "* `n` â€” number to convert to string\n* `decimals` â€” optional: number of decimal places to use (defaults to 0)\n* `point$` â€” optional: character to use as decimal point (defaults to \".\")\n* `thousands$` â€” optional: character to use as thousands separator (defaults to \",\")",
    "resultsDocs": "* `s$` â€” formatted string",
    "example": "```\nt = GetLocaleInfo()\ns$ = FormatNumber(1234567.89, 2, t.DecimalPoint, t.ThousandSeparator)\nDebugPrint(s$)\n```\n\nThe code above will convert 1234567.89 to a string using the current locale's decimal point and thousand separator.",
    "platforms": ["All"],
    "insertText": "FormatNumber(${1:n})"
  },
  {
    "name": "FormatStr",
    "helpId": "FormatStr",
    "shortDescription": "compose a C-style formatted string",
    "version": "5.0",
    "synopsis": "s$ = FormatStr(fmt$, ...)",
    "functionDocs": "This function can be used to compose a C-style formatted string with Hollywood. You have to pass the formatting template in the first argument and you have to pass one additional argument for every token in the template. Hollywood supports most of the tokens of C's `printf` specification. Here is a list of all tokens that are currently supported:\n\n- `%c` ASCII character\n- `%d` Signed decimal integer\n- `%i` Same as `%d`\n- `%o` Unsigned octal integer\n- `%u` Unsigned decimal integer\n- `%x` Unsigned hexadecimal integer (lower case notation)\n- `%X` Unsigned hexadecimal integer (upper case notation)\n- `%e` Floating point number in exponential notation\n- `%E` Same as `%e` but in upper case exponential notation\n- `%f` Floating point number in normal notation\n- `%g` Floating point number in `%e` or `%f` format (whichever is more compact)\n- `%G` Same as `%g` but uses upper case if exponential notation is used\n- `%s` String\n\nYou can also specify a width field before the token to limit the number of characters that the specific token should add to the string. For example, if you use the token `%.6x`, the hexadecimal number generated by this function will always have 6 digits.\n\nAs the percent sign is used for tokens by this function, you need to escape it if you just want to append a percent sign to the string. In that case simply use a double percent sign (`%%`).",
    "inputsDocs": "* `fmt$` â€” formatting template containing one or more tokens                (see above for supported tokens)\n* `...` â€” additional arguments (one for each token present in `fmt$`)",
    "resultsDocs": "* `s$` â€” resulting string",
    "example": "```\na = 128\ns$ = FormatStr(\"The number \" .. a .. \" is $%x in hexadecimal notation\", a)\n```\n\nThe code above converts the number 128 to hexadecimal notation.\n\n---\n\n```\na = 255\ns$ = FormatStr(\"The number \" .. a .. \" is $%.6x in RGB notation\", a)\n```\n\nThe code above converts the number 255 into a 6 digit hexadecimal value which is often used to specify RGB colors.",
    "platforms": ["All"],
    "insertText": "FormatStr(${1:fmt$})"
  },
  {
    "name": "HexStr",
    "helpId": "HexStr",
    "shortDescription": "convert value to a hex string",
    "version": "1.5",
    "synopsis": "hex$ = HexStr(val)",
    "functionDocs": "This function converts the value specified by `val` into hexadecimal digits and returns it as a string. The returned string will be prefixed with a dollar sign ($) and all alphabetical hexadecimal digits will be in upper case.",
    "inputsDocs": "* `val` â€” value to convert",
    "resultsDocs": "* `hex$` â€” hexadecimal representation of `val`",
    "example": "```\na$ = HexStr(255)\n```\n\nThis will return the string \"$FF\".",
    "platforms": ["All"],
    "insertText": "HexStr(${1:val})"
  },
  {
    "name": "IgnoreCase",
    "helpId": "IgnoreCase",
    "shortDescription": "define default case sensitive setting",
    "version": "9.0",
    "synopsis": "IgnoreCase(casesen)",
    "functionDocs": "This function allows you to specify whether functions like [FindStr()](https://www.hollywood-mal.com/docs/html/hollywood/FindStr_.html) and [ReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/ReplaceStr_.html) should be case sensitive by default. If you set the `casesen` argument to `True`, those functions will be case sensitive. If you set it to `False`, they won't be case sensitive. By default, they are case sensitive.\n\n`IgnoreCase()` affects the following Hollywood functions:\n\n- [CompareStr()](https://www.hollywood-mal.com/docs/html/hollywood/CompareStr_.html)\n- [CountStr()](https://www.hollywood-mal.com/docs/html/hollywood/CountStr_.html)\n- [EndsWith()](https://www.hollywood-mal.com/docs/html/hollywood/EndsWith_.html)\n- [FindStr()](https://www.hollywood-mal.com/docs/html/hollywood/FindStr_.html)\n- [ReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/ReplaceStr_.html)\n- [ReverseFindStr()](https://www.hollywood-mal.com/docs/html/hollywood/ReverseFindStr_.html)\n- [StartsWith()](https://www.hollywood-mal.com/docs/html/hollywood/StartsWith_.html)",
    "inputsDocs": "* `casesen` â€” `True` if functions should case sensitive by default, `False` otherwise",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "IgnoreCase(${1:casesen})"
  },
  {
    "name": "InsertStr",
    "helpId": "InsertStr",
    "shortDescription": "insert substring into string with optional overwriting",
    "version": "4.5",
    "synopsis": "var$ = InsertStr(s$, sub$, pos[, overwrite, encoding])",
    "functionDocs": "This function inserts `sub$` into `s$` at the position specified by `pos` (0 means beginning of the string). The position needs to be specified in characters, not in bytes. If the optional argument `overwrite` is set to `True`, `sub$` will overwrite any characters that were previously there on the insert position.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to insert `sub$` into\n* `sub$` â€” substring to insert\n* `pos` â€” position at which to insert `sub$` in characters (0 means beginning)\n* `overwrite` â€” optional: whether the `sub$` should overwrite characters in `s$` or shift them to the right (defaults to `False` which means no overwriting)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\nPrint(InsertStr(\"Hollywood is a very cool program!\", \" very\", 19))\n```\n\nThe above code prints \"Hollywood is a very very cool program!\"\n\n---\n\n```\nPrint(InsertStr(\"Hollywood is a very cool program!\", \"good\", 20, True))\n```\n\nThe above code prints \"Hollywood is a very good program!\"",
    "platforms": ["All"],
    "insertText": "InsertStr(${1:s$}, ${2:sub$}, ${3:pos})"
  },
  {
    "name": "IsAlNum",
    "helpId": "IsAlNum",
    "shortDescription": "check if character is alphanumeric",
    "version": "7.0",
    "synopsis": "bool = IsAlNum(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is either a decimal digit or an upper or lower case letter and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsAlNum(${1:s$})"
  },
  {
    "name": "IsAlpha",
    "helpId": "IsAlpha",
    "shortDescription": "check if character is alphabetic",
    "version": "7.0",
    "synopsis": "bool = IsAlpha(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is an alphabetic letter and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsAlpha(${1:s$})"
  },
  {
    "name": "IsCntrl",
    "helpId": "IsCntrl",
    "shortDescription": "check if character is a control character",
    "version": "7.0",
    "synopsis": "bool = IsCntrl(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a control character and returns `True` if it is, otherwise `False`. A control character is a character that is not printable, e.g. backspace, tab, line feed, escape, etc. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsCntrl(${1:s$})"
  },
  {
    "name": "IsDigit",
    "helpId": "IsDigit",
    "shortDescription": "check if character is a decimal digit",
    "version": "7.0",
    "synopsis": "bool = IsDigit(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a decimal digit and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsDigit(${1:s$})"
  },
  {
    "name": "IsGraph",
    "helpId": "IsGraph",
    "shortDescription": "check if character has a graphical representation",
    "version": "7.0",
    "synopsis": "bool = IsGraph(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` has a graphical representation and returns `True` if it has, otherwise `False`. This function does the same as [IsPrint()](https://www.hollywood-mal.com/docs/html/hollywood/IsPrint_.html) except that it does not return `True` for the space character. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsGraph(${1:s$})"
  },
  {
    "name": "IsLower",
    "helpId": "IsLower",
    "shortDescription": "check if character is a lowercase letter",
    "version": "7.0",
    "synopsis": "bool = IsLower(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a lowercase letter and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsLower(${1:s$})"
  },
  {
    "name": "IsPrint",
    "helpId": "IsPrint",
    "shortDescription": "check if character is printable",
    "version": "7.0",
    "synopsis": "bool = IsPrint(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is printable and returns `True` if it is, `False` otherwise. Printable characters are all characters that have a graphical representation, including the space character. Printable characters are the opposite to control characters. `IsPrint()` basically does the same as [IsGraph()](https://www.hollywood-mal.com/docs/html/hollywood/IsGraph_.html), the only difference being that `IsPrint()` returns `True` for the space character as well whereas [IsGraph()](https://www.hollywood-mal.com/docs/html/hollywood/IsGraph_.html) doesn't. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsPrint(${1:s$})"
  },
  {
    "name": "IsPunct",
    "helpId": "IsPunct",
    "shortDescription": "check if character is a punctuation character",
    "version": "7.0",
    "synopsis": "bool = IsPunct(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a punctuation character and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsPunct(${1:s$})"
  },
  {
    "name": "IsSpace",
    "helpId": "IsSpace",
    "shortDescription": "check if character is a white-space character",
    "version": "7.0",
    "synopsis": "bool = IsSpace(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a white-space character and returns `True` if it is, otherwise `False`. White-space characters are characters such as space, tab, newline, carriage return, etc. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsSpace(${1:s$})"
  },
  {
    "name": "IsUpper",
    "helpId": "IsUpper",
    "shortDescription": "check if character is an uppercase letter",
    "version": "7.0",
    "synopsis": "bool = IsUpper(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is an uppercase letter and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsUpper(${1:s$})"
  },
  {
    "name": "IsXDigit",
    "helpId": "IsXDigit",
    "shortDescription": "check if character is a hexadecimal digit",
    "version": "7.0",
    "synopsis": "bool = IsXDigit(s$[, pos, encoding])",
    "functionDocs": "Checks if the character at index `pos` inside string `s$` is a hexadecimal digit and returns `True` if it is, otherwise `False`. The optional `pos` parameter must be in characters, not in bytes. It defaults to 0 which will test the first character in `s$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” source string\n* `pos` â€” optional: index of character to test (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” `True` or `False`, depending on the test's result",
    "platforms": ["All"],
    "insertText": "IsXDigit(${1:s$})"
  },
  {
    "name": "LeftStr",
    "helpId": "LeftStr",
    "shortDescription": "return the n leftmost characters of a string",
    "version": "1.0",
    "synopsis": "var$ = LeftStr(string$, len[, encoding])",
    "functionDocs": "This function returns the `len` leftmost characters of `string$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” source string\n* `len` â€” number of characters to return\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = LeftStr(\"Hello World!\", 5)\nPrint(test$)\n```\n\nThis will print \"Hello\" to the screen.",
    "platforms": ["All"],
    "insertText": "LeftStr(${1:string$}, ${2:len})"
  },
  {
    "name": "LowerStr",
    "helpId": "LowerStr",
    "shortDescription": "convert all characters in a string to lower case",
    "version": "1.0",
    "synopsis": "var$ = LowerStr(string$[, encoding])",
    "functionDocs": "Converts all characters in `string$` to lower case and returns the new string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to convert\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” converted string",
    "example": "```\ntest$ = LowerStr(\"Hello World!\")\nPrint(test$)\n```\n\nThis will print \"hello world!\" to the screen.",
    "platforms": ["All"],
    "insertText": "LowerStr(${1:string$})"
  },
  {
    "name": "MD5Str",
    "helpId": "MD5Str",
    "shortDescription": "calculate MD5 checksum of string",
    "version": "5.0",
    "synopsis": "sum$ = MD5Str(s$)",
    "functionDocs": "This function calculates the MD5 checksum of the string specified in `s$` and returns it. The 128-bit checksum is returned as a string containing 16 hex digits. Note that Hollywood strings can also contain binary data so that you can also use this function with non-text strings.\n\nIf you want to compute the MD5 checksum of a file, use the [MD5()](https://www.hollywood-mal.com/docs/html/hollywood/MD5_.html) function instead.",
    "inputsDocs": "* `s$` â€” string whose checksum you want to have calculated",
    "resultsDocs": "* `sum$` â€” MD5 checksum of string",
    "platforms": ["All"],
    "insertText": "MD5Str(${1:s$})"
  },
  {
    "name": "MidStr",
    "helpId": "MidStr",
    "shortDescription": "extract characters from a string",
    "version": "1.0",
    "synopsis": "var$ = MidStr(string$, startpos[, len, encoding])",
    "functionDocs": "Returns `len` characters from `string$` (starting at position `startpos`) as a new string. The starting position `startpos` needs to be specified in characters, not in bytes.\n\nStarting with Hollywood 6.1 `len` may be omitted or set to -1. In that case, the remaining characters in `string$` will be returned.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” source string\n* `startpos` â€” starting offset in characters (first character is at position 0)\n* `len` â€” optional: how many characters shall be returned; if you omit this argument or set it to -1, all remaining characters will be returned\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = MidStr(\"Hello World!\", 4, 3)\nPrint(test$)\n```\n\nThis will print \"o W\" to the screen.",
    "platforms": ["All"],
    "insertText": "MidStr(${1:string$}, ${2:startpos})"
  },
  {
    "name": "PadNum",
    "helpId": "PadNum",
    "shortDescription": "convert number to string with padding",
    "version": "2.0",
    "synopsis": "s$ = PadNum(num, len)",
    "functionDocs": "This function converts the integer specified in `num` to a string. Additionally, it adds leading zeros until the string is of the length specified in `len`. The number must not be negative and must not contain any decimal places.",
    "inputsDocs": "* `num` â€” number to convert to string\n* `len` â€” desired string length",
    "resultsDocs": "* `s$` â€” padded string",
    "example": "```\nDebugPrint(PadNum(9, 2))\n```\n\nPrints \"09\".",
    "platforms": ["All"],
    "insertText": "PadNum(${1:num}, ${2:len})"
  },
  {
    "name": "PatternFindStr",
    "helpId": "PatternFindStr",
    "shortDescription": "parse a string using pattern matching iterator function",
    "version": "5.0",
    "synopsis": "func, state, val = PatternFindStr(s$, pat$[, encoding])",
    "functionDocs": "This function can be used in conjunction with the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement to parse the string specified in `s$` according to the pattern specified in `pat$`. As required by the generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement, `PatternFindStr()` will return three values: An iterator function, a private state information, and an initial value for the traversal. Each time it is called, the iterator function will return the next captures from pattern `pat$` over string `s$`. If `pat$` specifies no captures, then the whole match is produced in each call.\n\nThe pattern specified in `pat$` must adhere to the pattern syntax as described in the documentation of the [PatternReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html) function. See [PatternReplaceStr](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html).\n\nSee [Generic For statement](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html).\n\nStarting with Hollywood 6.0, this function is also available in a version that can be used without a generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement. So if you only care about the first occurrence of `pat$` in `s$`, then you might want to use [PatternFindStrDirect()](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrDirect_.html) instead. See [PatternFindStrDirect](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrDirect_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to parse\n* `pat$` â€” pattern according to which the string should be parsed\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `func` â€” iterator function\n* `state` â€” private state information\n* `val` â€” initial traversal value",
    "example": "```\ns$ = \"Hello World from Hollywood\"\nFor w$ In PatternFindStr(s$, \"%a+\") Do DebugPrint(w$)\n```\n\nThe above code will iterate over all the words from string `s$`, printing one per line.\n\n---\n\n```\nt = {}\ns$ = \"Name=Andreas, Sex=Male, Nationality=German\"\nFor k, v in PatternFindStr(s$, \"(%w+)=(%w+)\") Do t[k] = v\n```\n\nThe above example collects all pairs key=value from the given string into a table.",
    "platforms": ["All"],
    "insertText": "PatternFindStr(${1:s$}, ${2:pat$})"
  },
  {
    "name": "PatternFindStrDirect",
    "helpId": "PatternFindStrDirect",
    "shortDescription": "parse a string using pattern matching",
    "version": "6.0",
    "synopsis": "start, end, ... = PatternFindStrDirect(s$, pat$[, start, encoding])",
    "functionDocs": "This function parses the string specified in `s$` according to the pattern specified in `pat$`. If there is a match, the indices of where the match starts and ends in the source string are returned together with all strings that have been captured. If there is no match, `PatternFindStrDirect()` will return -1. The optional argument `start` can be used to specify a character index inside `s$` where searching should begin. This defaults to 0 which means `PatternFindStrDirect()` should start at the beginning of `s$`.\n\nThis function does pretty much the same as [PatternFindStr()](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStr_.html) but does not require you to use a generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) statement. Instead, all captures are returned along with the start and end indices. Keep in mind, though, that `PatternFindStrDirect()` does not operate inside a generic [For](https://www.hollywood-mal.com/docs/html/hollywood/PrgFor_.html) loop, so only the first occurrence of `pat$` inside `s$` will be handled of course.\n\nIf you do not need the start and end indices, you can also use the [PatternFindStrShort()](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrShort_.html) function instead. See [PatternFindStrShort](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrShort_.html).\n\nThe pattern specified in `pat$` must adhere to the pattern syntax as described in the documentation of the [PatternReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html) function. See [PatternReplaceStr](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to parse\n* `pat$` â€” pattern according to which the string should be parsed\n* `start` â€” optional: position where search should start (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `start` â€” position of the first match inside `s$` or -1 for no match\n* `end` â€” position of the last match inside `s$`\n* `...` â€” individual strings with all captures",
    "example": "```\nDebugPrint(PatternFindStrDirect(\"Name=Andreas\", \"(%w+)=(%w+)\"))\n```\n\nThe above example returns the strings next to the equal sign and the range 0 to 11 which describes the complete source string.",
    "platforms": ["All"],
    "insertText": "PatternFindStrDirect(${1:s$}, ${2:pat$})"
  },
  {
    "name": "PatternFindStrShort",
    "helpId": "PatternFindStrShort",
    "shortDescription": "parse a string using pattern matching",
    "version": "6.0",
    "synopsis": "... = PatternFindStrShort(s$, pat$[, start, encoding])",
    "functionDocs": "This function does the same as [PatternFindStrDirect()](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrDirect_.html) but does not return the start and end indices. See [PatternFindStrDirect](https://www.hollywood-mal.com/docs/html/hollywood/PatternFindStrDirect_.html).\n\nThe pattern specified in `pat$` must adhere to the pattern syntax as described in the documentation of the [PatternReplaceStr()](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html) function. See [PatternReplaceStr](https://www.hollywood-mal.com/docs/html/hollywood/PatternReplaceStr_.html).",
    "inputsDocs": "* `s$` â€” string to parse\n* `pat$` â€” pattern according to which the string should be parsed\n* `start` â€” optional: position where search should start (defaults to 0)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `...` â€” individual strings with all captures",
    "example": "```\nDebugPrint(PatternFindStrShort(\"Name=Andreas\", \"(%w+)=(%w+)\"))\n```\n\nThe above example returns the strings next to the equal sign.",
    "platforms": ["All"],
    "insertText": "PatternFindStrShort(${1:s$}, ${2:pat$})"
  },
  {
    "name": "PatternReplaceStr",
    "helpId": "PatternReplaceStr",
    "shortDescription": "modify string contents using pattern matching",
    "version": "5.0",
    "synopsis": "r$, n = PatternReplaceStr(s$, pat$, repl[, n, encoding])",
    "functionDocs": "`PatternReplaceStr()` can be used to modify a string's contents using pattern matching. This function is powerful and can be used for all kinds of string operations. It returns a copy of `s$` in which all occurrences of the pattern `pat$` have been replaced by a replacement string specified by `repl`. `PatternReplaceStr()` also returns, as a second value, the total number of substitutions made.\n\nThe third argument `repl` can be either a string or a callback function. If `repl` is a string, then its value is used for replacement. Any sequence in `repl` of the form `%n`, with `n` between 1 and 9, stands for the value of the n-th captured substring (see below). If `repl` is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order; if the pattern specifies no captures, then the whole match is passed as a sole argument. If the value returned by this function is a string, then it is used as the replacement string; otherwise, the replacement string is the empty string.\n\nThe optional argument `n` limits the maximum number of substitutions to occur. For instance, when `n` is 1 only the first occurrence of `pat$` is replaced.\n\nThe pattern specified in `pat$` is made up of a sequence of pattern items. A pattern item is usually a character class which in turn represents a set of characters. The following combinations are allowed in describing a character class:\n\n- `x (where x is not one of the magic characters ^$()%.[]*+-?)` Represents the character x itself.\n- `. (a dot)` Represents all characters.\n- `%a` Represents all letters.\n- `%c` Represents all control characters.\n- `%d` Represents all digits.\n- `%g` Represents all characters that have a graphical representation. (V7.0)\n- `%l` Represents all lowercase letters.\n- `%p` Represents all punctuation characters.\n- `%s` Represents all space characters.\n- `%u` Represents all uppercase letters.\n- `%w` Represents all alphanumeric characters.\n- `%x` Represents all hexadecimal digits.\n- `%z` Represents the character with representation 0.\n- `%x (where x is any non-alphanumeric character)` Represents the character `x`. This is the standard way to escape the magic characters. Any punctuation character (even the non magic) can be preceded by a `%` when used to represent itself in a pattern.\n- `[set]` Represents the class which is the union of all characters in set. A range of characters may be specified by separating the end characters of the range with a `-`. All classes `%x` described above may also be used as components in set. All other characters in set represent themselves. For example, `[%w_]` (or `[_%w]`) represents all alphanumeric characters plus the underscore, `[0-7]` represents the octal digits, and `[0-7%l%-]` represents the octal digits plus the lowercase letters plus the `-` character. The interaction between ranges and classes is not defined. Therefore, patterns like `[%a-z]` or `[a-%%]` have no meaning.\n- `[^set]` Represents the complement of set, where set is interpreted as above.\n\nFor all classes represented by single letters (`%a`, `%c`, etc.), the corresponding uppercase letter represents the complement of the class. For instance, `%S` represents all non-space characters.\n\nThe following items are valid pattern items:\n\n- a single character class, which matches any single character in the class\n- a single character class followed by `*`, which matches 0 or more repetitions of characters in the class. These repetition items will always match the longest possible sequence\n- a single character class followed by `+`, which matches 1 or more repetitions of characters in the class. These repetition items will always match the longest possible sequence\n- a single character class followed by `-`, which also matches 0 or more repetitions of characters in the class. Unlike `*`, these repetition items will always match the shortest possible sequence\n- a single character class followed by `?`, which matches 0 or 1 occurrence of a character in the class\n- `%n`, for `n` between 1 and 9; such item matches a substring equal to the n-th captured string (see below)\n- `%bxy`, where `x` and `y` are two distinct characters; such item matches strings that start with `x`, end with `y`, and where the `x` and `y` are balanced. This means that, if one reads the string from left to right, counting +1 for an `x` and -1 for a `y`, the ending `y` is the first `y` where the count reaches 0. For instance, the item `%b()` matches expressions with balanced parentheses.\n\nA pattern is a sequence of pattern items. A `^` at the beginning of a pattern anchors the match at the beginning of the subject string. A `$` at the end of a pattern anchors the match at the end of the subject string. At other positions, `^` and `$` have no special meaning and represent themselves.\n\nA pattern may contain sub-patterns enclosed in parentheses; they describe captures. When a match succeeds, the substrings of the subject string that match captures are stored (captured) for future use. Captures are numbered according to their left parentheses. For instance, in the pattern `(a*(.)%w(%s*))`, the part of the string matching `a*(.)%w(%s*)` is stored as the first capture (and therefore has number 1); the character matching `.` is captured with number 2, and the part matching `%s*` has number 3.\n\nAs a special case, the empty capture () captures the current string position (a number). For instance, if we apply the pattern `()aa()` on the string \"flaaap\", there will be two captures: 3 and 5.\n\nA pattern cannot contain embedded zeros. Use `%z` instead.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to modify\n* `pat$` â€” pattern according to which the string should be modified\n* `repl` â€” replacement string or callback function to handle replacements (see above)\n* `n` â€” optional: maximum number of substitutions to make (defaults to the length of s$ plus 1)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `r$` â€” resulting string\n* `n` â€” number of substitutions made",
    "example": "```\ns$ = PatternReplaceStr(\"Hello World\", \"(%w+)\", \"%1 %1\")\n```\n\nThe code above returns \"Hello Hello World World\"\n\n---\n\n```\ns$ = PatternReplaceStr(\"Hello World from Hollywood\", \"(%w+)%s*(%w+)\",\n     \"%2 %1\")\n```\n\nThe code above returns \"World Hello Hollywood from\"\n\n---\n\n```\ns$ = PatternReplaceStr(\"home = $HOME, user = $USER\", \"%$(%w+)\", GetEnv)\n```\n\nThe code above returns \"home = /home/andreas, user = andreas\" (on Linux).\n\n---\n\n```\nLocal t = {name = \"Hollywood\", version=\"5.0\"}\ns$ = PatternReplaceStr(\"$name_$version.jpg\", \"%$(%w+)\", Function(v)\n     Return(t[v]) EndFunction)\n```\n\nThe code above returns \"Hollywood_5.0.jpg\"",
    "platforms": ["All"],
    "insertText": "PatternReplaceStr(${1:s$}, ${2:pat$}, ${3:repl})"
  },
  {
    "name": "RepeatStr",
    "helpId": "RepeatStr",
    "shortDescription": "repeat string multiple times",
    "version": "5.0",
    "synopsis": "var$ = RepeatStr(s$, n)",
    "functionDocs": "This function takes `s$`, repeats it `n` times, and returns the resulting string.",
    "inputsDocs": "* `s$` â€” the string to repeat\n* `n` â€” number of times to repeat string; must be > 0",
    "resultsDocs": "* `var$` â€” the resulting string",
    "example": "```\nPrint(RepeatStr(\"Hollywood!\", 5))\n```\n\nThe above code prints \"Hollywood!Hollywood!Hollywood!Hollywood!Hollywood!\"",
    "platforms": ["All"],
    "insertText": "RepeatStr(${1:s$}, ${2:n})"
  },
  {
    "name": "ReplaceStr",
    "helpId": "ReplaceStr",
    "shortDescription": "replaces a substring with another string",
    "version": "1.0",
    "synopsis": "var$ = ReplaceStr(s$, search$, replace$[, cs, startpos, encoding])",
    "functionDocs": "Searches for `search$` in `s$` and replaces all occurrences of `search$` with `replace$`. The optional argument `cs` turns case sensitivity on (`True`) or off (`False`). This defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nStarting with Hollywood 4.5, you can also specify a starting position for the search in the optional argument `startpos`. This position needs to be specified in characters, not in bytes. Specifying 0 as the starting position means search and replace from the beginning of the string. This is also the default.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to search for `search$`\n* `search$` â€” string to search for\n* `replace$` â€” string replacement for `search$`\n* `cs` â€” `True` for case sensitivity, `False` for no case sensitivity; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `startpos` â€” optional: starting position of the search and replace operation in characters (defaults to 0) (V4.5)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = \"Hello World!\"\ntest$ = ReplaceStr(test$, \"World\", \"People\")\nPrint(test$)\n```\n\nThis will print \"Hello People!\" to the screen.",
    "platforms": ["All"],
    "insertText": "ReplaceStr(${1:s$}, ${2:search$}, ${3:replace$})"
  },
  {
    "name": "ReverseFindStr",
    "helpId": "ReverseFindStr",
    "shortDescription": "find a substring in a string in reverse",
    "version": "9.0",
    "synopsis": "pos = ReverseFindStr(string$, substring$[, casesen, startpos, encoding])",
    "functionDocs": "Searches for `substring$` in `string$` and returns the position of the substring. In contrast to [FindStr()](https://www.hollywood-mal.com/docs/html/hollywood/FindStr_.html), searching is done in reverse, i.e. from the string's end to its start.\n\nThe position is returned in characters, not in bytes, starting at position 0 for the first character. If `substring$` cannot be found, -1 is returned. The optional argument `casesen` allows you to specify if the search should be case sensitive. This defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nYou can also specify a starting position for the search in the optional argument `startpos`. This position needs to be specified in characters, not in bytes. By default, `startpos` is set to the length of `string$` in characters minus 1.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to search in\n* `substring$` â€” string to find in `string$`\n* `casesen` â€” `True` for a case sensitive search or `False` for a case insensitive search; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `startpos` â€” optional: starting position of the search operation in characters (defaults to the length of `string$` minus 1)\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `pos` â€” position of `substring$` in `string$` in characters or -1 if not found",
    "example": "```\nresult = ReverseFindStr(\"Hello, Hello!\", \"Hello\")\nPrint(result)\n```\n\nThis will print \"7\" because searching is done in reverse, which is why the position of the second \"Hello\" is returned.",
    "platforms": ["All"],
    "insertText": "ReverseFindStr(${1:string$}, ${2:substring$})"
  },
  {
    "name": "ReverseStr",
    "helpId": "ReverseStr",
    "shortDescription": "reverse order of characters in string",
    "version": "7.0",
    "synopsis": "r$ = ReverseStr(s$[, encoding])",
    "functionDocs": "Reverses the order of characters in string `s$` and returns the new string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `r$` â€” reversed string",
    "example": "```\nr$ = ReverseStr(\"Hello\")\nPrint(r$)\n```\n\nThis prints \"olleH\".",
    "platforms": ["All"],
    "insertText": "ReverseStr(${1:s$})"
  },
  {
    "name": "RightStr",
    "helpId": "RightStr",
    "shortDescription": "return rightmost characters of a string",
    "version": "1.0",
    "synopsis": "var$ = RightStr(string$, len[, encoding])",
    "functionDocs": "Returns the rightmost `len` characters from `string$`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” source string\n* `len` â€” number of characters to return\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = RightStr(\"Hello World!\", 6)\nPrint(test$)\n```\n\nPrints \"World!\" to the screen.",
    "platforms": ["All"],
    "insertText": "RightStr(${1:string$}, ${2:len})"
  },
  {
    "name": "SplitStr",
    "helpId": "SplitStr",
    "shortDescription": "split a string in several pieces",
    "version": "2.0",
    "synopsis": "table, count = SplitStr(src$, token$[, multiple])",
    "functionDocs": "This function splits the string specified in `src$` into several pieces by looking for the separator `token$` in `src$`. `token$` must be a string containing at least one character that shall act as a separator in `src$`. `SplitStr()` will return a table containing all the pieces and the number of pieces in the string as the second return value.\n\nIf the specified token does not appear in the source string, `src$` is returned.\n\nStarting with Hollywood 7.1 there is a new optional argument named `multiple`. If this is set to `True`, multiple occurrences of `token$` next to each other will be considered a single occurrence. This can be useful when using the space character as `token$` and you want this function to work with an arbitrary number of spaces between the different parts.\n\nNote that before Hollywood 8.0, `token$` was limited to a string using only one character. This limit has been lifted for Hollywood 8.0 and the string can now be of arbitrary length.",
    "inputsDocs": "* `src$` â€” string to split\n* `token$` â€” one character string containing a separator token\n* `multiple` â€” optional: whether or not to treat multiple occurrences of `token$` next to each other as a single token (defaults to `False`) (V7.1)",
    "resultsDocs": "* `table` â€” table where the new substrings are stored\n* `count` â€” how many substrings this function created",
    "example": "```\narray, c = SplitStr(\"AmigaOS3|MorphOS|AmigaOS4|WarpOS|AROS\", \"|\")\nFor k = 1 To c Do NPrint(array[k - 1])\n```\n\nThe above code will print\n\n```\nAmigaOS3\nMorphOS\nAmigaOS4\nWarpOS\nAROS\n```\n\nThe variable `c` will be set to 5 because `SplitStr()` finds five substrings and places them in the table specified.",
    "platforms": ["All"],
    "insertText": "SplitStr(${1:src$}, ${2:token$})"
  },
  {
    "name": "StartsWith",
    "helpId": "StartsWith",
    "shortDescription": "check if string starts with substring",
    "version": "7.1",
    "synopsis": "bool = StartsWith(s$, substr$[, casesen, encoding])",
    "functionDocs": "This function can be used to check if `s$` starts with the substring specified by `substr$`. If it does, `True` is returned, `False` otherwise. If the optional argument `casesen` is set to `False`, the strings do not have to match in case. `casesen` defaults to the global case sensitive default mode set using [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html). See [IgnoreCase](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” input string\n* `substr$` â€” string to compare against `s$`\n* `casesen` â€” optional: whether or not a case sensitive comparison should be activated; the default is `True` or whatever default has been set using the [IgnoreCase()](https://www.hollywood-mal.com/docs/html/hollywood/IgnoreCase_.html) command\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `bool` â€” boolean value indicating success or failure",
    "platforms": ["All"],
    "insertText": "StartsWith(${1:s$}, ${2:substr$})"
  },
  {
    "name": "StripStr",
    "helpId": "StripStr",
    "shortDescription": "strip whitespace from string",
    "version": "7.1",
    "synopsis": "r$ = StripStr(s$)",
    "functionDocs": "This function strips all whitespace characters from both ends of a string and returns the stripped string. The following characters are whitespace characters: space, form-feed (\"\\f\"), newline (\"\\n\"), carriage return (\"\\r\"), horizontal tab (\"\\t\"), and vertical tab (\"\\v\").",
    "inputsDocs": "* `s$` â€” input string",
    "resultsDocs": "* `r$` â€” stripped string",
    "example": "```\ns$ = StripStr(\"    Hello World    \")\n```\n\nThis will return \"Hello World\".",
    "platforms": ["All"],
    "insertText": "StripStr(${1:s$})"
  },
  {
    "name": "StrLen",
    "helpId": "StrLen",
    "shortDescription": "return character length of a string",
    "version": "1.0",
    "synopsis": "len = StrLen(str$[, encoding])",
    "functionDocs": "This function returns the character length of `str$`. Note that for Unicode strings this isn't necessarily the same as the byte length of `str$`. To find out the byte length of a string, use the [ByteLen()](https://www.hollywood-mal.com/docs/html/hollywood/ByteLen_.html) function or pass a non-Unicode encoding in `encoding`.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `str$` â€” input string\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `len` â€” character length of string",
    "example": "```\nlen = StrLen(\"Hello\")\n```\n\nThis will return 5.",
    "platforms": ["All"],
    "insertText": "StrLen(${1:str$})"
  },
  {
    "name": "StrStr",
    "helpId": "StrStr",
    "shortDescription": "convert a number to a string",
    "version": "1.0",
    "synopsis": "var$ = StrStr(value[, digits])",
    "functionDocs": "Converts the numerical value `value` to a string and returns it. The optional argument `digits` allows you to define how many decimal places shall be used if value is a real number. It defaults to 2.",
    "inputsDocs": "* `value` â€” number to convert to string\n* `digits` â€” optional: how many decimal places to use if a float value is specified (defaults to 2)",
    "resultsDocs": "* `var$` â€” string representing the numeric value",
    "example": "```\ntest$ = StrStr(256)\nPrint(test$)\n```\n\nPrints \"256\" to the screen.",
    "platforms": ["All"],
    "insertText": "StrStr(${1:value})"
  },
  {
    "name": "StrToArray",
    "helpId": "StrToArray",
    "shortDescription": "convert a string to an array of code points",
    "version": "2.0",
    "synopsis": "t = StrToArray(s$[, encoding])",
    "functionDocs": "This function extracts the code point values from `s$` and returns them in a table. The table will have as many elements as the string has characters plus a terminating zero.\n\nTo convert the array back to a string, you can use the function [ArrayToStr()](https://www.hollywood-mal.com/docs/html/hollywood/ArrayToStr_.html). See [ArrayToStr](https://www.hollywood-mal.com/docs/html/hollywood/ArrayToStr_.html).\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to convert\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `t` â€” a table containing the code point values of the string's characters",
    "example": "```\nt = StrToArray(\"Hello World\")\nDebugPrint(Chr(t[6]))\n```\n\nPrints \"W\".",
    "platforms": ["All"],
    "insertText": "StrToArray(${1:s$})"
  },
  {
    "name": "ToNumber",
    "helpId": "ToNumber",
    "shortDescription": "convert a string to a number",
    "version": "2.0",
    "synopsis": "n = ToNumber(s$[, base])",
    "functionDocs": "This function tries to convert the string specified in `s$` to a number. The optional argument `base` can be used to convert binary, octal, and hexadecimal numbers or any other bases ranging from 2 to 36. It defaults to 10 (decimal). In bases from 11 to 36 the letters of the English alphabet are used as the additional digits (10=A, 35=Z). Case sensitivity is not required.\n\nStarting with Hollywood 6.0 this function can also convert a variable of type `#LIGHTUSERDATA` to a number. Since this variable type is meant to store pointers, it is only interesting for expert users or debugging purposes.",
    "inputsDocs": "* `s$` â€” string to convert\n* `base` â€” optional: base of the conversion (defaults to 10)",
    "resultsDocs": "* `number` â€” converted number",
    "example": "```\nr = ToNumber(\"10000\")         ; returns 10000\nr = ToNumber(\"10110111\", 2)   ; returns 183\nr = ToNumber(\"523\", 8)        ; returns 339\nr = ToNumber(\"FFFF\", 16)      ; returns 65535\n```",
    "platforms": ["All"],
    "insertText": "ToNumber(${1:s$})"
  },
  {
    "name": "ToString",
    "helpId": "ToString",
    "shortDescription": "convert any data type to a string",
    "version": "2.0",
    "synopsis": "s$ = ToString(data)",
    "functionDocs": "This function can convert any type to a string. You can pass in tables, functions, strings, numbers and `Nil`. `ToString()` is also used by the [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) and [DebugPrint()](https://www.hollywood-mal.com/docs/html/hollywood/DebugPrint_.html) commands so they can print any types, too.\n\nAdditionally, if you pass in a table which metatable has a `__tostring` field, this metamethod is called.",
    "inputsDocs": "* `data` â€” value to convert to string",
    "resultsDocs": "* `s$` â€” a string",
    "example": "```\ns$ = ToString(DisplayBrush)   ; returns \"Function: 74cd2456\"\ns$ = ToString({1,2,3,4,5})    ; returns \"Table: 74ab1344\"\ns$ = ToString(Nil)            ; returns \"Nil\"\ns$ = ToString(5)              ; returns \"5\"\ns$ = ToString(\"Hello\")        ; returns \"Hello\"\n```",
    "platforms": ["All"],
    "insertText": "ToString(${1:data})"
  },
  {
    "name": "ToUserData",
    "helpId": "ToUserData",
    "shortDescription": "convert number to a userdata pointer",
    "version": "6.0",
    "synopsis": "ptr = ToUserData(val)",
    "functionDocs": "This function can be used to turn an arbitrary number into a variable of type `#LIGHTUSERDATA` which is used to store memory pointers. You could then pass this variable to a function which expects a `#LIGHTUSERDATA` parameter.\n\nNote that this function is dangerous and should only be used by people who know what they are doing. Using pointers that point to unallocated address space can easily crash your script.\n\nTo convert a pointer of type `#LIGHTUSERDATA` back into a number, use the [ToNumber()](https://www.hollywood-mal.com/docs/html/hollywood/ToNumber_.html) function. See [ToNumber](https://www.hollywood-mal.com/docs/html/hollywood/ToNumber_.html).",
    "inputsDocs": "* `val` â€” numeric value to be converted into a `#LIGHTUSERDATA` pointer",
    "resultsDocs": "* `ptr` â€” pointer of type `#LIGHTUSERDATA`",
    "platforms": ["All"],
    "insertText": "ToUserData(${1:val})"
  },
  {
    "name": "TrimStr",
    "helpId": "TrimStr",
    "shortDescription": "strip leading or tailing characters",
    "version": "2.0",
    "synopsis": "s$ = TrimStr(src$, chr$, tail[, encoding])",
    "functionDocs": "This function can be used to strip all characters that match `chr$` from the head or the tail of `src$`. The string `chr$` must only contain one character. `tail` must be `True` to start stripping from the right or `False` to start from the left side. The stripped string will be returned.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `src$` â€” string to strip\n* `chr$` â€” a single character string\n* `tail` â€” `True` or `False` indicating where to begin\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `s$` â€” a stripped string",
    "example": "```\na$ = TrimStr(\"aaaaHello World\", \"a\", False)\nDebugPrint(a$)\n```\n\nPrints \"Hello World\".\n\n---\n\n```\na$ = TrimStr(\"aaaaHello Worldaaaa\", \"a\", True)\nDebugPrint(a$)\n```\n\nPrints \"aaaaHello World\".",
    "platforms": ["All"],
    "insertText": "TrimStr(${1:src$}, ${2:chr$}, ${3:tail})"
  },
  {
    "name": "UnleftStr",
    "helpId": "UnleftStr",
    "shortDescription": "remove rightmost characters from a string",
    "version": "1.0",
    "synopsis": "var$ = UnleftStr(string$, len[, encoding])",
    "functionDocs": "Removes `len` rightmost characters from `string$` and returns the new string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to remove characters from\n* `len` â€” number of characters to remove\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = UnleftStr(\"Hello World!\", 7)\nPrint(test$)\n```\n\nThis will print \"Hello\".",
    "platforms": ["All"],
    "insertText": "UnleftStr(${1:string$}, ${2:len})"
  },
  {
    "name": "UnmidStr",
    "helpId": "UnmidStr",
    "shortDescription": "remove characters from the middle of a string",
    "version": "4.5",
    "synopsis": "var$ = UnmidStr(s$, pos, len[, encoding])",
    "functionDocs": "This function removes `len` characters from `s$` starting at position `pos` in the string. The position needs to be specified in characters, not in bytes. Position 0 indicates the start of the string. The truncated string is returned.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `s$` â€” string to truncate\n* `pos` â€” position (in characters) at which to start removing characters\n* `len` â€” number of characters to remove\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” truncated string",
    "example": "```\nPrint(UnmidStr(\"This is definitely not a funny example\", 19, 4))\n```\n\nThe task of figuring out what the mysterious call above might do is left to the reader.",
    "platforms": ["All"],
    "insertText": "UnmidStr(${1:s$}, ${2:pos}, ${3:len})"
  },
  {
    "name": "UnrightStr",
    "helpId": "UnrightStr",
    "shortDescription": "remove leftmost characters from a string",
    "version": "1.0",
    "synopsis": "var$ = UnrightStr(string$, len[, encoding])",
    "functionDocs": "Removes the `len` leftmost characters from `string$` and returns the new string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to remove characters from\n* `len` â€” number of characters to remove\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\ntest$ = UnrightStr(\"Hello World!\", 6)\nPrint(test$)\n```\n\nThis will print \"World!\".",
    "platforms": ["All"],
    "insertText": "UnrightStr(${1:string$}, ${2:len})"
  },
  {
    "name": "UpperStr",
    "helpId": "UpperStr",
    "shortDescription": "convert string to upper case",
    "version": "1.0",
    "synopsis": "var$ = UpperStr(string$[, encoding])",
    "functionDocs": "Converts all characters in `string$` to upper case.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).",
    "inputsDocs": "* `string$` â€” string to convert to upper case\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding) (V7.0)",
    "resultsDocs": "* `var$` â€” resulting string",
    "example": "```\nPrint(UpperStr(\"Hello World!\"))\n```\n\nPrints \"HELLO WORLD!\" to the screen.",
    "platforms": ["All"],
    "insertText": "UpperStr(${1:string$})"
  },
  {
    "name": "Val",
    "helpId": "Val",
    "shortDescription": "convert a string to a number",
    "version": "1.0",
    "synopsis": "var, chrs = Val(string$)",
    "functionDocs": "Converts the specified string into a number. If the string does not start with a number, 0 will be returned. The string can also contain hexadecimal numbers starting with a \"$\".\n\nStarting with Hollywood 2.0 you can also pass a string which contains a binary number to this function now. Simply prefix it with a '%' character. Additionally, a second value is returned now which specifies how many characters `Val()` has read from the string. This allows you to determine the length of the number.",
    "inputsDocs": "* `string$` â€” string to convert to number",
    "resultsDocs": "* `var` â€” variable that receives the converted number\n* `chrs` â€” number of characters converted",
    "example": "```\nresult, chrs = Val(\"500 people were on the train.\")\nPrint(result, \"-\", chrs)\n```\n\nThis will print \"500-3\" to the screen.",
    "platforms": ["All"],
    "insertText": "Val(${1:string$})"
  },
  {
    "name": "ValidateStr",
    "helpId": "ValidateStr",
    "shortDescription": "validate string",
    "version": "7.0",
    "synopsis": "ok, n = ValidateStr(s$[, encoding])",
    "functionDocs": "Validates the string specified by `s$` and returns `True` if the string contains only valid characters, `False` otherwise. The second return value contains the number of valid characters in the string. If validation succeeds, this will be the same as the result of [StrLen()](https://www.hollywood-mal.com/docs/html/hollywood/StrLen_.html). Otherwise this will tell you the offset of the first invalid character in the string.\n\nThe optional `encoding` parameter can be used to set the character encoding to use. This defaults to the default string encoding set using [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [Character encodings](https://www.hollywood-mal.com/docs/html/hollywood/CharacterEncoding_.html).\n\nThis function is only useful in case `#ENCODING_UTF8` is used. If the encoding is set to `#ENCODING_ISO8859_1`, this function will always return `True`.",
    "inputsDocs": "* `s$` â€” input string\n* `encoding` â€” optional: character encoding to use (defaults to default string encoding)",
    "resultsDocs": "* `ok` â€” boolean value indicating success or failure\n* `n` â€” number of valid characters in the string (V7.1)",
    "platforms": ["All"],
    "insertText": "ValidateStr(${1:s$})"
  }
]
