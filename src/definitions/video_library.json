[
  {
    "name": "CloseVideo",
    "helpId": "CloseVideo",
    "shortDescription": "close a video",
    "version": "5.0",
    "synopsis": "CloseVideo(id)",
    "functionDocs": "This function frees any memory occupied by the video specified by `id` and closes the video. If the video is still playing, it will be stopped first. Although Hollywood will automatically free all resources when it exits, you should still call `CloseVideo()` when you are done with a video file because it reduces memory consumption.",
    "inputsDocs": "* `id` — identifier of the video to close",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseVideo(${1:id})"
  },
  {
    "name": "DisplayVideoFrame",
    "helpId": "DisplayVideoFrame",
    "shortDescription": "display a single frame of a video",
    "version": "6.0",
    "synopsis": "DisplayVideoFrame(id, x, y, pos[, table])",
    "functionDocs": "This function displays a single frame of a video at the specified coordinates and adds a new layer of type `#VIDEO` to the layer stack. The frame is specified not as an absolute index position but as a timestamp in milliseconds. Thus, to display the very first frame you would have to pass 0 in the `pos` argument.\n\nPlease note that this function currently does not work with layers disabled. Layers need to be enabled for this function to work.\n\n`DisplayVideoFrame()` also recognizes an optional table argument which allows you to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all drawing commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the video to use\n* `x` — destination x coordinate\n* `y` — destination y coordinate\n* `pos` — timestamp of the frame to display in milliseconds\n* `table` — optional: table specifying further options",
    "example": "```\nDisplayVideoFrame(1, #CENTER, #CENTER, 0)\n```\n\nThe code above displays the first frame of video 1 in the center of the screen.",
    "platforms": ["All"],
    "insertText": "DisplayVideoFrame(${1:id}, ${2:x}, ${3:y}, ${4:pos})"
  },
  {
    "name": "ForceVideoDriver",
    "helpId": "ForceVideoDriver",
    "shortDescription": "enforce use of specified video driver",
    "version": "5.1",
    "synopsis": "ForceVideoDriver(driver)",
    "functionDocs": "This function can be used to specify the video driver all subsequent calls to [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) should use. Hollywood currently supports the following two video drivers:\n\n- `#VIDDRV_HOLLYWOOD`: Hollywood's platform independent video renderer. This is the default driver. It supports playback of the CDXL format plus all formats you have a plugin for.\n\n- `#VIDDRV_OS`: This driver uses the native video system of the OS. This is currently only supported on Windows, macOS, and iOS. On Windows this driver uses the Media Foundation or DirectShow technology while on macOS and iOS it uses AV Foundation or QuickTime (on older systems).\n\nBy default, `#VIDDRV_HOLLYWOOD` is given priority over `#VIDDRV_OS` which means that Hollywood will first try to play the video using its inbuilt video renderer. Only if that does not work, will Hollywood switch to the OS native renderer. If you want to change this behaviour, use this function.\n\nNote that this function is obsolete since Hollywood 6.0 because you can now simply use the new `Loader` tag with [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) and [@VIDEO](https://www.hollywood-mal.com/docs/html/hollywood/atVIDEO_.html). The `Loader` equivalent for `#VIDDRV_OS` is `native` and the `Loader` equivalent for `#VIDDRV_HOLLYWOOD` is `inbuilt|plugin`.",
    "inputsDocs": "* `driver` — desired video driver to use",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ForceVideoDriver(${1:driver})"
  },
  {
    "name": "GetVideoFrame",
    "helpId": "GetVideoFrame",
    "shortDescription": "convert video frame to a brush",
    "version": "5.0",
    "synopsis": "[id] = GetVideoFrame(brushid, frame, videoid[, unit])",
    "functionDocs": "This function can be used to convert a single frame of a video to a brush. The video must have been opened using [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) or the [@VIDEO](https://www.hollywood-mal.com/docs/html/hollywood/atVIDEO_.html) preprocessor command. In the first argument, you have to pass an id for the brush you want this function to create (alternatively, you can pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [automatic id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)). In the second argument you have to specify which frame of the video should be grabbed, and the third argument specifies the identifier of the video to use as the source.\n\nThe optional argument `unit` is used to specify how the value passed in `frame` should be interpreted. If `unit` is set to 0, then the value passed in `frame` is interpreted as an absolute frame index. This is also the default setting. If `unit` is set to 1, then the value passed in `frame` is interpreted as a time stamp in milliseconds and `GetVideoFrame()` will grab the frame at this very timestamp. It is recommended to use unit 1 access to single frames because this is usually much faster. If you really need to access single frames by their absolute index, please read the word of warning below.\n\nPlease note that frame access by absolute index is usually a very expensive operation because, for most video formats, Hollywood needs to traverse all the way through the stream until it reaches the requested frame. Such a traversal requires a lot of time and is thus of limited practical use. However, there is one special case where `GetVideoFrame()` can be used very efficiently and that is the sequential grabbing of frames from a video stream. \"Sequential grabbing\" means that you read one frame after the other from the video stream, i.e. first frame 1, then frame 2, then frame 3, etc. This can be done very quickly. The only thing that will take lots of time is reading frames in backward direction (i.e. frame 10, frame 9, frame 8, etc.), or making huge leaps between frame reads (i.e. frame 1, then frame 1000, then frame 5000, etc.). This will take a lot of time. Sequential reading will be efficient, however.\n\nTo find out the exact number of frames inside a video stream, you can use the [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html) command and query the `#ATTRNUMFRAMES` attribute using the `#VIDEO` object type.",
    "inputsDocs": "* `id` — identifier for the brush to create or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `frame` — frame to load; format of this argument depends on the value passed to the unit argument below\n* `videoid` — identifier of the video to use as source\n* `unit` — optional: base to use for the frame argument; this can be either 0 which means that the frame argument specifies an absolute frame index or 1 which means that the frame argument specifies a timestamp in milliseconds (defaults to 0)",
    "resultsDocs": "* `id` — optional: identifier of the brush; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nmy_frame = GetVideoFrame(Nil, 1, 2)\nDisplayBrush(my_frame, #CENTER, #CENTER)\n```\n\nThe code above extracts frame 1 from video stream 2 and stores it in a new brush. The brush is then displayed at the center of the display.",
    "platforms": ["All"],
    "insertText": "GetVideoFrame(${1:brushid}, ${2:frame}, ${3:videoid})"
  },
  {
    "name": "IsVideo",
    "helpId": "IsVideo",
    "shortDescription": "determine if a file is in a supported video format",
    "version": "5.0",
    "synopsis": "ret = IsVideo(file$[, table])",
    "functionDocs": "This function will check if the file specified in `file$` is in a supported video format. If it is, this function will return `True`, otherwise `False`. If this function returns `True`, you can open the video using [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html).\n\nStarting with Hollywood 6.0 this function accepts an optional table argument which allows you to configure further options:\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this video. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nSee [OpenVideo](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html).",
    "inputsDocs": "* `file$` — file to examine\n* `table` — optional: table configuring further options (V6.0)",
    "resultsDocs": "* `ret` — `True` if the video is in a supported format, `False` otherwise",
    "platforms": ["All"],
    "insertText": "IsVideo(${1:file$})"
  },
  {
    "name": "IsVideoPlaying",
    "helpId": "IsVideoPlaying",
    "shortDescription": "check if video is currently playing",
    "version": "5.0",
    "synopsis": "playing = IsVideoPlaying(id)",
    "functionDocs": "This function checks if the video specified by `id` is currently playing. If it is, `True` is returned, `False` otherwise.",
    "inputsDocs": "* `id` — identifier of video to check",
    "resultsDocs": "* `playing` — `True` if video is currently playing; `False` otherwise",
    "platforms": ["All"],
    "insertText": "IsVideoPlaying(${1:id})"
  },
  {
    "name": "OpenVideo",
    "helpId": "OpenVideo",
    "shortDescription": "open a video file",
    "version": "5.0",
    "synopsis": "[id] = OpenVideo(id, filename$[, table])",
    "functionDocs": "This function opens the video file specified by `filename$` and assigns the specified `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `OpenVideo()` will automatically choose an identifier and return it. The video file specified in `filename$` will be opened and prepared for playback. Video playback is always done directly from disk which means that `OpenVideo()` will not prebuffer any data at all. It will just initialize all parameters necessary for video playback.\n\nVideo formats that are supported on all platforms are CDXL and formats you have a plugin for. Depending on the platform Hollywood is running on, more video formats might be supported. On Windows Hollywood is able to open all video formats for which you have a Media Foundation or DirectShow codec installed. On macOS Hollywood can open all video formats that are supported by AV Foundation (or QuickTime on older Macs).\n\nStarting with Hollywood 6.0 this command accepts an optional table argument which recognizes the following options:\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this video. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). The default loader lets Hollywood first ask all plugins whether they would like to handle the video file, then it will check its inbuilt loaders (currently only CDXL), and finally it will ask the video interface of the host OS to play this video. If you want to customize this order, use this tag. See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nThis command is also available from the preprocessor: Use [@VIDEO](https://www.hollywood-mal.com/docs/html/hollywood/atVIDEO_.html) to preload video files!",
    "inputsDocs": "* `id` — identifier for the video or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: table that contains further parameters (V6.0)",
    "resultsDocs": "* `id` — optional: identifier of the video; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nOpenVideo(1, \"intro.avi\")\nPlayVideo(1)\n```\n\nThe code above loads & plays \"intro.avi\".",
    "platforms": ["All"],
    "insertText": "OpenVideo(${1:id}, ${2:filename$})"
  },
  {
    "name": "PauseVideo",
    "helpId": "PauseVideo",
    "shortDescription": "pause a playing video",
    "version": "5.0",
    "synopsis": "PauseVideo(id)",
    "functionDocs": "This function pauses the video associated with the identifier `id`. This video must be playing when you call this command. You can resume playback later by using the [ResumeVideo()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeVideo_.html) command.\n\nPlease note that pausing a video will not remove the video from the display. Instead, the currently displayed frame will be frozen until you call [ResumeVideo()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeVideo_.html). If you want to remove a video completely from the display, you will always have to call [StopVideo()](https://www.hollywood-mal.com/docs/html/hollywood/StopVideo_.html).",
    "inputsDocs": "* `id` — identifier of the video to pause",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "PauseVideo(${1:id})"
  },
  {
    "name": "PlayVideo",
    "helpId": "PlayVideo",
    "shortDescription": "start playback of a video",
    "version": "5.0",
    "synopsis": "PlayVideo(id[, x, y, table])",
    "functionDocs": "This command starts the playback of the video specified by `id`. This video must have been opened using either the [@VIDEO](https://www.hollywood-mal.com/docs/html/hollywood/atVIDEO_.html) preprocessor command or the [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) command. The optional arguments `x` and `y` can be used to specify where on the display the video should appear. If you do not specify these arguments, `PlayVideo()` will use the coordinates specified in the latest call to [SetVideoPosition()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoPosition_.html). If you did not call [SetVideoPosition()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoPosition_.html) on this video at all, the position will default to 0/0 which is the upper left corner of the display.\n\n`PlayVideo()` works in an asynchronous manner. It will return immediately once it has started video playback. After you have started a video, you can control playback by calling functions like [StopVideo()](https://www.hollywood-mal.com/docs/html/hollywood/StopVideo_.html) or [StopLayer()](https://www.hollywood-mal.com/docs/html/hollywood/StopLayer_.html) depending on whether you use normal or layered playback mode.\n\nHollywood supports two different video playback modes: Normal playback and layered playback. Normal playback is the fastest and most optimized mode as it can utilize hardware acceleration by using video overlays for example. The disadvantage of normal mode is that it has some restrictions (see below for more information). Layered playback mode, on the other hand, is very flexible as your video will be rendered into a Hollywood layer and so you can use all layer functionality on your video object, e.g. you can rotate it, apply transparency and transition effects or special image filters. The disadvantage of layered mode is that it is quite slow because it cannot use hardware acceleration so you will need lots of raw CPU horsepower to get decent framerates here. For most cases, normal playback mode should be sufficient. Layered playback mode is only necessary if you need to do advanced things during video playback.\n\nIt is important to note that `PlayVideo()` will always use normal playback mode by default, even if layers are enabled for the current BGPic. To make `PlayVideo()` use layered mode, you will have to request this explicitly by setting the `UseLayer` tag in the optional table argument to `True`.\n\nNormal playback mode comes with the restriction that videos will always appear above everything else. This means that it is impossible for you to draw on top of a video. Instead, all graphics commands will always draw beneath the video area. Even sprites will never appear above the video graphics. Also, the video will stay visible until you call [StopVideo()](https://www.hollywood-mal.com/docs/html/hollywood/StopVideo_.html). Pausing a video will not remove that video from the display. Instead, the currently displayed frame will be frozen until you call [ResumeVideo()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeVideo_.html). If you want to remove a video completely from the display, you will always have to call [StopVideo()](https://www.hollywood-mal.com/docs/html/hollywood/StopVideo_.html). If you would like to move a video or change its size during normal playback mode, you need to use the commands [SetVideoPosition()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoPosition_.html) and [SetVideoSize()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoSize_.html) for this task.\n\nIn layered playback mode you can use all the functions from Hollywood's layers library to control video playback, i.e. you can change the video's size and orientation using [ScaleLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleLayer_.html) and [RotateLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RotateLayer_.html) or redefine the z-order by using [SetLayerZPos()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerZPos_.html). You can also show and hide videos using [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html) and [HideLayer()](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html) or apply transparency or filters to them using [SetLayerTransparency()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerTransparency_.html) and [SetLayerFilter()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerFilter_.html). All functions of Hollywood's layers library can be used with video layers. To stop or pause a video layer, use the [StopLayer()](https://www.hollywood-mal.com/docs/html/hollywood/StopLayer_.html) and [PauseLayer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseLayer_.html) functions respectively. To seek to a new position inside the video, use [SeekLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SeekLayer_.html). To change the audio volume of a video layer use [SetLayerVolume()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerVolume_.html).\n\nPlease note that layered playback is only possible if the video has been opened using Hollywood's inbuilt or plugin-based video handler. Layered playback is not supported when using the video renderer provided by the host OS. You can change the video driver by using the `Loader` tag in [OpenVideo()](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html) or [@VIDEO](https://www.hollywood-mal.com/docs/html/hollywood/atVIDEO_.html).\n\nThere are no limits as to how many videos can be played concurrently. Hardware acceleration, however, can often be only used when just a single video is played at a time. When multiple videos are playing at the same time, Hollywood often has to switch back to software rendering, which is slower. Please also note that video playback generally requires a strong CPU. 68k processors are much too slow for this task (except on WinUAE).\n\nNote that when switching BGPics using [DisplayBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBGPic_.html), Hollywood will automatically stop all videos playing in normal mode. Videos playing in layered mode, however, will continue playing even if the BGPic has been changed. Thus, you need to explicitly stop video layers by calling [StopLayer()](https://www.hollywood-mal.com/docs/html/hollywood/StopLayer_.html) before switching BGPics if you want them to stop on this occasion.\n\nStarting with Hollywood 6.0, `PlayVideo()` accepts an optional table argument which can be used to configure the following options:\n\n- `UseLayer`: If you set this tag to `True`, `PlayVideo()` will use layered playback mode. You need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this tag. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html). If layered playback mode is used, this command will add a new layer of the type `#VIDEO` to the layer stack. See above for more information on the difference between normal and layered playback mode. Defaults to `False`. (V6.0)\n\n- `Channel`: Channel to use for playback of this video's audio stream. By default, `PlayVideo()` will automatically choose a vacant channel and will fail if there is no vacant channel. To override this behaviour, you can use this field. When specified, it will always enforce audio playback on the very channel specified here. If the channel is already playing, it will be stopped first. (V6.1)\n\nIf layered playback mode is used you can also specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all drawing commands in the optional table argument. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the video to play\n* `x` — optional: desired x position for the video (defaults to the position defined using [SetVideoPosition()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoPosition_.html) or 0)\n* `y` — optional: desired y position for the video (defaults to the position defined using [SetVideoPosition()](https://www.hollywood-mal.com/docs/html/hollywood/SetVideoPosition_.html) or 0)\n* `table` — optional: table configuring further options (V6.0)",
    "example": "See [OpenVideo](https://www.hollywood-mal.com/docs/html/hollywood/OpenVideo_.html)",
    "platforms": ["All"],
    "insertText": "PlayVideo(${1:id})"
  },
  {
    "name": "ResumeVideo",
    "helpId": "ResumeVideo",
    "shortDescription": "resume a paused video",
    "version": "5.0",
    "synopsis": "ResumeVideo(id)",
    "functionDocs": "This function resumes the playback of a paused video that is associated with the identifier `id`. You can pause the playback of a video using the [PauseVideo()](https://www.hollywood-mal.com/docs/html/hollywood/PauseVideo_.html) command.",
    "inputsDocs": "* `id` — identifier of the video to be resumed",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ResumeVideo(${1:id})"
  },
  {
    "name": "SeekVideo",
    "helpId": "SeekVideo",
    "shortDescription": "seek to a certain position in a video",
    "version": "5.0",
    "synopsis": "SeekVideo(id, pos)",
    "functionDocs": "You can use this function to seek to the specified position in the video specified by `id`. The video does not have to be playing. If the video is playing and you call `SeekVideo()`, it will immediately skip to the specified position. The position is specified in milliseconds. Thus, if you want to skip to the position 3:24, you would have to pass the value 204000 because 3 * 60 * 1000 + 24 * 1000 = 204000.\n\nPlease note that video seeking is a complex operation. There are video formats which do not have any position lookup tables so that Hollywood first has to approximate the seeking position and then do some fine- tuning and keyframe seeking so that the final position can always be a bit off from the position you specified in `SeekVideo()`. It can also happen that Hollywood will not seek directly to a keyframe so there might be artefacts from previous frames left on the screen.",
    "inputsDocs": "* `id` — identifier of the video to seek\n* `pos` — new position for the video (in milliseconds)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SeekVideo(${1:id}, ${2:pos})"
  },
  {
    "name": "SetVideoPosition",
    "helpId": "SetVideoPosition",
    "shortDescription": "change output position of a video",
    "version": "5.0",
    "synopsis": "SetVideoPosition(id, x, y)",
    "functionDocs": "This function can be used to change the position of a video. If the video is currently playing, it will be instantly moved to the new position. If it is not playing, the specified position will be memorized until you call [PlayVideo()](https://www.hollywood-mal.com/docs/html/hollywood/PlayVideo_.html) the next time.\n\nPlease note that this function must not be used for videos that are played back in layered mode. You can change the position of video layers using functions from layers library, e.g. [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html).",
    "inputsDocs": "* `id` — identifier of the video whose position you want to change\n* `x` — desired x position for the video\n* `y` — desired y position for the video",
    "example": "```\nSetVideoPosition(1, #RIGHT, #BOTTOM)\n```\n\nThe code above moves video to the bottom-right edge of the current display.",
    "platforms": ["All"],
    "insertText": "SetVideoPosition(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "SetVideoSize",
    "helpId": "SetVideoSize",
    "shortDescription": "change output size of a video",
    "version": "5.0",
    "synopsis": "SetVideoSize(id, width, height[, smooth])",
    "functionDocs": "This function can be used to change the dimensions of a video. If the video is currently playing, it will be instantly scaled to fit the new dimensions. If it is not playing, the specified dimensions will be memorized until you call [PlayVideo()](https://www.hollywood-mal.com/docs/html/hollywood/PlayVideo_.html) the next time.\n\nYou can pass the special constant `#KEEPASPRAT` as either `width` or `height`. Hollywood will then calculate the size automatically by taking the aspect- ratio of the video into account. Alternatively, `width` and `height` can also be a string containing a percent specification, e.g. \"50%\".\n\nStarting with Hollywood 5.1 you can pass the optional argument `smooth` which specifies whether or not anti-aliased interpolated scaling should be used. Please note that interpolated scaling is only available for videos played through Hollywood's platform independent video player without any hardware overlay.\n\nPlease note that this function must not be used for videos that are played back in layered mode. You can change the size of video layers using functions from layers library, e.g. [ScaleLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleLayer_.html).",
    "inputsDocs": "* `id` — identifier of the video whose size you want to change\n* `width` — desired new width for the video\n* `height` — desired new height for the video\n* `smooth` — optional: whether or not to use interpolated scaling; defaults to `False` (V5.1)",
    "example": "```\nSetVideoSize(1, 640, 480)\n```\n\nThe code above scales video 1 to a resolution of 640x480 pixels.\n\n---\n\n```\nSetVideoSize(2, \"50%\", \"50%\")\n```\n\nThe code above shrinks video number 2 to half its size.",
    "platforms": ["All"],
    "insertText": "SetVideoSize(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SetVideoVolume",
    "helpId": "SetVideoVolume",
    "shortDescription": "modify volume of a video",
    "version": "5.0",
    "synopsis": "SetVideoVolume(id, volume)",
    "functionDocs": "This function modifies the volume of the video specified by `id`. If the video is currently playing, the volume will be modified on-the-fly which can be used for sound fades etc. The `volume` argument can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — identifier of the video\n* `volume` — new volume for the video (range: 0=mute until 64=full volume or percent specification)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetVideoVolume(${1:id}, ${2:volume})"
  },
  {
    "name": "StopVideo",
    "helpId": "StopVideo",
    "shortDescription": "stop a currently playing video",
    "version": "5.0",
    "synopsis": "StopVideo(id)",
    "functionDocs": "This function stops the video specified by `id` and removes it from the display. The video must be either in playing or paused state.",
    "inputsDocs": "* `id` — identifier of the video to be stopped",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "StopVideo(${1:id})"
  }
]
