[
  {
    "name": "CloseAmigaGuide",
    "helpId": "CloseAmigaGuide",
    "shortDescription": "close current AmigaGuide window",
    "version": "6.1",
    "synopsis": "CloseAmigaGuide()",
    "functionDocs": "This function closes an AmigaGuide window that has been opened using [OpenAmigaGuide()](https://www.hollywood-mal.com/docs/html/hollywood/OpenAmigaGuide_.html). When Hollywood shuts down, this function is called automatically.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["AmigaOS"],
    "insertText": "CloseAmigaGuide()"
  },
  {
    "name": "CreateRexxPort",
    "helpId": "CreateRexxPort",
    "shortDescription": "create a Rexx port for your script",
    "version": "2.5",
    "synopsis": "CreateRexxPort(name$)",
    "functionDocs": "This function will create a rexx port for your script and assign the specified name to it. In order to receive ARexx messages, your script needs to have an ARexx port. Other applications can then communicate with your script by sending messages to this port. All messages that arrive at your Rexx port will be forwarded to the callback function which you need to install using the [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html) function (use the OnARexx event handler). If you do not install this event handler, you will not get any notifications on incoming messages.\n\nPlease remember that Rexx port names are always given in case sensitive notation. Thus, \"MYPORT\" and \"myport\" denote two different Rexx ports. For style reasons it is suggested that you use only upper case characters for your port name. Furthermore, each Rexx port must be unique in the system. If you specify a port name which is already in use, this function will fail. Thus, make sure that you use a unique name.\n\nPlease note that every Hollywood script can only have one ARexx port. Hence, this function can only be called once in your script. You cannot delete the port created by this function. It will be automatically destroyed when Hollywood exits.\n\nAn example how to catch ARexx messages is provided below. See [InstallEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).",
    "inputsDocs": "* `name$` — desired name for your Rexx port",
    "example": "```\nFunction p_EventFunc(msg)\n  Switch msg.action\n  Case \"OnARexx\"\n    Switch msg.command\n    Case \"RealFunc\"\n      Return(100)\n    Default\n      Local t = SplitStr(msg.args, \"\\0\")\n      DebugPrint(msg.command, \"called with\", msg.argc, \"argument(s)\")\n      For Local k = 1 To msg.argc\n         DebugPrint(\"Argument\", k .. \":\", t[k - 1])\n      Next\n    EndSwitch\n  EndSwitch\nEndFunction\nCreateRexxPort(\"MY_COOL_REXX_PORT_123\")\nInstallEventHandler({OnARexx = p_EventFunc})\nRepeat\n  WaitEvent\nForever\n```\n\nSave the code above as a Hollywood script and run it with Hollywood. Then save the following code as a Rexx script and execute it from a Shell with \"RX test.rx\":\n\n```\n/* remember the first line of every Rexx script must be a comment */\nOPTIONS RESULTS\n\n/* the port of our Hollywood script is now the host */\nADDRESS MY_COOL_REXX_PORT_123\n\n/* send commands from Rexx to Hollywood and watch the debug output */\nDummyFunc_1 '\"Dummy Arg 1\"'\nDummyFunc_2 1 2 3\nDummyFunc_3 '\"First arg\"' '\"Second arg\"' '\"Third arg\"'\nDummyFunc_4  /* no args */\nDummyFunc_5 \"These will be handled as separate arguments\"\nDummyFunc_6 '\"This is a single argument (use double quotes!)\"'\n\n'RealFunc'\nSAY RESULT   /* this will print 100; it is the result from RealFunc */\n```",
    "platforms": ["AmigaOS"],
    "insertText": "CreateRexxPort(${1:name$})"
  },
  {
    "name": "GetApplicationList",
    "helpId": "GetApplicationList",
    "shortDescription": "get a list of all registered applications",
    "version": "6.0",
    "synopsis": "t = GetApplicationList()",
    "functionDocs": "This function returns a table containing a list of all applications that have been registered through application.library.",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — table containing a list of strings describing all registered applications",
    "example": "```\nt = GetApplicationList()\nFor Local k = 0 To ListItems(t) - 1 Do DebugPrint(t[k])\n```\n\nThe code above prints all registered applications.",
    "platforms": ["AmigaOS 4"],
    "insertText": "GetApplicationList()"
  },
  {
    "name": "GetFrontScreen",
    "helpId": "GetFrontScreen",
    "shortDescription": "get name of frontmost screen",
    "version": "8.0",
    "synopsis": "n$ = GetFrontScreen()",
    "functionDocs": "This function can be used to get the name of the screen that is currently up front. In case the screen isn't a public screen, an empty string is returned.\n\nNote that in a multitasking environment like AmigaOS, all screens that aren't owned by your application can disappear at any time and their stack order can change as well, so you need to be prepared that at the time this function returns the screen is no longer front or even doesn't exist any more.",
    "inputsDocs": "none",
    "resultsDocs": "* `n$` — the screen that is currently front (see warning above concerning the reliability of this information)",
    "example": "```\nShowScreen(\"WORKBENCH\")\nPrint(GetFrontScreen())\n```\n\nThis is not guaranteed to return \"WORKBENCH\", although it will normally do so. See warning above.",
    "platforms": ["AmigaOS"],
    "insertText": "GetFrontScreen()"
  },
  {
    "name": "GetPubScreens",
    "helpId": "GetPubScreens",
    "shortDescription": "return a list of all available public screens",
    "version": "5.2",
    "synopsis": "t, info = GetPubScreens()",
    "functionDocs": "This function can be used to query the system for a list of all available public screens. It will return a table that contains one string element for each public screen that is currently open.\n\nStarting with Hollywood 5.3 this function will return a second table containing information about the screen dimensions and color depth. This second return table will contain as many elements as the first return table and there will be one subtable for each public screen that is currently open. Each subtable will contain the following fields:\n\n- `Width`: Initialized to the width of the public screen.\n\n- `Height`: Initialized to the height of the public screen.\n\n- `Depth`: Initialized to the depth of the public screen.\n\nYou can use [ShowScreen()](https://www.hollywood-mal.com/docs/html/hollywood/ShowScreen_.html) to switch to a public screen. If you want to move your display to a specific public screen, use [SetDisplayAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetDisplayAttributes_.html).\n\nNote that in a multitasking environment like AmigaOS, all screens that aren't owned by your application can disappear at any time so you need to be prepared that this function returns screens that don't exist any longer because they have been closed already.",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — table containing a number of strings describing all open public screens\n* `info` — additional table containing information about the screen dimensions and depth (V5.3)",
    "example": "```\nt = GetPubScreens()\nFor Local k = 0 To ListItems(t) - 1 Do DebugPrint(t[k])\n```\n\nThis code lists all public screens.",
    "platforms": ["AmigaOS"],
    "insertText": "GetPubScreens()"
  },
  {
    "name": "HideScreen",
    "helpId": "HideScreen",
    "shortDescription": "hide public screen",
    "version": "7.1",
    "synopsis": "HideScreen([s$])",
    "functionDocs": "This function can be used to move the public screen specified in `s$` to the back. If the `s$` argument is omitted, the screen that is currently at the front will be moved to the back.\n\nNote that in a multitasking environment like AmigaOS, all screens that aren't owned by your application can disappear at any time so you need to be prepared that this function fails because the screen doesn't exist any longer.",
    "inputsDocs": "* `s$` — optional: name of public screen to move to back (defaults to an empty string which means move the current screen to the back)",
    "example": "```\nHideScreen()\n```\n\nThis code moves the currently active screen to the back.",
    "platforms": ["AmigaOS"],
    "insertText": "HideScreen()"
  },
  {
    "name": "OpenAmigaGuide",
    "helpId": "OpenAmigaGuide",
    "shortDescription": "open AmigaGuide document in new window",
    "version": "6.1",
    "synopsis": "OpenAmigaGuide(file$[, node$])",
    "functionDocs": "This command will open the AmigaGuide file specified by `file$` and display it in its own window. If the optional argument `node$` is specified, Hollywood will show this particular node of the AmigaGuide file, otherwise the table of contents is shown.\n\nYou can close the AmigaGuide file by calling the [CloseAmigaGuide()](https://www.hollywood-mal.com/docs/html/hollywood/CloseAmigaGuide_.html) command. Open AmigaGuide files will also be closed automatically when Hollywood quits.\n\nNote that there can be only one open AmigaGuide file at a time. If you call this function and an AmigaGuide file is already visible, Hollywood will close that old AmigaGuide file first.",
    "inputsDocs": "* `file$` — AmigaGuide file to show\n* `node$` — optional: node to show (defaults to \"\" which means show the table of contents)",
    "example": "```\nOpenAmigaGuide(\"Hollywood:Help/Hollywood.guide\", \"OpenAmigaGuide\")\n```\n\nThe code above shows this page.",
    "platforms": ["AmigaOS"],
    "insertText": "OpenAmigaGuide(${1:file$})"
  },
  {
    "name": "RunRexxScript",
    "helpId": "RunRexxScript",
    "shortDescription": "run an ARexx script from file or memory",
    "version": "2.5",
    "synopsis": "res$ = RunRexxScript(script$[, nofile])",
    "functionDocs": "You can use this function to run the ARexx script specified in `script$`. Additionally, you can also run ARexx code directly by setting the optional `nofile` argument to `True`. In that case, `script$` must not be a path to an ARexx script but must contain the ARexx code to execute. The function will return the result from the ARexx script. The return value will always be a string - even if it contains just a number. If ARexx does not return anything, you will receive an empty string.\n\nYou have to start RexxMast prior to using this function. It is, however, not necessary to create a Rexx port in order to use this function. This function works also if your script does not have a Rexx port. The script will always be started with \"REXX\" being the host port. Thus, if you want to address an other port, you have to use the \"ADDRESS\" command of ARexx first.\n\nIf you use this function to start external ARexx scripts, make sure that the first line of your ARexx script is a comment. Otherwise you will receive a \"program not found\" error. As a matter of syntax, the first line of all ARexx scripts must be a comment.",
    "inputsDocs": "* `script$` — path to an external ARexx script or ARexx code directly; in the latter case, `nofile` must be `True`\n* `nofile` — optional: `False` if `script$` contains a path to an ARexx script and `True` if `script$` is ARexx code (defaults to `False`)",
    "resultsDocs": "* `res$` — return value from ARexx; this is always a string",
    "example": "```\nRunRexxScript(\"dh0:MyScript.rx\")\n```\n\nThe above code runs the script \"dh0:MyScript.rx\".\n\n---\n\n```\nr$ = RunRexxScript(\"SAY 'Hello'\\nRETURN 5\\n\", True)\n```\n\nThe above code prints \"Hello\" to the console and returns 5 to Hollywood. The variable `r$` thus will contain \"5\" after the call.",
    "platforms": ["AmigaOS"],
    "insertText": "RunRexxScript(${1:script$})"
  },
  {
    "name": "SendApplicationMessage",
    "helpId": "SendApplicationMessage",
    "shortDescription": "send message to another application",
    "version": "6.0",
    "synopsis": "SendApplicationMessage(app$, msg$)",
    "functionDocs": "This function can be used to send a message to a registered AmigaOS 4 application. The name of the receiving application has to be passed in `app$` and the message itself is passed in `msg$`.\n\nPlease note that this function can only be used if you have set the `RegisterApplication` tag in [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) to `True`. See [OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html).",
    "inputsDocs": "* `app$` — name of the application that should receive the message\n* `msg$` — the message to send",
    "resultsDocs": "none",
    "platforms": ["AmigaOS 4"],
    "insertText": "SendApplicationMessage(${1:app$}, ${2:msg$})"
  },
  {
    "name": "SendRexxCommand",
    "helpId": "SendRexxCommand",
    "shortDescription": "send command to Rexx port",
    "version": "2.5",
    "synopsis": "res$ = SendRexxCommand(port$, cmd$)",
    "functionDocs": "This function sends the command specified in `cmd$` to the Rexx port specified in `port$`. The function will then return the result from the command. The return value will always be a string - even if it contains just a number. If the command does not return anything, you will receive an empty string. You can also send multiple commands with this function. Just separate the statements with \";\" or you can also use new line characters (\"\\n\") for separation.\n\nIf you do not want to address a specific Rexx port, simply pass \"REXX\" in `port$`. In that case, the system's standard ARexx port will be your host port. Please also remember that port names are case sensitive, i.e. \"MYPORT\" and \"myport\" denote two different Rexx ports. For style guide reasons, port names are usually in upper case only.\n\nYou have to start RexxMast prior to using this function. It is, however, not necessary to create a Rexx port in order to use this function. This function works also if your script does not have a Rexx port.",
    "inputsDocs": "* `port$` — name of the port you want to address\n* `cmd$` — the command(s) you want to send to that port",
    "resultsDocs": "* `res$` — return value from ARexx; this is always a string",
    "example": "```\nSendRexxCommand(\"WORKBENCH\", \"WINDOW 'Sys:' OPEN\")\n```\n\nThe above code will open the SYS: drawer on your Workbench. Please note that the ARexx interface of the Workbench is a feature introduced in OS3.5. Thus, you will require OS3.5 or better. MorphOS does probably not support the Workbench ARexx interface because it is only rarely used. See the OS3.9 NDK for documentation on the available commands.",
    "platforms": ["AmigaOS"],
    "insertText": "SendRexxCommand(${1:port$}, ${2:cmd$})"
  },
  {
    "name": "SetScreenTitle",
    "helpId": "SetScreenTitle",
    "shortDescription": "change the screen title of the current display",
    "version": "6.0",
    "synopsis": "SetScreenTitle(title$)",
    "functionDocs": "This function can be used to change the text that should be shown in the screen's title bar whenever the current display is active. By default, \"Workbench screen\" will be shown.",
    "inputsDocs": "* `title$` — new screen title",
    "example": "```\nSetScreenTitle(\"My cool program\")\n```\n\nThe above code changes the screen title to \"My cool program\".",
    "platforms": ["AmigaOS"],
    "insertText": "SetScreenTitle(${1:title$})"
  },
  {
    "name": "ShowRinghioMessage",
    "helpId": "ShowRinghioMessage",
    "shortDescription": "show a Ringhio notification",
    "version": "6.0",
    "synopsis": "ShowRinghioMessage(title$, text$[, table])",
    "functionDocs": "This function can be used to show a notification through AmigaOS 4's Ringhio system. You need to pass a title for the notification in the first argument and the actual text in the second argument.\n\nThe optional table argument can be used to specify additional parameters for the way the Ringhio notification should be handled. The following tags are accepted here:\n\n- `PubScreen`: This tag can be used to specify the name of the public screen the notification should appear on.\n\n- `ImageFile`: This tag can be used to specify the path to an image file that should be displayed inside the Ringhio notification. For the best results, you should use only PNG images with alpha channel here.\n\n- `DoubleClickClose`: If you set this tag to `True`, the Ringhio notification window can be closed by double-clicking on it. In that case a message will be sent to your application containing the string you specify in the `DoubleClickMessage` tag (see below).\n\n- `DoubleClickMessage`: If the user double-clicks the Ringhio notification window in order to close it, the string you specify here will be sent to your application using the `OnApplicationMessage` event handler. This tag is only supported if you have also set the `DoubleClickClose` tag to `True` (see above). If the string specified here has the following format \"URL:http://www.example.com/\" the Ringhio server will not send a message back to your application but it will automatically show the specified URL in the default browser if the user double-clicks on the notification window.\n\nPlease note that this function can only be used if you have set the `RegisterApplication` tag in [@OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html) to `True`. See [OPTIONS](https://www.hollywood-mal.com/docs/html/hollywood/atOPTIONS_.html).",
    "inputsDocs": "* `title$` — title for the Ringhio notification\n* `text$` — text to show in the Ringhio notification\n* `table` — optional: table containing further parameters (see above)",
    "resultsDocs": "none",
    "platforms": ["AmigaOS 4"],
    "insertText": "ShowRinghioMessage(${1:title$}, ${2:text$})"
  },
  {
    "name": "ShowScreen",
    "helpId": "ShowScreen",
    "shortDescription": "switch to specified public screen",
    "version": "5.2",
    "synopsis": "ShowScreen(s$)",
    "functionDocs": "This function can be used to bring the public screen specified in `s$` to the front. If you want to move your display to a specific public screen, use [SetDisplayAttributes()](https://www.hollywood-mal.com/docs/html/hollywood/SetDisplayAttributes_.html) with the `PubScreen` tag.\n\nNote that in a multitasking environment like AmigaOS, all screens that aren't owned by your application can disappear at any time so you need to be prepared that this function fails because the screen doesn't exist any longer.",
    "inputsDocs": "* `s$` — name of public screen to bring to front",
    "example": "```\nShowScreen(\"WORKBENCH\")\n```\n\nThis code brings Workbench screen back to the front.",
    "platforms": ["AmigaOS"],
    "insertText": "ShowScreen(${1:s$})"
  }
]
