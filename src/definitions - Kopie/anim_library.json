[
  {
    "name": "ANIM",
    "helpId": "atANIM",
    "shortDescription": "preload an animation for later use",
    "version": "2.0",
    "synopsis": "@ANIM id, filename$[, table]",
    "functionDocs": "This preprocessor command preloads the animation specified in `filename$` and assigns the identifier `id` to it.\n\nAnim formats that are supported on all platforms are IFF ANIM, GIF ANIM, AVI (uncompressed or using Motion JPEG compression), and formats you have a plugin for. Depending on the platform Hollywood is running on, more anim formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all anim formats you have datatypes for as well. On Windows, `@ANIM` can also load anim formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 4.5, `@ANIM` can also automatically create animations from an image file. If you want to use an image file with `@ANIM`, you need to specify the optional `Frames` argument. See below for more information.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the animation.\n\n- `Link`: Set this field to `False` if you do not want to have this animation linked to your executable/applet when you compile your script. This field defaults to `True` which means that the animation is linked to your to your executable/applet when Hollywood is in compile mode.\n\n- `FromDisk`: If you set this field to `True`, Hollywood will not load the whole animation into memory but it will load the single frames directly from disk when needed. This is slower but requires much less memory. For the functions of the anim library it does not matter whether the animation is completely in memory or loaded dynamically from disk. You can use all anim functions like [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) also with anims that are loaded from disk. Anim layers are also correctly handled with disk anims. (V3.0)\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the anim shall be loaded, too. Please note that most anim formats do not support alpha channels. Thus, it is advised that you create the anim manually from a PNG picture using [CreateAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CreateAnim_.html) if you need to have an alpha channel in your animation. This field defaults to `False`. (V4.5)\n\n- `X, Y, Width, Height, Frames, FPR`: This group of fields is only used when you specify an image file source. In that case, you have to use these arguments to tell `@ANIM` how it shall create the animation from the image. `Width` and `Height` define the dimensions for the animation and `Frames` specifies how many frames `@ANIM` shall read from the source image. If the frames are aligned in multiple rows in the source image, you will also have to pass the argument `FPR` (abbreviation for frames per row) to tell `@ANIM` how many frames there are in each row. Finally, you can tell `@ANIM` where in the image file it should start scanning by specifying the fields `X` and `Y` (they both default to 0). `@ANIM` will then start off at position `X` and `Y` and read `Frames` number of images with the dimensions of `Width` by `Height` from the picture specified by `filename$`. After it has read `FPR` number of images, it will advance to the next row. (V4.5)\n\n- `SkipLoopFrames`: If you set this to `True`, Hollywood will automatically skip the last two frames of the anim. This is only required for IFF ANIMs that have two loop frames at the end of the anim. Auto detection of loop frames is not possible because it would require Hollywood to decode the whole anim first. That is why you have to tell Hollywood manually whether the anim has loop frames or not. (V5.3)\n\n- `Deinterlace`: This tag allows you to specify how Hollywood should deinterlace interlaced anims. This can be set to either `#DEINTERLACE_DEFAULT` or `#DEINTERLACE_DOUBLE`. If set to `#DEINTERLACE_DEFAULT` (which is as the name implies also the default), Hollywood will combine two half-frames into one full frame. This mostly results in the best quality but can lead to visual artefacts when there is a lot of movement in the anim. If you use `#DEINTERLACE_DOUBLE` instead, Hollywood will double the lines of a half-frame to get a full frame. This leads to some quality loss but can make the anim look more smooth. The best deinterlace mode to use always depends on the anim. Note that mostly you should not have to care about this tag at all because deinterlacing is actually only required for some obscure IFF ANIM formats which store interlaced frames like ANIM16i and ANIM32i. (V5.3)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the anim will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based anim. If you want to load the alphachannel of an anim, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the anim as a palette anim. This means that you can get and modify the anim's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette animations also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the anim file (if the anim format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. An animation cannot have a mask and an alpha channel!\n\nStarting with Hollywood 9.0, this preprocessor command can also load vector anim formats if you have an appropriate plugin installed. Keep in mind, though, that if you load vector anim formats using `@ANIM`, the anim may not support all features of normal anims. See [Vector animations](https://www.hollywood-mal.com/docs/html/hollywood/VectorAnimNote_.html).\n\nIf you want to load anims manually, please use the [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html) command.",
    "inputsDocs": "* `id` — a value that is used to identify this animation later in the code\n* `filename$` — the animation file you want to load\n* `table` — optional: a table that can contain a combination of the fields discussed above",
    "example": "```\n@ANIM 1, \"MyAnim.gif\"\n```\n\nLoad \"MyAnim.gif\" as animation number 1.\n\n---\n\n```\n@ANIM 1, \"MyAnim.gif\", {Transparency = $FF0000}\n```\n\nDoes the same like above but the animation is now transparent (transparency color is red=$FF0000).\n\n---\n\n```\n@ANIM 1, \"Huge_Animation.iff\", {Link = False}\n```\n\nThe code above loads the specified animation and tells Hollywood that it should never link this anim because it is so big.",
    "platforms": ["All"]
  },
  {
    "name": "BeginAnimStream",
    "helpId": "BeginAnimStream",
    "shortDescription": "begin sequential anim creation",
    "version": "4.5",
    "synopsis": "[id] = BeginAnimStream(id, file$, width, height[, format, table])",
    "functionDocs": "This function allows you to create an empty animation object on disk that you can then subsequently append frames to using [WriteAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/WriteAnimFrame_.html). The advantage of `BeginAnimStream()` over [SaveAnim()](https://www.hollywood-mal.com/docs/html/hollywood/SaveAnim_.html) is that SaveAnim() requires you to provide an animation object as the source. If you use `BeginAnimStream()`, you can append frames to your animation from individual brush objects. This gives you the utmost flexibility. Because of its sequential design, `BeginAnimStream()` can be used to create new animations of virtually unlimited size and length. You could easily create a 2 hour AVI video with this function.\n\nThe first argument to `BeginAnimStream()` must be an id for the new write animation object. Alternatively, you can specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) and `BeginAnimStream()` will return a handle to the object to you. The second argument specifies a path to a file that shall be created for this anim. Arguments three and four specify the desired dimensions of the animation. The fifth argument specifies the format of the animation. This can either be one of the following animation types or an anim saver provided by a plugin:\n\n- `#ANMFMT_GIF`: GIF format. Because GIF anims are always palette-based, RGB graphics have to be quantized before they can be exported as GIF. When calling [WriteAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/WriteAnimFrame_.html) you can use the `Colors` and `Dither` tags to specify the number of palette entries to allocate for the frame and whether or not dithering shall be applied. When using `#ANMFMT_GIF` with a palette frame, no quantizing will be done. `#ANMFMT_GIF` also supports palette anims with a transparent pen. `#ANMFMT_GIF` is the default format used by `BeginAnimStream()`.\n\n- `#ANMFMT_MJPEG`: AVI with Motion JPEG compression. This is a lossy anim format so you can set the `Quality` tag (see below) to control the level of compression that should be used.\n\n- `#ANMFMT_IFF`: IFF anim. Hollywood will use mode 5 compression (the most common compression mode) for IFF anims. Because IFF anims are always palette-based, RGB graphics have to be quantized before they can be exported as IFF. When calling [WriteAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/WriteAnimFrame_.html) you can use the `Colors` and `Dither` tags to specify the number of palette entries to allocate for the frame and whether or not dithering shall be applied. When using `#ANMFMT_IFF` with a palette frame, no quantizing will be done. `#ANMFMT_IFF` also supports palette anims with a transparent pen. (V9.0)\n\nThe optional table argument allows you to configure further parameters:\n\n- `Quality`: Here you can specify a value between 0 and 100 indicating the compression quality for lossy compression formats. A value of 100 means best quality, 0 means worst quality. This is only available for anim formats that support lossy compression. Defaults to 90 which means pretty good quality.\n\n- `FPS`: Video formats like AVI do not support an individual delay value for each frame but require a global value indicating how many frames per second shall be displayed. This field allows you to set the FPS. This is only handled for video file formats. Defaults to 25 frames per second.\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nHere is a table that shows an overview which table elements can be used with the different animation formats:\n\n![animformats2](https://www.hollywood-mal.com/docs/html/hollywood/img/animformats2.png)\n\nWhen you have successfully obtained a handle to a new animation object, you can then sequentially append frames to it using [WriteAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/WriteAnimFrame_.html). When you are done adding frames, you have to call [FinishAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/FinishAnimStream_.html) to finalize the animation file on disk and make it ready for use.",
    "inputsDocs": "* `id` — id for the animation object or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `file$` — destination file\n* `width` — desired width for the animation\n* `height` — desired height for the animation\n* `format` — optional: which anim format to use (defaults to `#ANMFMT_GIF`)\n* `table` — optional: further arguments for save operation; see above",
    "resultsDocs": "* `id` — optional: identifier of the animation; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateBrush(1, 320, 240)\nSelectBrush(1)\nSetFillStyle(#FILLCOLOR)\nBeginAnimStream(1, \"test.gif\", 320, 240)\nFor Local k = 1 To 100\n   Circle(#CENTER, #CENTER, k * 2, #RED)\n   WriteAnimFrame(1, 1)\nNext\nFinishAnimStream(1)\nEndSelect\n```\n\nThe code above creates a new GIF animation with 100 frames. The animation will show a red circle zooming into the screen.",
    "platforms": ["All"],
    "insertText": "BeginAnimStream(${1:id}, ${2:file$}, ${3:width}, ${4:height})"
  },
  {
    "name": "CloseAnim",
    "helpId": "CloseAnim",
    "shortDescription": "close an animation",
    "version": "9.0",
    "synopsis": "CloseAnim(id)",
    "functionDocs": "This function closes the animation specified by `id`. The animation must have been previously opened using [OpenAnim()](https://www.hollywood-mal.com/docs/html/hollywood/OpenAnim_.html). See [OpenAnim](https://www.hollywood-mal.com/docs/html/hollywood/OpenAnim_.html).",
    "inputsDocs": "* `id` — identifier of the animation",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseAnim(${1:id})"
  },
  {
    "name": "CopyAnim",
    "helpId": "CopyAnim",
    "shortDescription": "clone an animation",
    "version": "2.0",
    "synopsis": "[id] = CopyAnim(src, dst)",
    "functionDocs": "This function clones the animation specified by `src` and creates a copy of it in the new animation with id `dst`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `dst` argument, this function will choose an identifier for the cloned animation automatically and return it to you. The new animation is fully independent from the old one so you could free up the source anim after it has been cloned.",
    "inputsDocs": "* `src` — source animation\n* `dst` — destination animation id or `Nil`",
    "resultsDocs": "* `id` — optional: identifier of the cloned anim; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 2 (see above)",
    "platforms": ["All"],
    "insertText": "CopyAnim(${1:src}, ${2:dst})"
  },
  {
    "name": "CreateAnim",
    "helpId": "CreateAnim",
    "shortDescription": "create animation from a brush",
    "version": "2.0",
    "synopsis": "[id] = CreateAnim(id, brush, width, height, frames, fpr[, sx, sy])",
    "functionDocs": "This function can be used to create a new animation from a brush source. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for this animation automatically and return it to you. The single frames will be read from the specified brush and will be put together in a new animation. You need to specify the width and height of the frames as well as the number of frames to read from the brush and how many frames are in one row. Optionally, you can define a position from where in the brush the conversion shall start.\n\nIf the source brush is transparent, the new animation will also have transparent areas. If the source brush uses an alpha channel, the animation will get an alpha channel, too.",
    "inputsDocs": "* `id` — identifier for the new animation\n* `brush` — source brush\n* `width` — width of each anim frame\n* `height` — height of each anim frames\n* `frames` — how many frames should the animation have\n* `fpr` — how many frames are in one row; if this is the same than frames, then all frames must be in the same row\n* `sx` — optional: x-offset in the source brush (defaults to 0)\n* `sy` — optional: y-offset in the source brush (defaults to 0)",
    "resultsDocs": "* `id` — optional: identifier of the new anim; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "platforms": ["All"],
    "insertText": "CreateAnim(${1:id}, ${2:brush}, ${3:width}, ${4:height}, ${5:frames}, ${6:fpr})"
  },
  {
    "name": "DisplayAnimFrame",
    "helpId": "DisplayAnimFrame",
    "shortDescription": "display a single frame of an animation",
    "version": "4.0",
    "synopsis": "DisplayAnimFrame(id, x, y, frame[, table])",
    "functionDocs": "This function displays a single frame of an animation at the specified coordinates.\n\nIf layers are enabled, this command will add a new layer of the type `#ANIM` to the layer stack.\n\n`DisplayAnimFrame()` also recognizes an optional table argument which allows you to specify one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) for all drawing commands. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the animation to use\n* `x` — destination x coordinate\n* `y` — destination y coordinate\n* `frame` — animation frame to display (1 = first frame)\n* `table` — optional: table specifying further options",
    "example": "```\nDisplayAnimFrame(1, #CENTER, #CENTER, 5)\n```\n\nThe code above display frame 5 of animation 1 on the center of the screen.",
    "platforms": ["All"],
    "insertText": "DisplayAnimFrame(${1:id}, ${2:x}, ${3:y}, ${4:frame})"
  },
  {
    "name": "FinishAnimStream",
    "helpId": "FinishAnimStream",
    "shortDescription": "finalize sequential anim object",
    "version": "4.5",
    "synopsis": "FinishAnimStream(id)",
    "functionDocs": "This function must be used to finalize a sequential anim object when you are done appending frames to it. When `FinishAnimStream()` returns, the new animation will be ready to use on your hard disk.\n\nSee [BeginAnimStream](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html).",
    "inputsDocs": "* `id` — identifier of the animation object to finalize; must have been obtained using [BeginAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html)",
    "example": "See [BeginAnimStream](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html)",
    "platforms": ["All"],
    "insertText": "FinishAnimStream(${1:id})"
  },
  {
    "name": "FreeAnim",
    "helpId": "FreeAnim",
    "shortDescription": "free an animation",
    "version": "1.0",
    "synopsis": "FreeAnim(id)",
    "functionDocs": "This function frees the memory of the animation specified by `id`. To reduce memory consumption, you should free animations when you do not need them any longer.\n\nNote that this command should be used with animations allocated by [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html), [CreateAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CreateAnim_.html) or [@ANIM](https://www.hollywood-mal.com/docs/html/hollywood/atANIM_.html). Animations allocated by [OpenAnim()](https://www.hollywood-mal.com/docs/html/hollywood/OpenAnim_.html) should be freed using [CloseAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CloseAnim_.html).",
    "inputsDocs": "* `id` — identifier of the animation",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeAnim(${1:id})"
  },
  {
    "name": "GetAnimFrame",
    "helpId": "GetAnimFrame",
    "shortDescription": "copy animation frame to brush",
    "version": "3.0",
    "synopsis": "GetAnimFrame(id, frame, animid)",
    "functionDocs": "This function can be used to convert a single frame of an animation to a brush. The animation must have been loaded using [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html) or the [@ANIM](https://www.hollywood-mal.com/docs/html/hollywood/atANIM_.html) preprocessor command. If you want to load a frame directly from an animation file, use [LoadAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnimFrame_.html) instead. `GetAnimFrame()` is preferred, however, because it is faster. In the first argument, pass an identifier for the brush you want this function to create. In the second argument you have to specify which frame of the animation should be loaded, and the third argument finally specifies the identifier of the animation to use as the source.",
    "inputsDocs": "* `id` — identifier of brush to be created by this function\n* `frame` — frame to load (ranges from 1 to number of frames); specify -1 if you want to load the last frame\n* `animid` — identifier of the animation to use as source",
    "example": "```\nLoadAnim(1, \"TestAnim.anim\")\nGetAnimFrame(1, 15, 1)\n```\n\nThe code above converts frame 15 of animation 1 into brush 1.",
    "platforms": ["All"],
    "insertText": "GetAnimFrame(${1:id}, ${2:frame}, ${3:animid})"
  },
  {
    "name": "IsAnim",
    "helpId": "IsAnim",
    "shortDescription": "determine if an animation is in a supported format",
    "version": "1.0",
    "synopsis": "ret = IsAnim(file$[, table])",
    "functionDocs": "This function will check if the file specified `file$` is in a supported animation format. If it is, this function will return `True`, otherwise `False`. If this function returns `True`, you can load the animation by calling [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html).\n\nStarting with Hollywood 6.0 this function accepts an optional table argument which allows you to configure further options:\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nSee [LoadAnim](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html).",
    "inputsDocs": "* `file$` — file to check\n* `table` — optional: table configuring further options (V6.0)",
    "resultsDocs": "* `ret` — `True` if the animation is in a supported format, `False` otherwise",
    "platforms": ["All"],
    "insertText": "IsAnim(${1:file$})"
  },
  {
    "name": "IsAnimPlaying",
    "helpId": "IsAnimPlaying",
    "shortDescription": "check if an animation is playing (V1.0 only)",
    "version": "1.0",
    "synopsis": "playing = IsAnimPlaying(id)",
    "functionDocs": "Attention: This command was removed in Hollywood 1.5.\n\nThis function checks if the animation specified by `id` is currently playing and returns `True` if it is, `False` otherwise.",
    "inputsDocs": "* `id` — identifier of an animation",
    "resultsDocs": "* `playing` — `True` if the animation specified by `id` is playing, `False` otherwise",
    "example": "```\nLoadAnim(1, \"Gfx/Anims/CoolAnim.anm\")\nPlayAnim(1, #PLAYONCE)\nplaying = IsAnimPlaying(1)\nWhile playing = TRUE\n   playing = IsAnimPlaying(1)\nWend\nFreeAnim(1)\n```\n\nThe above code loads the animation \"Gfx/Anims/CoolAnim.anm\", plays it and then waits for it to finish. After that, the animation is freed. If you just want to do something like above, it is easier for you to use the [WaitAnimEnd()](https://www.hollywood-mal.com/docs/html/hollywood/WaitAnimEnd_.html) command. But if you want to do some things during the animation is playing, you will have to do it this way (using `IsAnimPlaying()` and a loop).",
    "platforms": ["All"],
    "insertText": "IsAnimPlaying(${1:id})"
  },
  {
    "name": "LoadAnim",
    "helpId": "LoadAnim",
    "shortDescription": "load an animation",
    "version": "1.0",
    "synopsis": "[id] = LoadAnim(id, filename$[, table])",
    "functionDocs": "This function loads the animation specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadAnim()` will automatically choose an identifier and return it.\n\nNote that by default, this command will load all anim frames into memory which may take a while and significant amounts of memory. If you want to create an animation that dynamically loads frames as needed and only keeps the current frame in memory, use the [OpenAnim()](https://www.hollywood-mal.com/docs/html/hollywood/OpenAnim_.html) command instead or set the `FromDisk` tag to `True` (see below). See [OpenAnim](https://www.hollywood-mal.com/docs/html/hollywood/OpenAnim_.html).\n\nAnim formats that are supported on all platforms are IFF ANIM, GIF ANIM, AVI (uncompressed or using Motion JPEG compression), and formats you have a plugin for. Depending on the platform Hollywood is running on, more anim formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all anim formats you have datatypes for as well. On Windows, `LoadAnim()` can also load anim formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 4.5, `LoadAnim()` can also automatically create animations from an image file. If you want to load an image file with `LoadAnim()`, you need to specify the optional `Frames` argument. See below for more information.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the animation.\n\n- `FromDisk`: If you set this field to `True`, Hollywood will not load the whole animation into memory but it will load the single frames directly from disk when needed. This is slower but requires much less memory. For the functions of the anim library it does not matter whether the animation is completely in memory or loaded dynamically from disk. You can use all anim functions like [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) also with anims that are loaded from disk. Anim layers are also correctly handled with disk anims.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the anim shall be loaded, too. Please note that most anim formats do not support alpha channels. Thus, it is advised that you create the anim manually from a PNG picture using [CreateAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CreateAnim_.html) if you need to have an alpha channel in your animation. This field defaults to `False`. (V4.5)\n\n- `X, Y, Width, Height, Frames, FPR`: This group of fields is only used when you specify an image file source. In that case, you have to use these arguments to tell `LoadAnim()` how it shall create the animation from the image. `Width` and `Height` define the dimensions for the animation and `Frames` specifies how many frames `LoadAnim()` shall read from the source image. If the frames are aligned in multiple rows in the source image, you will also have to pass the argument `FPR` (abbreviation for frames per row) to tell `LoadAnim()` how many frames there are in each row. Finally, you can tell `LoadAnim()` where in the image it should start scanning by specifying the fields `X` and `Y` (they both default to 0). `LoadAnim()` will then start off at position `X` and `Y` and read `Frames` number of images with the dimensions of `Width` by `Height` from the picture specified by `filename$`. After it has read `FPR` number of images, it will advance to the next row. (V4.5)\n\n- `SkipLoopFrames`: If you set this to `True`, Hollywood will automatically skip the last two frames of the anim. This is only required for IFF ANIMs that have two loop frames at the end of the anim. Auto detection of loop frames is not possible because it would require Hollywood to decode the whole anim first. That is why you have to tell Hollywood manually whether the anim has loop frames or not. (V5.3)\n\n- `Deinterlace`: This tag allows you to specify how Hollywood should deinterlace interlaced anims. This can be set to either `#DEINTERLACE_DEFAULT` or `#DEINTERLACE_DOUBLE`. If set to `#DEINTERLACE_DEFAULT` (which is as the name implies also the default), Hollywood will combine two half-frames into one full frame. This mostly results in the best quality but can lead to visual artefacts when there is a lot of movement in the anim. If you use `#DEINTERLACE_DOUBLE` instead, Hollywood will double the lines of a half-frame to get a full frame. This leads to some quality loss but can make the anim look more smooth. The best deinterlace mode to use always depends on the anim. Note that mostly you should not have to care about this tag at all because deinterlacing is actually only required for some obscure IFF ANIM formats which store interlaced frames like ANIM16i and ANIM32i. (V5.3)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the anim will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based anim. If you want to load the alphachannel of an anim, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the anim as a palette anim. This means that you can get and modify the anim's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette animations also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the anim file (if the anim format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. An animation cannot have a mask and an alpha channel!\n\nStarting with Hollywood 9.0, this function can also load vector anim formats if you have an appropriate plugin installed. Keep in mind, though, that if you load vector anim formats using `LoadAnim()`, the anim may not support all features of normal anims. See [Vector animations](https://www.hollywood-mal.com/docs/html/hollywood/VectorAnimNote_.html).\n\nThis command is also available from the preprocessor: Use [@ANIM](https://www.hollywood-mal.com/docs/html/hollywood/atANIM_.html) to preload animations!",
    "inputsDocs": "* `id` — identifier for the animation or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: further options (see above) (V2.5)",
    "resultsDocs": "* `id` — optional: identifier of the animation; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadAnim(2, \"MyAnim.gif\", {Transparency = #RED})\n```\n\nThis loads \"MyAnim.gif\" as anim 2 with the color red being transparent.",
    "platforms": ["All"],
    "insertText": "LoadAnim(${1:id}, ${2:filename$})"
  },
  {
    "name": "LoadAnimFrame",
    "helpId": "LoadAnimFrame",
    "shortDescription": "load a single animation frame",
    "version": "1.5",
    "synopsis": "LoadAnimFrame(id, frame, anim$[, table])",
    "functionDocs": "This function loads a single anim frame into the brush specified by `id`. The animation file is specified by the string `anim$`. The `frame` argument specifies which frame to load. If you want to load the last frame, set `frame` to -1.\n\nThe fourth argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the brush.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the anim frame shall be loaded, too. Please note that not all animations have an alpha channel and that not all animation formats are capable of storing alpha channel information. This field defaults to `False`.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the anim frame will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based anim. If you want to load the alphachannel of an anim, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. An anim frame can only have one transparency setting!\n\nSee [LoadAnim](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html).",
    "inputsDocs": "* `id` — brush which shall contain the anim frame\n* `frame` — frame to load (ranges from 1 to number of frames); specify -1 if you want to load the last frame\n* `anim$` — animation file\n* `table` — optional: further options (see above) (V5.1)",
    "example": "```\nLoadAnimFrame(1, 5, \"Animations/HugeAnim.gif\")\nDisplayBrushFX(1, #CENTER, #CENTER, #CROSSFADE)\n```\n\nThe above code loads frame 5 of the animation \"Animations/HugeAnim.gif\" into brush 1 and crossfades brush 1 onto the display.",
    "platforms": ["All"],
    "insertText": "LoadAnimFrame(${1:id}, ${2:frame}, ${3:anim$})"
  },
  {
    "name": "ModifyAnimFrames",
    "helpId": "ModifyAnimFrames",
    "shortDescription": "add or remove animation frames",
    "version": "4.5",
    "synopsis": "ModifyAnimFrames(id, frames[, pos])",
    "functionDocs": "This function can be used to extend or shrink an existing animation. If you specify a positive value in `frames`, then the animation is extended by this number of frames. If you specify a negative value, the number of frames specified are removed from the animation.\n\nThe optional argument `pos` can be used to specify where the new frames shall be inserted or from where the frames shall be removed, respectively. If you do not specify the optional argument or set it to 0, frames are added at the end of the animation or removed from the end of the animation, respectively.\n\nThis command works only with animations buffered entirely in memory. You cannot use it for animations that are played directly from disk.",
    "inputsDocs": "* `id` — identifier of the animation to modify\n* `frames` — number of frames to insert (if value is positive) or number of frames to remove (if value is negative)\n* `pos` — optional: where to insert or remove frames (defaults to 0 which means insert at/remove from the end)",
    "example": "```\nModifyAnimFrames(1, -5, 1)\n```\n\nThe code above removes the first five frames from animation number 1.",
    "platforms": ["All"],
    "insertText": "ModifyAnimFrames(${1:id}, ${2:frames})"
  },
  {
    "name": "MoveAnim",
    "helpId": "MoveAnim",
    "shortDescription": "move an animation from a to b",
    "version": "1.0",
    "synopsis": "MoveAnim(id, xa, ya, xb, yb[, table])",
    "functionDocs": "This function moves (scrolls) the animation specified by `id` softly from the location specified by `xa`,`ya` to the location specified by `xb`,`yb`.\n\nFurther configuration options are possible using the optional argument table. You can specify the move speed, special effect, and whether or not the move shall be asynchronous. See [MoveBrush](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html).\n\nBesides the table elements mentioned in the [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) documentation, `MoveAnim()` accepts one additional table element named `AnimSpeed`: The anim speed value defines after how many draws the frame number should be increased; therefore a higher number means a lower playback speed of the animation.\n\nIt should also be mentioned that starting with Hollywood 4.5, you can specify the new `#DEFAULTSPEED` constant in the `Speed` table argument. (see [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html)). If you use `#DEFAULTSPEED`, Hollywood will use the playback speed as defined in the animation file. Note that not all animations define such a speed but if they do, it should be respected because otherwise the playback looks wrong.",
    "inputsDocs": "* `id` — identifier of the animation to use as source\n* `xa` — source x position\n* `ya` — source y position\n* `xb` — destination x position\n* `yb` — destination y position\n* `table` — optional: further configuration for this move",
    "example": "```\nMoveAnim(1, 100, 50, 0, 50, {Speed = 5, AnimSpeed = 4})\n```\n\nMoves the animation 1 from 100:50 to 0:50 with move speed 5 and anim playback speed 4.",
    "platforms": ["All"],
    "insertText": "MoveAnim(${1:id}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb})"
  },
  {
    "name": "OpenAnim",
    "helpId": "OpenAnim",
    "shortDescription": "open an animation",
    "version": "9.0",
    "synopsis": "[id] = OpenAnim(id, filename$[, table])",
    "functionDocs": "This function opens the animation specified by `filename$` and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `OpenAnim()` will automatically choose an identifier and return it.\n\nIn contrast to [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html), `OpenAnim()` won't load any frames into memory. Thus, it will return control to the script quickly and won't use much memory. Using `OpenAnim()` is basically the same as calling [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html) with the `FromDisk` table argument set to `True`.\n\nAnim formats that are supported on all platforms are IFF ANIM, GIF ANIM, AVI (uncompressed or using Motion JPEG compression), and formats you have a plugin for. Depending on the platform Hollywood is running on, more anim formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all anim formats you have datatypes for as well. On Windows, `OpenAnim()` can also load anim formats supported by the Windows Imaging Component.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB notation](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) that shall be made transparent in the animation.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the anim shall be loaded, too. This field defaults to `False`.\n\n- `SkipLoopFrames`: If you set this to `True`, Hollywood will automatically skip the last two frames of the anim. This is only required for IFF ANIMs that have two loop frames at the end of the anim. Auto detection of loop frames is not possible because it would require Hollywood to decode the whole anim first. That is why you have to tell Hollywood manually whether the anim has loop frames or not.\n\n- `Deinterlace`: This tag allows you to specify how Hollywood should deinterlace interlaced anims. This can be set to either `#DEINTERLACE_DEFAULT` or `#DEINTERLACE_DOUBLE`. If set to `#DEINTERLACE_DEFAULT` (which is as the name implies also the default), Hollywood will combine two half-frames into one full frame. This mostly results in the best quality but can lead to visual artefacts when there is a lot of movement in the anim. If you use `#DEINTERLACE_DOUBLE` instead, Hollywood will double the lines of a half-frame to get a full frame. This leads to some quality loss but can make the anim look smoother. The best deinterlace mode to use always depends on the anim. Note that mostly you should not have to care about this tag at all because deinterlacing is actually only required for some obscure IFF ANIM formats which store interlaced frames like ANIM16i and ANIM32i.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this anim. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the anim will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based anim. If you want to load the alphachannel of an anim, set the `LoadAlpha` tag to `True`. This tag defaults to `False`.\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the anim as a palette anim. This means that you can get and modify the anim's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette animations also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`.\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the anim file (if the anim format supports the storage of transparent pens). This tag defaults to `#NOPEN`.\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. An animation cannot have a mask and an alpha channel!\n\nThis command is also available from the preprocessor: Use [@ANIM](https://www.hollywood-mal.com/docs/html/hollywood/atANIM_.html) to preload animations from the preprocessor but note that you have to set `FromDisk` to `True` in that case to get the same behaviour as `OpenAnim()`. If you don't set `FromDisk` to `True`, [@ANIM](https://www.hollywood-mal.com/docs/html/hollywood/atANIM_.html) will load the entire animation into memory!\n\nStarting with Hollywood 9.0, this function can also open vector anim formats if you have an appropriate plugin installed. Keep in mind, though, that if you open vector anim formats using `OpenAnim()`, the anim may not support all features of normal anims. See [Vector animations](https://www.hollywood-mal.com/docs/html/hollywood/VectorAnimNote_.html).\n\nTo free an animation allocated by `OpenAnim()`, use the [CloseAnim()](https://www.hollywood-mal.com/docs/html/hollywood/CloseAnim_.html) command. See [CloseAnim](https://www.hollywood-mal.com/docs/html/hollywood/CloseAnim_.html).",
    "inputsDocs": "* `id` — identifier for the animation or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the animation; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nOpenAnim(2, \"MyAnim.gif\", {Transparency = #RED})\n```\n\nThis opens \"MyAnim.gif\" as anim 2 with the color red being transparent.",
    "platforms": ["All"],
    "insertText": "OpenAnim(${1:id}, ${2:filename$})"
  },
  {
    "name": "PlayAnim",
    "helpId": "PlayAnim",
    "shortDescription": "play an animation",
    "version": "1.0",
    "synopsis": "[handle] = PlayAnim(id[, x, y, table])",
    "functionDocs": "This function starts playing a preloaded animation specified by `id`. Optionally you can specify the `x` and `y` coordinates on the screen where the animation should be displayed.\n\nIf layers are enabled, this command will add a new layer of the type `#ANIM` to the layer stack.\n\nAs of Hollywood 4.0, `PlayAnim()` accepts an additional optional table argument which can be used to configure several further playback options:\n\n- `Speed`: Defines the playback speed for the animation. The higher the number, the slower the playback speed. You can also specify a constant for the speed argument (`#SLOWSPEED`, `#NORMALSPEED` or `#FASTSPEED`). New in Hollywood 4.5: You can specify the new `#DEFAULTSPEED` constant here. If you use `#DEFAULTSPEED`, Hollywood will use the speed as defined in the animation file. Note that not all animations define such a speed but if they do, it should be respected because otherwise the playback looks wrong.\n\n- `Times`: Specifies how many times the animation shall be played (defaults to 1 which means play anim just once). If you want the animation to loop infinitely, specify 0 here.\n\n- `Async`: You can use this field to create an asynchronous draw object for this playback. If you pass `True` here `PlayAnim()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).",
    "inputsDocs": "* `id` — identifier of the animation to play\n* `x` — optional: x playback position (defaults to 0)\n* `y` — optional: y playback position (defaults to 0)\n* `table` — optional: further configuration for the anim playback",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nPlayAnim(1)\n```\n\nPlay the animation 1.",
    "platforms": ["All"],
    "insertText": "PlayAnim(${1:id})"
  },
  {
    "name": "PlayAnimDisk",
    "helpId": "PlayAnimDisk",
    "shortDescription": "play an animation directly from disk",
    "version": "1.5",
    "synopsis": "PlayAnimDisk(anim$[, x, y, frameskip, speed, transcolor, times])",
    "functionDocs": "This function plays the animation specified by `anim$` directly from disk. This is useful if you want to display large animations which do not fit into your memory. Of course, this function is a lot of slower than [PlayAnim()](https://www.hollywood-mal.com/docs/html/hollywood/PlayAnim_.html) which plays an animation from memory.\n\nNew in Hollywood 1.9 is the optional `times` argument which allows you to specify how many times the animation shall be played. This defaults to 1 which means that the animation is only played once. If you want to loop the animation indefinitely, specify 0.\n\nImportant note: Since Hollywood 2.5 it is better to use [LoadAnim()](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html) with `FromDisk` set to `True` for disk anims. This gives you more flexibility because you can also use the other commands from the anim library (like [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html) etc.) and you can also access the anims as layers using [NextFrame()](https://www.hollywood-mal.com/docs/html/hollywood/NextFrame_.html) - all of which is not possible with `PlayAnimDisk()`.\n\nSee [LoadAnim](https://www.hollywood-mal.com/docs/html/hollywood/LoadAnim_.html).",
    "inputsDocs": "* `anim$` — animation file to play\n* `x` — optional: x-position for the animation on the display (defaults to 0)\n* `y` — optional: y-position for the animation on the display (defaults to 0)\n* `frameskip` — optional: frame skip (defaults to 0)\n* `speed` — optional: delay after each frame in ticks (defaults to 0)\n* `transcolor` — optional: transparent color for the animation (defaults to `#NOTRANSPARENCY`)\n* `times` — optional: specifies how many times the animation should be played (defaults to 1) (V1.9)",
    "example": "```\nPlayAnimDisk(\"Animations/LargeAnim.gif\", 0, 0, 3)\n```\n\nThe above code plays the animation \"Animations/LargeAnim.gif\" and skips 3 frames per run.",
    "platforms": ["All"],
    "insertText": "PlayAnimDisk(${1:anim$})"
  },
  {
    "name": "SaveAnim",
    "helpId": "SaveAnim",
    "shortDescription": "save animation to disk",
    "version": "4.5",
    "synopsis": "SaveAnim(id, file$[, format, table])",
    "functionDocs": "This function saves the animation specified by `id` to the file specified by `file$` in animation format specified by `format`. This can either be one of the following constants or an anim saver provided by a plugin:\n\n- `#ANMFMT_GIF`: GIF format. Because GIF anims are always palette-based, RGB graphics have to be quantized before they can be exported as GIF. You can use the `Colors` and `Dither` tags (see below) to specify the number of palette entries to allocate for the anim and whether or not dithering shall be applied. When using `#ANMFMT_GIF` with a palette anim, no quantizing will be done. `#ANMFMT_GIF` also supports palette anims with a transparent pen. `#ANMFMT_GIF` is the default format used by `SaveAnim()`.\n\n- `#ANMFMT_MJPEG`: AVI with Motion JPEG compression. This is a lossy anim format so you can set the `Quality` tag (see below) to control the level of compression that should be used.\n\n- `#ANMFMT_IFF`: IFF anim. Hollywood will use mode 5 compression (the most common compression mode) for IFF anims. Because IFF anims are always palette-based, RGB graphics have to be quantized before they can be exported as IFF. You can use the `Colors` and `Dither` tags (see below) to specify the number of palette entries to allocate for the anim and whether or not dithering shall be applied. When using `#ANMFMT_IFF` with a palette anim, no quantizing will be done. `#ANMFMT_IFF` also supports palette anims with a transparent pen. (V9.0)\n\nThe optional table argument allows you to configure further parameters:\n\n- `Dither`: Set to `True` to enable dithering. This field is only handled when the destination format is palette-based and the source data is RGB. GIF anims and IFF anims always use a color palette. Defaults to `False` which means no dithering.\n\n- `Depth`: Specifies the desired anim depth. This is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 (= 2 colors) and 8 (= 256 colors). Defaults to 8. (V9.0)\n\n- `Colors`: This is an alternative to the `Depth` tag. Instead of a bit depth, you can pass how many colors the anim shall use here. Again, this is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 and 256. Defaults to 256.\n\n- `Optimize`: Specifies whether or not Hollywood shall try to optimize the animation. Optimized saving is slower but usually leads to smaller animations. Defaults to `True`.\n\n- `Quality`: Here you can specify a value between 0 and 100 indicating the compression quality for lossy compression formats. A value of 100 means best quality, 0 means worst quality. This is only available for anim formats that support lossy compression. Defaults to 90 which means pretty good quality.\n\n- `FPS`: Video formats like AVI do not support an individual delay value for each frame but require a global value indicating how many frames per second shall be displayed. This field allows you to set the FPS. This is only handled for video file formats. Defaults to 25 frames per second.\n\n- `FillColor`: When saving an RGB anim that has transparent pixels, you can specify an RGB color that should be written to all those transparent pixels here. This is probably of not much practical use. Defaults to `#NOCOLOR` which means that transparent pixels will be left as they are. (V9.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nHere is a table that shows an overview which table elements can be used with the different animation formats:\n\n![animformats](https://www.hollywood-mal.com/docs/html/hollywood/img/animformats.png)\n\n`SaveAnim()` can be used both with animations buffered completely in memory or with disk-based animations.\n\nIf you want to save an animation from individual frames (e.g. a series of brushes), you can do so by using [BeginAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html), [WriteAnimFrame()](https://www.hollywood-mal.com/docs/html/hollywood/WriteAnimFrame_.html) and [FinishAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/FinishAnimStream_.html).",
    "inputsDocs": "* `id` — animation which shall be saved\n* `file$` — destination file\n* `format` — optional: which anim format to use (defaults to `#ANMFMT_GIF`)\n* `table` — optional: further arguments for save operation; see above",
    "example": "```\nSaveAnim(1, \"my_anim.gif\", #ANMFMT_GIF, {Colors = 64, Dither = True})\n```\n\nThe code above saves anim 1 as \"my_anim.gif\" in 64 colors with dithering enabled.",
    "platforms": ["All"],
    "insertText": "SaveAnim(${1:id}, ${2:file$})"
  },
  {
    "name": "ScaleAnim",
    "helpId": "ScaleAnim",
    "shortDescription": "scale an animation",
    "version": "1.0",
    "synopsis": "ScaleAnim(id, width, height[, smooth])",
    "functionDocs": "This function scales the animation specified by `id` to the desired `width` and `height`. Please note that scaling an animation on a 68k processor can take quite some time. Optionally, you can choose to have the scaled graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be scaled using anti-alias.\n\nNew in V2.0: You can pass `#KEEPASPRAT` as either `width` or `height`. Hollywood will calculate the size then automatically by taking the aspect-ratio of the anim into account.\n\nStarting with Hollywood 2.0, `width` and `height` can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — identifier of the animation scale\n* `width` — desired new width for the animation\n* `height` — desired new height for the animation\n* `smooth` — optional: whether or not anti-aliased scaling shall be used (V2.5)",
    "example": "```\nScaleAnim(1, 320, 240)\n```\n\nThe above code scales animation 1 to a format of 320x240.",
    "platforms": ["All"],
    "insertText": "ScaleAnim(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SelectAnim",
    "helpId": "SelectAnim",
    "shortDescription": "select animation frame as output device",
    "version": "4.5",
    "synopsis": "SelectAnim(id, frame[, mode, combomode])",
    "functionDocs": "This function selects the specified animation frame as the current output device. This means that all graphics data that is rendered by Hollywood will be written to this animation frame. You have to specify an animation identifier as well as the single frame that shall be used as output device.\n\nThe optional `mode` argument defaults to `#SELMODE_NORMAL` which means that only the color channels of the anim will be altered when you draw to it. The transparency channel of the anim (can be either a mask or an alpha channel) will never be altered. You can change this behaviour by using `#SELMODE_COMBO` in the optional `mode` argument. If you use this mode, every Hollywood graphics command that is called after `SelectAnim()` will draw into the color and transparency channel of the anim. If the anim does not have a transparency channel, `#SELMODE_COMBO` behaves the same as `#SELMODE_NORMAL`.\n\nStarting with Hollywood 5.0 you can use the optional `combomode` argument to specify how `#SELMODE_COMBO` should behave. If `combomode` is set to 0, the color and transparency information of all pixels in the source image are copied to the destination image in any case - even if the pixels are invisible. This is the default behaviour. If `combomode` is set to 1, only the visible pixels are copied to the destination image. This means that if the alpha value of a pixel in the source image is 0, i.e. invisible, it will not be copied to the destination image. Hollywood 6.0 introduces the new combomode 2. If you pass 2 in `combomode`, Hollywood will blend color channels and alpha channel of the source image into the destination image's color and alpha channels. When you draw the destination image later, it will look as if the two images had been drawn on top of each other consecutively. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes.\n\nAn alternative way to draw into the transparency channels of an anim is to do this separately using [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) or [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html). These two commands, however, will write data to the transparency channel only. They will not touch the color channel. So if you want both channels, color and transparency, to be affected, you need to use `SelectAnim()` with `mode` set to `#SELMODE_COMBO`.\n\nWhen you are finished with rendering to your animation and want to use your display as output device again, just call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nNote that you must not call any commands which modify your animation while it is selected as the output device. Specifically, you must not call [ScaleAnim()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleAnim_.html), [FreeAnim()](https://www.hollywood-mal.com/docs/html/hollywood/FreeAnim_.html), or [ModifyAnimFrames()](https://www.hollywood-mal.com/docs/html/hollywood/ModifyAnimFrames_.html).\n\nOnly commands that output graphics directly can be used after `SelectAnim()`. You may not call animated functions like [MoveAnim()](https://www.hollywood-mal.com/docs/html/hollywood/MoveAnim_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectAnim()` is active.\n\nThis command works only with animations buffered entirely in memory. You cannot use it for animations that are played directly from disk.",
    "inputsDocs": "* `id` — animation which shall be used as output device\n* `frame` — frame of the animation that graphics shall be drawn to\n* `mode` — optional: rendering mode to use (see above); this can be either `#SELMODE_NORMAL` or `#SELMODE_COMBO`; defaults to `#SELMODE_NORMAL`\n* `combomode` — optional: mode to use when `#SELMODE_COMBO` is active (see above); defaults to 0 (V5.0)",
    "example": "```\nSelectAnim(1, 5)\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 256, #RED)\nEndSelect()\n```\n\nThe code above draws a 320x256 rectangle to frame number 5 of animation 1.",
    "platforms": ["All"],
    "insertText": "SelectAnim(${1:id}, ${2:frame})"
  },
  {
    "name": "SetAnimFrameDelay",
    "helpId": "SetAnimFrameDelay",
    "shortDescription": "set delay after anim frame",
    "version": "4.5",
    "synopsis": "SetAnimFrameDelay(id, frame, delay)",
    "functionDocs": "This function can be used to set the delay of a frame of an existing animation. Pass the identifier of the animation as well as the frame you want to modify. The delay time has to be passed in milliseconds.",
    "inputsDocs": "* `id` — identifier of the animation to use\n* `frame` — frame you want to delay\n* `delay` — new delay time in milliseconds",
    "example": "```\nSetAnimFrameDelay(1, 5, 1500)\n```\n\nSets the delay of frame 5 of animation 1 to 1.5 seconds.",
    "platforms": ["All"],
    "insertText": "SetAnimFrameDelay(${1:id}, ${2:frame}, ${3:delay})"
  },
  {
    "name": "StopAnim",
    "helpId": "StopAnim",
    "shortDescription": "stop a playing animation (V1.0 only)",
    "version": "1.0",
    "synopsis": "StopAnim(id)",
    "functionDocs": "This function was removed in Hollywood 1.5. It can no longer be used.\n\nThis function stops the animation specified by `id`. If the animation specified by `id` is played back multiple times, the animation that was last started will be stopped by Hollywood.",
    "inputsDocs": "* `id` — identifier of the animation to stop",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "StopAnim(${1:id})"
  },
  {
    "name": "WaitAnimEnd",
    "helpId": "WaitAnimEnd",
    "shortDescription": "halt until animation has finished playing (V1.0 only)",
    "version": "1.0",
    "synopsis": "WaitAnimEnd(id)",
    "functionDocs": "Attention: This command was removed in Hollywood 1.5.\n\nThis function halts the program flow until the animation specified by `id` has finished playing. After that, the execution of your script is continued. If you need to do something while your animation is playing, use the [IsAnimPlaying()](https://www.hollywood-mal.com/docs/html/hollywood/IsAnimPlaying_.html) command in connection with a loop.",
    "inputsDocs": "* `id` — identifier of an animation that is currently playing",
    "example": "```\nPlayAnim(1,#PLAYONCE)\nWaitAnimEnd(1)\n```\n\nThe above code plays animation 1 and waits for it to finish.",
    "platforms": ["All"],
    "insertText": "WaitAnimEnd(${1:id})"
  },
  {
    "name": "WriteAnimFrame",
    "helpId": "WriteAnimFrame",
    "shortDescription": "append frame to sequential anim",
    "version": "4.5",
    "synopsis": "WriteAnimFrame(id, brush_id[, table])",
    "functionDocs": "This function can be used to append a single new frame to a sequential animation object created with [BeginAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html). The frame that shall be appended to the animation must be provided as a brush. Ideally, the brush's size should match the dimensions specified in [BeginAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html) but this function will do automatic padding if the sizes do not match.\n\nThe optional table argument allows you to configure further parameters:\n\n- `X, Y`: These two allow you to configure the position at which the brush shall be copied in the frame. This is useful when adding a frame that is smaller than the anim bounding box. You could for example center this frame in the anim then. Defaults to 0,0 which means top left corner.\n\n- `Delay`: Set this field if you want to attach a time delay to this frame. The time must be specified in milliseconds. Not all anim formats support frame delays. See the table below. Defaults to 0 which means no delay.\n\n- `Dither`: Set to `True` to enable dithering. This field is only handled when the format is palette-based and the source data is in RGB format. GIF and IFF anims always use a color palette. Defaults to `False` which means no dithering.\n\n- `Depth`: Specifies the desired frame depth. This is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 (= 2 colors) and 8 (= 256 colors). Defaults to 8. (V9.0)\n\n- `Colors`: This is an alternative to the `Depth` tag. Instead of a bit depth, you can pass how many colors the frame shall use here. Again, this is only handled when the format is palette-based and the source data is in RGB format. Valid values are between 1 and 256. Defaults to 256.\n\n- `Optimize`: Specifies whether or not Hollywood shall try to optimize this frame. Optimized saving is slower but usually leads to smaller animations. Defaults to `True`.\n\n- `FillColor`: When saving an RGB frame that has transparent pixels, you can specify an RGB color that should be written to all those transparent pixels here. This is probably of not much practical use. Defaults to `#NOCOLOR` which means that transparent pixels will be left as they are. (V9.0)\n\nHere is a table that shows an overview which table elements can be used with the different animation formats:\n\n![animformats3](https://www.hollywood-mal.com/docs/html/hollywood/img/animformats3.png)",
    "inputsDocs": "* `id` — identifier of the animation object to append to; must be obtained using [BeginAnimStream()](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html)\n* `brush_id` — identifier of brush to append to animation\n* `table` — optional: further arguments for save operation; see above",
    "example": "See [BeginAnimStream](https://www.hollywood-mal.com/docs/html/hollywood/BeginAnimStream_.html)",
    "platforms": ["All"],
    "insertText": "WriteAnimFrame(${1:id}, ${2:brush_id})"
  }
]
