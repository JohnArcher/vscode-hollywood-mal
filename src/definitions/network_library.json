[
  {
    "name": "CloseConnection",
    "helpId": "CloseConnection",
    "shortDescription": "disconnect from server",
    "version": "5.0",
    "synopsis": "CloseConnection(id)",
    "functionDocs": "This function disconnects from the server specified in `id` and closes the connection. The connection which you need to specify here must have been established by the [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html) command.",
    "inputsDocs": "* `id` — identifier of the connection that shall be terminated",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseConnection(${1:id})"
  },
  {
    "name": "CloseServer",
    "helpId": "CloseServer",
    "shortDescription": "shutdown an existing server",
    "version": "5.0",
    "synopsis": "CloseServer(id)",
    "functionDocs": "This function shuts down the server specified by the identifier argument. The server you pass here must have been created by the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) command.\n\nIt is important that you disconnect all clients from your server using the [CloseConnection()](https://www.hollywood-mal.com/docs/html/hollywood/CloseConnection_.html) command before you call `CloseServer()`.",
    "inputsDocs": "* `id` — identifier of the server to shut down",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseServer(${1:id})"
  },
  {
    "name": "CloseUDPObject",
    "helpId": "CloseUDPObject",
    "shortDescription": "close existing UDP object",
    "version": "5.0",
    "synopsis": "CloseUDPObject(id)",
    "functionDocs": "This function closes the UDP object specified in the identifier argument. The UDP object you pass here must have been created earlier by the command [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html).",
    "inputsDocs": "* `id` — identifier of the UDP object to close",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseUDPObject(${1:id})"
  },
  {
    "name": "CreateServer",
    "helpId": "CreateServer",
    "shortDescription": "open a new server",
    "version": "5.0",
    "synopsis": "[id] = CreateServer(id[, port, ip$, backlog, protocol])",
    "functionDocs": "This command can be used to establish a new server that is ready to take incoming connections on the local host. The optional argument `port` can be used to specify on which port the server should be opened. If you do not specify this argument, `CreateServer()` will choose a vacant port automatically, and you can use [GetLocalPort()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocalPort_.html) later to find out the port number of the server. In the first argument, you need to pass an identifier which is needed to refer to this server later on. Alternatively, you can pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as the first argument. In that case, `CreateServer()` will select an identifier automatically and return it to you.\n\nThe optional argument `ip$` can be used to specify a local IP address the server should be bound to. This defaults to \"*\", which means that the server will accept connections from the whole network. You can also specify \"127.0.0.1\" (or \"::1\" in IPv6) to allow only connections from the local host. Note that passing \"*\", which is also the default, might trigger the firewall on some configurations.\n\nThe optional `backlog` argument can be used to specify the maximum number of client connections that can be added to the queue. This defaults to 32.\n\nStarting with Hollywood 8.0 there is an optional new `protocol` argument which allows you to specify the Internet protocol that should be used when creating the server. This can be one of the following special constants:\n\n- `#IPV4`: Use Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Use Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: Let the host operating system determine the Internet protocol to use. You can then use [GetLocalProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocalProtocol_.html) to find out which Internet protocol the host operating system has chosen for this server. See [GetLocalProtocol](https://www.hollywood-mal.com/docs/html/hollywood/GetLocalProtocol_.html).\n\nThe `protocol` argument defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html).\n\nOnce the server has been successfully established, you must use the function [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html) to listen to the events `OnConnect`, `OnDisconnect`, and `OnReceiveData`. These events will inform you whenever a new client tries to connect to your server, or when a client sends new data (i.e. commands that you need to handle) to your server.",
    "inputsDocs": "* `id` — identifier for the new server or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `port` — optional: port to open up for this server, or 0 for automatic port selection (defaults to 0)\n* `ip$` — optional: local IP address to bind server to (defaults to \"*\")\n* `backlog` — optional: maximum number of connections that can be queued (defaults to 32)\n* `protocol` — optional: Internet protocol to use (see above for possible values); defaults to the protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html) (V8.0)",
    "resultsDocs": "* `id` — optional: identifier of the new server; this will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "platforms": ["All"],
    "insertText": "CreateServer(${1:id})"
  },
  {
    "name": "CreateUDPObject",
    "helpId": "CreateUDPObject",
    "shortDescription": "create a new UDP object",
    "version": "5.0",
    "synopsis": "[id] = CreateUDPObject(id[, port, ip$, mode, protocol])",
    "functionDocs": "This command can be used to create a new UDP object that can receive data and send data to other network participants. The optional argument `port` can be used to specify at which local port the UDP object should be created. If you do not specify this argument, `CreateUDPObject()` will choose a vacant port automatically, and you can use [GetLocalPort()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocalPort_.html) later to find out the port number of the UDP object. In the first argument, you need to pass an identifier which is needed to refer to this UDP object later on. Alternatively, you can pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as the first argument. In that case, `CreateUDPObject()` will select an identifier automatically and return it to you.\n\nStarting with Hollywood 8.0 there is a new `mode` argument which allows you to specify the type of UDP object that should be created for you. This can be one of the following predefined values:\n\n- `#UDPSERVER`: Create an UDP server object. In that case, the optional argument `ip$` can be used to specify a local IP address the UDP object should be bound to. This defaults to \"*\", which means that the server will accept connections from the whole network. You can also specify \"127.0.0.1\" (or \"::1\" in IPv6) to allow only connections from the local host. Note that passing \"*\", which is also the default, might trigger the firewall on some configurations. `#UDPSERVER` is the default mode for `CreateUDPObject()`.\n\n- `#UDPCLIENT`: Create a client UDP object. In that case, the optional arguments `ip$` and `port` must be specified to specify the server the client should be connected to. If your UDP object always sends data to the same server, it is recommended to create it as a `#UDPCLIENT` object because [SendUDPData()](https://www.hollywood-mal.com/docs/html/hollywood/SendUDPData_.html) is faster then. (V8.0)\n\n- `#UDPNONE`: Create an unconnected UDP object. In that case, the optional arguments `ip$` and `port` are ignored. Unconnected UDP objects are useful if you need to send data to different servers without being able to receive data on your own. (V8.0)\n\nAdditionally, Hollywood 8.0 introduces an optional new `protocol` argument which allows you to specify the Internet protocol that should be used by the UDP object. This can be one of the following special constants:\n\n- `#IPV4`: Use Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Use Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: Let the host operating system determine the Internet protocol to use. You can then use [GetLocalProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocalProtocol_.html) or [GetConnectionProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionProtocol_.html) to find out which Internet protocol the host operating system has chosen for the UDP object\n\nThe `protocol` argument defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html).\n\nOnce the UDP object is created, you can use the commands [SendUDPData()](https://www.hollywood-mal.com/docs/html/hollywood/SendUDPData_.html), [ReceiveUDPData()](https://www.hollywood-mal.com/docs/html/hollywood/ReceiveUDPData_.html), and the [OnReceiveUDPData](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html) event handler to communicate with other systems in the network.\n\nPlease note that UDP is an unreliable transfer protocol. It is faster than the TCP protocol but data may arrive incompletely or out of order. Thus, it is only suitable for purposes that do not depend on the integrity of the transferred data.",
    "inputsDocs": "* `id` — identifier for the new UDP object or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `port` — optional: port for this UDP object, or 0 for automatic port selection (defaults to 0); must be set for `#UDPCLIENT`\n* `ip$` — optional: IP address to bind server to (for `#UDPSERVER`) or to connect UDP object to (for `#UDPCLIENT`) (defaults to \"*\" for `#UDPSERVER`); must be set for `#UDPCLIENT`\n* `mode` — optional: desired mode for this UDP object (see above for possible values) (V8.0)\n* `protocol` — optional: Internet protocol to use (see above for possible values); defaults to the protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html) (V8.0)",
    "resultsDocs": "* `id` — optional: identifier of the new UDP object; this will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "platforms": ["All"],
    "insertText": "CreateUDPObject(${1:id})"
  },
  {
    "name": "DownloadFile",
    "helpId": "DownloadFile",
    "shortDescription": "download file via HTTP, FTP or other protocol",
    "version": "5.0",
    "synopsis": "data$, count = DownloadFile(url$[, options, func, userdata])",
    "functionDocs": "This command allows you to conveniently download a file from a network server. By default, HTTP and FTP servers are supported but Hollywood plugins may provide support for additional protocols. You have to pass the URL of the file in the `url$` argument. `DownloadFile()` will then download the file and return it as a string. Storing binary data inside strings is possible because Hollywood strings are not limited to printable characters. Instead, they can also contain control characters and the `NULL` character. The second return value indicates the size of the downloaded file in bytes.\n\nAlternatively, you can also set the `File` tag in the optional table argument named `options` to a filename. In that case, the downloaded file won't be returned as a string but it will be saved as the file specified in the `File` tag. This is recommended for bigger files because strings are obviously stored in memory so downloading a large file to a string is generally not a good idea because it will require lots of memory.\n\nThe URL passed in `url$` must begin with a protocol prefix like http:// or ftp://, and it must not contain any escaped characters. Escaping will be done by `DownloadFile()` so make sure that you pass only unescaped URLs, e.g. passing \"http://www.mysite.net/cool%20file.html\" will not work. You must specify an URL without escaped characters, so the correct version would be: \"http://www.mysite.net/cool file.html\". If you want to pass a URL that has already been escaped, you have to set the `Encoded` tag to `True` (see below). In that case, `DownloadFile()` won't do any further escaping on your URL.\n\n`DownloadFile()` also supports authentification for the HTTP and FTP protocols. In that case, username and password have to be passed after the protocol identifier in the form `username:password`, followed by an @ character and the server. Here is an example for user \"joe\" and password \"secret\": http://joe:secret@www.test.net/private/files.lha. Note that HTTP authentification support was not available before Hollywood 6.0. When downloading from an FTP server, \"anonymous\" is used as the default username and \"anonymous@anonymous.org\" as the default password. If you want to use a different login account, you have to pass the username/password combination in the URL, for example: ftp://joe:secret@ftp.test.net/pub/files.lha.\n\nThe URL you pass to this function can also contain a port number. If you want to specify a port number, you have to put it behind the host name and separate it using a colon. Here is an example for using port 1234: http://www.test.com:1234/test/image.jpg. If no port is specified, `DownloadFile()` will use port 80 for HTTP servers and port 21 for FTP servers.\n\nThe second argument can be used to specify further options for the download operation. It is a table that recognizes the following tags:\n\n- `File`: If you specify a filename in this table tag, `DownloadFile()` will stream the downloaded data directly to this file instead of returning it as a string. This is useful for very large files on the one hand, but it is also useful for other files because it saves you the hassle of having to save the string data manually to a file and set it to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) afterwards. Therefore, if you are going to save the downloaded string to a file anyway, it is more efficient to use this tag. If you decide not to use this tag, please also read below for some important information when downloading files to strings.\n\n- `TransferMode`: This tag is only supported when downloading files from an FTP source. In that case, you can use this tag to specify whether `DownloadFile()` should transfer the file in ASCII or in binary mode. For ASCII mode, specify `#FTPASCII` here. For binary mode, use `#FTPBINARY`. The default transfer mode is `#FTPBINARY`.\n\n- `Proxy`: This tag is only supported when downloading files from an HTTP source. In that case, you can specify a server here that should act as a proxy server for the connection.\n\n- `Fail404`: This tag specifies whether or not `DownloadFile()` should fail with a \"file not found\" error when you pass a URL that points to a non-existent file. Normally, when you request a non-existent file, HTTP servers will generate a special HTML page with a \"404 - file not found\" error, and send that to you instead. So you will always be getting a file even if you are requesting a non-existent file. If you do not want this behaviour, set this tag to `True`. In that case, `DownloadFile()` will fail when requesting an invalid file and you will not get any 404 error page. By default, this tag is set to `False` which means that an error page is generated. This tag is only supported for downloading files from an HTTP source.\n\n- `SilentFail`: If you set this tag to `True`, `DownloadFile()` will never throw an error but simply exit silently and return an error message in the first return value, and -1 in the second return value to indicate that an error has happened. If it is set to `False`, `DownloadFile()` will throw a system error for all errors that occur. Defaults to `False`.\n\n- `Redirect`: Specifies whether or not the web server is allowed to redirect you to a new URL. This defaults to `True` which means that redirection is allowed. This tag is only supported when downloading files from an HTTP source.\n\n- `Post`: This tag is only supported when working with a HTTP server. If this tag is specified, `DownloadFile()` will send a POST request to the HTTP server instead of a GET request. A POST request has the advantage that you can attach additional data to your request. Thus, it is often used for submitting the contents of web forms, or for uploading files via HTTP. The data that shall be attached to the POST request must be specified in this tag as a string. You can set the type of the data by using the `PostType` tag (see below).\n\n- `PostType`: This tag is only handled when the `Post` tag was also specified. If that is the case, `PostType` specifies the type of data inside the `Post` tag. The type must be passed as a MIME content type string. This tag defaults to \"application/x-www-form-urlencoded\" which is the MIME type used for submitting the contents of web forms to Perl (CGI) scripts.\n\n- `UserAgent`: This tag allows you to change the user agent that `DownloadFile()` sends to the target server. This is useful with servers that refuse to cooperate with unknown user agents. By default, `DownloadFile()` will send \"Hollywood\" in the user agent field of HTTP requests. This tag is only supported for downloading files from an HTTP source. (V5.2)\n\n- `CustomHeaders`: This tag allows you to specify a string of custom headers that should be sent to the HTTP server when making the request. This can be useful for some fine-tuned adjustments for some servers. Keep in mind that the individual header elements have to be terminated by a carriage return and a line feed. This tag is only supported when using the HTTP protocol. (V6.0)\n\n- `Encoded`: Set this tag to `True` if the URL you passed to this function has already been correctly escaped. If this tag is set to `True`, `DownloadFile()` won't escape any characters. Instead, it expects you to pass a URL that has already been correctly escaped so that it can be directly used for server requests without any additional escaping. (V6.1)\n\n- `Protocol`: This tag can be used to specify the Internet protocol that should be used when opening the connection. This can be one of the following special constants:\n\n  - `#IPV4`: Use Internet Protocol version 4 (IPv4).\n  - `#IPV6`: Use Internet Protocol version 6 (IPv6). Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n  - `#IPAUTO`: Let the host operating system determine the Internet protocol to use.\n\n  This tag defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). (V8.0)\n\n- `Adapter`: This tag allows you to specify one or more network adapters that should be asked to establish the specified connection. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V8.0)\n\n- `SSL`: Set this tag to `True` to request a connection through TLS/SSL encryption. Note that setting this tag when using Hollywood's inbuilt network adapter doesn't have any effect because Hollywood's inbuilt network adapter doesn't support TLS/SSL connections. However, there might be a network adapter provided by a plugin that supports TLS/SSL and if you set this tag to `True` Hollywood will forward your wish to have a TLS/SSL connection to the network adapter provided by the plugin. Do note, though, that you normally don't have to set this tag in case the URL's scheme already indicates an SSL connection by using a prefix such as \"https://\" or \"ftps://\". (V8.0)\n\n- `Async`: If this is set to `True`, `DownloadFile()` will operate in asynchronous mode. This means that it will return immediately, passing an asynchronous operation handle to you. You can then use this asynchronous operation handle to finish the operation by repeatedly calling [ContinueAsyncOperation()](https://www.hollywood-mal.com/docs/html/hollywood/ContinueAsyncOperation_.html) until it returns `True`. This is very useful in case your script needs to do something else while the operation is in progress, e.g. displaying a status animation or something similar. By putting `DownloadFile()` into asynchronous mode, it is easily possible for your script to do something else while the operation is being processed. See [ContinueAsyncOperation](https://www.hollywood-mal.com/docs/html/hollywood/ContinueAsyncOperation_.html). Defaults to `False`. (V9.0)\n\n- `Verbose`: This tag can be set to `True` to request detailed log information about the connection and the protocol interaction with the server. This is currently only used by Hollywood plugins so if you use Hollywood's internal network adapter, setting this tag to `True` has no effect. Plugins, however, may choose to provide extended connection information when this tag has been set to `True`. Defaults to `False`. (V9.0)\n\n- `FileAdapter`: This tag is only used if the `File` tag is set as well. In that case, `FileAdapter` allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to `default`. See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to file and network adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nThe optional parameter `func` can be used to pass a callback function which will be called from time to time by `DownloadFile()` so you can update a progress bar for example. The callback function you specify here will be called with a single argument: A table that contains more information. Here is an overview of the table fields that will be initialized before `DownloadFile()` runs your callback function:\n\n- `Action`: `#DOWNLOADFILE_STATUS`\n\n- `Count`: Contains the number of bytes that have already been downloaded.\n\n- `Total`: Contains the size of the file being downloaded.\n\n- `UserData`: Contains the value you passed in the `userdata` argument.\n\nThe callback function of type `#DOWNLOADFILE_STATUS` should normally return `False`. If it returns `True`, the download operation will be aborted.\n\nFinally, there is a fourth optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.\n\nIf you are downloading to a string, you can use the [StringToFile()](https://www.hollywood-mal.com/docs/html/hollywood/StringToFile_.html) shortcut function to convert the string returned by `DownloadFile()` to a file. Alternatively, you could use the [DefineVirtualFileFromString()](https://www.hollywood-mal.com/docs/html/hollywood/DefineVirtualFileFromString_.html) function to create a virtual file from a string source. This can be useful, for example, when you download an image file that you want to load into Hollywood using [LoadBrush()](https://www.hollywood-mal.com/docs/html/hollywood/LoadBrush_.html). By using [DefineVirtualFileFromString()](https://www.hollywood-mal.com/docs/html/hollywood/DefineVirtualFileFromString_.html) you can load this file directly into Hollywood without having to save it to a temporary file first.\n\n**Important note:** Make sure that you set the string returned by this function to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) when you no longer need it. By setting the string to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), you signal to the Hollywood garbage collector that you no longer need this string and that its memory can be freed. This is especially important for large files. If you download a large file, save it to disk and do not set its string to [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html), you will waste a lot of memory. So make sure to be careful with strings returned by `DownloadFile()`.",
    "inputsDocs": "* `url$` — URL to file that shall be downloaded\n* `options` — optional: a table containing further options for this download\n* `func` — optional: a callback function that shall be called from time to time\n* `userdata` — optional: user defined data that should be passed to callback function",
    "resultsDocs": "* `data$` — the data that was read from the network buffer or an empty string if the `File` tag was specified in the options table\n* `count` — number of bytes successfully transmitted",
    "example": "```\nDownloadFile(\"http://www.airsoftsoftwair.de/images/products/\" ..\n             \"hollywood/47_shot1.jpg\", {File = \"47_shot1.jpg\"})\n```\n\nThe code above downloads the specified file and saves it as \"47_shot1.jpg\" to the current directory.\n\n---\n\n```\nDownloadFile(\"http://www.<your server>.com/cgi-bin/formmailer.cgi\",\n             {Post = \"sender=Hollywood&mail=me@hollywood-mal.de\" ..\n             \"&message=Hello from Hollywood!\"}))\n```\n\nThe code above shows to invoke a CGI script using `DownloadFile()`. The data specified in the `Post` tag will be passed to the HTTP server using the POST method.\n\n---\n\n```\nDownloadFile(\"http://www.hollywood-mal.com/index.html\", {\n             File = \"index.html\",\n             CustomHeaders = \"Accept-Encoding: gzip, deflate\\r\\n\"})\n```\n\nThe code above downloads the specified file and sends a custom header to tell the server that it can also send the file as a gzip or flate compressed file.\n\n---\n\n```\n@REQUIRE \"hurl\"\n...\nDownloadFile(\"https://www.hollywood-mal.com/index.html\", {\n             File = \"index.html\", Adapter = \"hurl\"})\n```\n\nThe code above downloads a file using the HTTPS protocol. Since Hollywood doesn't support SSL/TLS by default, this code uses the hURL plugin for the operation because hURL supports SSL/TLS. hURL is activated by passing `hurl` in the `Adapter` tag.",
    "platforms": ["All"],
    "insertText": "DownloadFile(${1:url$})"
  },
  {
    "name": "GetConnectionIP",
    "helpId": "GetConnectionIP",
    "shortDescription": "get IP address of remote side",
    "version": "5.0",
    "synopsis": "ip$ = GetConnectionIP(id[, type])",
    "functionDocs": "This command returns the IP address of the connection object specified in `id`. This can either be the identifier of a server connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), the identifier of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html), or it can be the identifier of a UDP object created by [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html). The IP address of the remote side is returned as a string by this function.\n\nThe optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the IP of a connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), or the IP of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events that can be installed using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKUDP`: Query the IP of a UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.",
    "inputsDocs": "* `id` — connection object to query\n* `type` — optional: type of network object to query (defaults to `#NETWORKCONNECTION`) (V8.0)",
    "resultsDocs": "* `ip$` — IP address of the remote side of the connection as a string",
    "example": "```\nOpenConnection(1, \"www.airsoftsoftwair.de\", 80)\nDebugPrint(GetConnectionIP(1), GetConnectionPort(80))\nCloseConnection(1)\n```\n\nThe code above connects to www.airsoftsoftwair.de port 80 and then obtains the IP address of this server.",
    "platforms": ["All"],
    "insertText": "GetConnectionIP(${1:id})"
  },
  {
    "name": "GetConnectionPort",
    "helpId": "GetConnectionPort",
    "shortDescription": "get port number of remote side",
    "version": "5.0",
    "synopsis": "port = GetConnectionPort(id[, type])",
    "functionDocs": "This command returns the port number of the connection object specified in `id`. This can either be the identifier of a server connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), the identifier of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html), or it can be the identifier of a UDP object created by [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html).\n\nThe optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the port of a connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), or the IP of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events that can be installed using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKUDP`: Query the port of a UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.",
    "inputsDocs": "* `id` — connection object to query\n* `type` — optional: type of network object to query (defaults to `#NETWORKCONNECTION`) (V8.0)",
    "resultsDocs": "* `port` — port number of the remote side of the connection",
    "example": "See [GetConnectionIP](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionIP_.html)",
    "platforms": ["All"],
    "insertText": "GetConnectionPort(${1:id})"
  },
  {
    "name": "GetConnectionProtocol",
    "helpId": "GetConnectionProtocol",
    "shortDescription": "get protocol of remote side",
    "version": "8.0",
    "synopsis": "protocol = GetConnectionProtocol(id[, type])",
    "functionDocs": "This command returns the Internet protocol of the connection object specified in `id`. This can either be the identifier of a server connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), the identifier of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events using [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html), or it can be the identifier of a UDP object created by [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html).\n\nThe optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the protocol of a connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), or the protocol of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events that can be installed using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKUDP`: Query the protocol of a UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.\n\nThe return value will be one of the following predefined constants:\n\n- `#IPV4`: Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: The host system hasn't decided on a protocol for this network object yet.\n\n- `#IPUNKNOWN`: Network object uses an unknown protocol.",
    "inputsDocs": "* `id` — connection object to query\n* `type` — optional: type of network object to query (defaults to `#NETWORKCONNECTION`)",
    "resultsDocs": "* `protocol` — protocol of remote side of the connection",
    "platforms": ["All"],
    "insertText": "GetConnectionProtocol(${1:id})"
  },
  {
    "name": "GetHostName",
    "helpId": "GetHostName",
    "shortDescription": "return standard host name of machine",
    "version": "5.0",
    "synopsis": "host$ = GetHostName()",
    "functionDocs": "This function returns the standard host name of the machine that Hollywood is currently running on.",
    "inputsDocs": "none",
    "resultsDocs": "* `host$` — standard host name of machine",
    "platforms": ["All"],
    "insertText": "GetHostName()"
  },
  {
    "name": "GetLocalInterfaces",
    "helpId": "GetLocalInterfaces",
    "shortDescription": "get local interfaces",
    "version": "9.0",
    "synopsis": "t = GetLocalInterfaces([linklocal])",
    "functionDocs": "This function returns a list of all network interfaces that are currently available. This allows you to conveniently determine a system's local IP address. If the optional `linklocal` argument is set to `True`, link-local addresses will be included as well.\n\n`GetLocalInterfaces()` will return a table that contains a number of subtables, each describing a local interface. The following fields will be initialized in each subtable:\n\n- `Name`: The name of the interface.\n\n- `Address`: The address of the interface. Depending on the setting of the `Protocol` tag (see below), this may be either an IPv4 or IPv6 address.\n\n- `Protocol`: The protocol of the interface. This will be one of the following predefined constants:\n\n  - `#IPV4`: Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n  - `#IPV6`: Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.",
    "inputsDocs": "* `linklocal` — optional: `True` to include link-local addresses in the return table, `False` to exclude them (defaults to `False`)",
    "resultsDocs": "* `t` — table containing a list of all local interfaces",
    "example": "```\nt = GetLocalInterfaces()\nFor Local k = 0 To ListItems(t) - 1\n   NPrint(t[k].Name, t[k].Address, t[k].Protocol)\nNext\n```\n\nThe code above prints information about all available network interfaces.",
    "platforms": ["All"],
    "insertText": "GetLocalInterfaces()"
  },
  {
    "name": "GetLocalIP",
    "helpId": "GetLocalIP",
    "shortDescription": "get IP address of local side",
    "version": "5.0",
    "synopsis": "ip$ = GetLocalIP(id[, type])",
    "functionDocs": "This command returns the IP address on the local side of the network object specified in `id`. The optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the local IP of a connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), or the local IP of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events that can be installed using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKSERVER`: Query the local IP of a server established using the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) call.\n\n- `#NETWORKUDP`: Query the local IP of an UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.",
    "inputsDocs": "* `id` — network object to query\n* `type` — optional: type of the network object passed in argument 1 (defaults to `#NETWORKCONNECTION`)",
    "resultsDocs": "* `ip$` — IP address of the local side of the connection",
    "platforms": ["All"],
    "insertText": "GetLocalIP(${1:id})"
  },
  {
    "name": "GetLocalPort",
    "helpId": "GetLocalPort",
    "shortDescription": "get port number of local side",
    "version": "5.0",
    "synopsis": "port = GetLocalPort(id[, type])",
    "functionDocs": "This command returns the port number on the local side of the network object specified in `id`. The optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the local port of a connection obtained by a call to the [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), function or the local port of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKSERVER`: Query the local port of a server established using the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) call.\n\n- `#NETWORKUDP`: Query the local port of an UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.",
    "inputsDocs": "* `id` — network object to query\n* `type` — optional: type of the network object passed in argument 1 (defaults to `#NETWORKCONNECTION`)",
    "resultsDocs": "* `port` — port number of the local side of the connection",
    "platforms": ["All"],
    "insertText": "GetLocalPort(${1:id})"
  },
  {
    "name": "GetLocalProtocol",
    "helpId": "GetLocalProtocol",
    "shortDescription": "get protocol of local side",
    "version": "8.0",
    "synopsis": "protocol = GetLocalProtocol(id[, type])",
    "functionDocs": "This command returns the Internet protocol on the local side of the network object specified in `id`. The optional argument `type` specifies the type of the network object passed in argument 1. The following types are currently supported by this function:\n\n- `#NETWORKCONNECTION`: Query the local IP of a connection obtained by a call to [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), or the local IP of a client connection obtained by listening to the `OnConnect` and `OnReceiveData` events that can be installed using the command [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\n- `#NETWORKSERVER`: Query the local IP of a server established using the [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html) call.\n\n- `#NETWORKUDP`: Query the local IP of an UDP object created using the [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) call.\n\nIf you omit the optional `type` argument, it will default to type `#NETWORKCONNECTION`.\n\nThe return value will be one of the following predefined constants:\n\n- `#IPV4`: Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: The host system hasn't decided on a protocol for this network object yet.\n\n- `#IPUNKNOWN`: Network object uses an unknown protocol.",
    "inputsDocs": "* `id` — network object to query\n* `type` — optional: type of the network object passed in argument 1 (defaults to `#NETWORKCONNECTION`)",
    "resultsDocs": "* `protocol` — protocol of the local side of the connection (see above for possible return values)",
    "platforms": ["All"],
    "insertText": "GetLocalProtocol(${1:id})"
  },
  {
    "name": "GetMACAddress",
    "helpId": "GetMACAddress",
    "shortDescription": "get host system's MAC address",
    "version": "7.0",
    "synopsis": "addr$ = GetMACAddress()",
    "functionDocs": "This function returns the host system's MAC address as 6 octets separated by colons, e.g. `12:34:56:78:9A:BC`.\n\nIf the MAC address cannot be obtained, \"Unknown\" is returned.\n\nNote that on AmigaOS 3, the only TCP/IP stack that supports obtaining the MAC address is Roadshow.",
    "inputsDocs": "none",
    "resultsDocs": "* `addr$` — host system's MAC address or \"Unknown\"",
    "platforms": ["All"],
    "insertText": "GetMACAddress()"
  },
  {
    "name": "IsOnline",
    "helpId": "IsOnline",
    "shortDescription": "check if an Internet connection is available",
    "version": "5.0",
    "synopsis": "bool = IsOnline()",
    "functionDocs": "This function can be used to check whether or not an Internet connection is available. It will return `True` if connection to the Internet is possible, and `False` otherwise.",
    "inputsDocs": "none",
    "resultsDocs": "* `bool` — boolean value indicating whether or not Internet is available",
    "platforms": ["All"],
    "insertText": "IsOnline()"
  },
  {
    "name": "OpenConnection",
    "helpId": "OpenConnection",
    "shortDescription": "connect to a server",
    "version": "5.0",
    "synopsis": "[id] = OpenConnection(id, server$, port[, table])",
    "functionDocs": "This command can be used to establish a new connection to the server specified in `server$`. This can be either a host name or an IP address directly. The third argument specifies the port at which `OpenConnection()` should try to connect. In the first argument, you need to pass an identifier which is needed to refer to this connection later on. Alternatively, you can pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as the first argument. In that case, `OpenConnection()` will select an identifier automatically and return it to you.\n\nOnce the connection is successfully established, you can use [SendData()](https://www.hollywood-mal.com/docs/html/hollywood/SendData_.html) and [ReceiveData()](https://www.hollywood-mal.com/docs/html/hollywood/ReceiveData_.html) to communicate with the server. When you are finished you should call [CloseConnection()](https://www.hollywood-mal.com/docs/html/hollywood/CloseConnection_.html) to disconnect from the server.\n\nPlease note that scheme prefixes like \"http://\" or \"ftp://\" are not part of a server name. These just specify the protocol that is used to communicate with the server. So if you want to connect [http://www.airsoftsoftwair.de](http://www.airsoftsoftwair.de) you will have to specify \"www.airsoftsoftwair.de\" as the server name and 80 as the port because 80 is the standard HTTP port. See below for an example. An exception to this rule might be the case where you use the `Adapter` tag to have a network adapter establish the connection. In that case, the network adapter might ask you to specify a scheme name like \"http://\" or \"ftp://\" but it really depends on the network adapter. Hollywood's inbuilt adapter doesn't support scheme prefixes and expects you to specify the IP address or the host name directly.\n\nStarting with Hollywood 8.0, `OpenConnection()` accepts an optional table argument that can be used to specify further options. The following tags are currently recognized by the optional table argument:\n\n- `Protocol`: This tag allows you to specify the Internet protocol that should be used when opening the connection. This can be one of the following special constants:\n\n  - `#IPV4`: Use Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n  - `#IPV6`: Use Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n  - `#IPAUTO`: Let the host operating system determine the Internet protocol to use. You can then use [GetConnectionProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionProtocol_.html) to find out which Internet protocol the host operating system has chosen for this server. See [GetConnectionProtocol](https://www.hollywood-mal.com/docs/html/hollywood/GetConnectionProtocol_.html).\n\n  The `Protocol` tag defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). (V8.0)\n\n- `Adapter`: This tag allows you to specify one or more network adapters that should be asked to establish the specified connection. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V8.0)\n\n- `SSL`: Set this tag to `True` to request a connection through TLS/SSL encryption. Note that setting this tag when using Hollywood's inbuilt network adapter doesn't have any effect because Hollywood's inbuilt network adapter doesn't support TLS/SSL connections. However, there might be a network adapter provided by a plugin that supports TLS/SSL and if you set this tag to `True` Hollywood will forward your wish to have a TLS/SSL connection to the network adapter provided by the plugin. (V8.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to network adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)",
    "inputsDocs": "* `id` — identifier for the new connection or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `server$` — server to connect to\n* `port` — port to connect at\n* `table` — optional: table argument containing further options (see above) (V8.0)",
    "resultsDocs": "* `id` — optional: identifier of the new connection; this will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nOpenConnection(1, \"www.airsoftsoftwair.de\", 80)\nSendData(1, \"GET http://www.airsoftsoftwair.de/index.html \" ..\n            \"HTTP/1.0\\r\\n\\r\\n\")\na$ = ReceiveData(1, #RECEIVEALL)\nPrint(a$)\nCloseConnection(1)\n```\n\nThe code above connects to [http://www.airsoftsoftwair.de](http://www.airsoftsoftwair.de) and downloads the index HTML page.",
    "platforms": ["All"],
    "insertText": "OpenConnection(${1:id}, ${2:server$}, ${3:port})"
  },
  {
    "name": "ReceiveData",
    "helpId": "ReceiveData",
    "shortDescription": "receive data through the network",
    "version": "5.0",
    "synopsis": "data$, count, done = ReceiveData(id, mode, ...)  \ndata$, count, done = ReceiveData(id, #RECEIVEBYTES, maxbytes[, callback, userdata])  \ndata$, count, done = ReceiveData(id, #RECEIVEALL[, untilterm, callback, userdata])  \ndata$, count, done = ReceiveData(id, #RECEIVELINE[, callback, userdata])",
    "functionDocs": "This function can be used to receive data from a server or a client. If you want to receive data from a server, you need to pass an identifier obtained from [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html) to this function. If you are a server and want to retrieve data from one of your clients, you need to pass the network identifier of the respective client. You can get the identifiers of your clients by listening to the `OnConnect` event handler which you can set up by calling [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\nThe second argument specifies how much data you want to receive from the sender with this call. Currently, the following modes are supported:\n\n- `#RECEIVEBYTES`: Receive all available data but not more than the specified number of bytes. If you use this mode, you need to pass the maximum number of bytes you wish to receive in the third argument. `ReceiveData()` will then never obtain more bytes than you specified. However, it can happen that less bytes are returned in case there is not enough data available from the sender. You can find out the number of bytes obtained by looking at the second return value.\n\n- `#RECEIVEALL`: Receive all data currently available. If the optional argument `untilterm` is set to `True`, `ReceiveData()` will not return before the sender terminates the connection, thus allowing you to receive all data a sender has to offer using just a single call. If `untilterm` is set to `False`, `ReceiveData()` will only return the data that is currently available. It will not wait for additional data to arrive, but it will tell you if there is more data to be retrieved (in the third return value). The default setting for `untilterm` is `True` which means that `ReceiveData()` will read data until the sender terminates the connection.\n\n- `#RECEIVELINE`: Receive a single line of text from the sender. This mode must only be used when working with non binary data. The carriage return and the newline characters will not be included in the returned string. They are read from the network buffer but they will not be returned by `ReceiveData()` if you use `#RECEIVELINE`.\n\n`ReceiveData()` returns three values: The first return value is a string that contains the data that was received from the network or an empty string if you use a callback to handle the data or no data could be read. Please note that although the data read is returned as a string, it is not limited to text only. It can also contain binary data because Hollywood strings can handle control characters and the `NULL` character just fine. The second return value specifies how many bytes could be read from the network buffer. If this is 0, then there is currently no data available. The third return value is only useful if you use `#RECEIVEALL` transfer mode with `untilterm` set to `False`. In that case, the third return value tells you if more data is available in the network buffer. If there is more data to be read, then `done` is `False`, otherwise it will be `True`.\n\nStarting with Hollywood 6.0 there is an optional `callback` parameter that allows you to pass a callback function that should receive the data read from the server. This can be useful if you need to stream large amounts of data that cannot be efficiently stored inside a Hollywood string. The callback function could simply write the data it receives to a file, for example. Note that if you specify a callback function, `ReceiveData()` will always return an empty string. The callback function you specify will be called with a single argument: A table that contains more information. Here is an overview of the table fields that will be initialized before `ReceiveData()` runs your callback function:\n\n- `Action`: `#RECEIVEDATA_PACKET`\n\n- `Data`: The data that has been received from the server. Note that this can contain binary data.\n\n- `Count`: Contains the number of bytes in `Data`.\n\n- `Total`: Contains the total number of bytes already received.\n\n- `UserData`: Contains the value you passed in the `userdata` argument.\n\nThe callback function of type `#RECEIVEDATA_PACKET` should normally return `False`. If it returns `True`, `ReceiveData()` will abort its operations and return immediately.\n\nFinally, there is another optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.",
    "inputsDocs": "* `id` — identifier of the sender\n* `mode` — the desired transfer mode; see above for a list of currently supported transfer modes\n* `...` — further arguments depend on the specified transfer mode; see above",
    "resultsDocs": "* `data$` — the data that was read from the network buffer or an empty string if a callback is specified\n* `count` — number of bytes successfully transmitted\n* `done` — whether or not there is more data in the network buffer (only when `#RECEIVEALL` is used together with `untilterm` set to `False`)",
    "example": "See [OpenConnection](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html)",
    "platforms": ["All"],
    "insertText": "ReceiveData(${1:id}, ${2:mode})"
  },
  {
    "name": "ReceiveUDPData",
    "helpId": "ReceiveUDPData",
    "shortDescription": "receive data through UDP protocol",
    "version": "5.0",
    "synopsis": "data$, ip$, port = ReceiveUDPData(id[, size])",
    "functionDocs": "This function can be used to receive data from the UDP object specified by `id`. This UDP object must have been created using [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) earlier. The optional argument `size` can be used to specify the maximum number of bytes to receive. By default, this is set to 8192 bytes which is also the maximum number of bytes `ReceiveUDPData()` can handle. So you may set `size` to values less than 8192 bytes but not to more.\n\n`ReceiveUDPData()` returns three values: The first return value is a string containing the data received from the UDP object. The second return value contains the IP address of the sender, and the third return value contains the port number of the sender.\n\nNote that the global network timeout set using [SetNetworkTimeout()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkTimeout_.html) is currently ignored by `ReceiveUDPData()`.",
    "inputsDocs": "* `id` — identifier of the UDP object to use\n* `size` — optional: maximum number of bytes to receive (defaults to 8192 bytes)",
    "resultsDocs": "* `data$` — the data that was read from the network\n* `ip$` — IP address of the data sender\n* `port` — port number of the data sender",
    "platforms": ["All"],
    "insertText": "ReceiveUDPData(${1:id})"
  },
  {
    "name": "ResolveHostName",
    "helpId": "ResolveHostName",
    "shortDescription": "convert host name to IP address",
    "version": "8.0",
    "synopsis": "t = ResolveHostName(host$)",
    "functionDocs": "This function can be used to convert the host name specified in `host$` to an IP address. In contrast to the similar function [ToIP()](https://www.hollywood-mal.com/docs/html/hollywood/ToIP_.html), `ResolveHostName()` returns all information it can retrieve from the resolver in a table. This is especially useful if you need to get information about the available Internet protocols for the host name. Thus, this function can return multiple IP addresses for the specified host name, e.g. one IPv4 address and one IPv6 address.\n\n`ResolveHostName()` returns a table which contains a number of subtables, one for each IP address successfully resolved. Each of these subtables will have the following fields initialized:\n\n- `Address`: The IP address of the specified host name in the format of the respective Internet protocol (see below).\n\n- `Protocol`: The Internet protocol used by this IP address. This can be one of the following special values:\n\n  - `#IPV4`: Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n  - `#IPV6`: Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n  - `#IPUNKNOWN`: IP address uses an unknown protocol.",
    "inputsDocs": "* `host$` — host name to resolve",
    "resultsDocs": "* `t` — a table of tables containing all information from the resolver (see above)",
    "example": "```\nt = ResolveHostName(\"www.airsoftsoftwair.de\")\nFor Local k = 0 To ListItems(t) - 1\n    Print(t[k].address, t[k].protocol)\nNext\n```\n\nOn a Windows 10 system, the code above resolves two IP address for `www.airsoftsoftwair.de`: One IPv4 address and one IPv6 address.",
    "platforms": ["All"],
    "insertText": "ResolveHostName(${1:host$})"
  },
  {
    "name": "SendData",
    "helpId": "SendData",
    "shortDescription": "send data through the network",
    "version": "5.0",
    "synopsis": "count = SendData(id, data$)",
    "functionDocs": "This function can be used to send data to a server or a client. If you want to send data to a server, you need to pass an identifier obtained from [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html) to this function. If you are a server and want to send data to one of your clients, you need to pass the identifier of the respective client. You will receive the identifiers of your clients by listening to the `OnConnect` event handler which you can set up by calling [InstallEventHandler()](https://www.hollywood-mal.com/docs/html/hollywood/InstallEventHandler_.html).\n\nThe second argument is a string containing the data that you want to send to the recipient. Please note that although this argument is a string, it is not limited to text only. You can also send raw data with this function because Hollywood strings can handle character control codes as well as the special `NULL` character without problems.\n\nUpon return, `SendData()` will return the number of bytes that it has successfully transmitted to the recipient. This can be less than the number of bytes in `data$`.",
    "inputsDocs": "* `id` — identifier of the recipient\n* `data$` — string containing the data that should be sent",
    "resultsDocs": "* `count` — number of bytes successfully transmitted",
    "example": "See [OpenConnection](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html)",
    "platforms": ["All"],
    "insertText": "SendData(${1:id}, ${2:data$})"
  },
  {
    "name": "SendUDPData",
    "helpId": "SendUDPData",
    "shortDescription": "send data through UDP protocol",
    "version": "5.0",
    "synopsis": "count = SendUDPData(id, data$[, ip$, port])",
    "functionDocs": "This function will send the data specified in `data$` to the recipient specified by `ip$` and `port`. The data will be sent through the UDP object specified in the first argument. This UDP object must have been created by [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) before. For performance reasons, you must pass an IP address directly to this function. Passing a host name instead is not supported because it would have to be resolved first which would take too much time. `SendUDPData()` will return the number of bytes successfully transferred. This can be less than the number of bytes in `data$`.\n\nPlease note that although the data argument is a string, it is not limited to text only. You can also send binary data with this function because Hollywood strings can handle character control codes as well as the special `NULL` character without problems.\n\nStarting with Hollywood 8.0, the `ip$` and `port` arguments are not required in case the UDP object has been created as a UDP object of type `#UDPCLIENT`. In that case, the UDP object is already connected and you don't have to pass `ip$` and `port`. In fact, they are ignored for UDP objects of type `#UDPCLIENT`. See [CreateUDPObject](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html).\n\nNote that the global network timeout set using [SetNetworkTimeout()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkTimeout_.html) is currently ignored by `SendUDPData()`.",
    "inputsDocs": "* `id` — identifier of the UDP object to use\n* `data$` — string containing the data that should be sent\n* `ip$` — optional: IP address of recipient; must be specified for UDP objects of type `#UDPSERVER` and `#UDPNONE`\n* `port` — optional: port number of recipient; must be specified for UDP objects of type `#UDPSERVER` and `#UDPNONE`",
    "resultsDocs": "* `count` — number of bytes successfully transmitted",
    "platforms": ["All"],
    "insertText": "SendUDPData(${1:id}, ${2:data$})"
  },
  {
    "name": "SetNetworkProtocol",
    "helpId": "SetNetworkProtocol",
    "shortDescription": "set default network protocol",
    "version": "8.0",
    "synopsis": "SetNetworkProtocol(protocol)",
    "functionDocs": "This function can be used to set the Internet protocol to be used by functions like [OpenConnection()](https://www.hollywood-mal.com/docs/html/hollywood/OpenConnection_.html), [CreateServer()](https://www.hollywood-mal.com/docs/html/hollywood/CreateServer_.html), [CreateUDPObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateUDPObject_.html) and [DownloadFile()](https://www.hollywood-mal.com/docs/html/hollywood/DownloadFile_.html) if no explicit protocol has been requested.\n\nYou have to pass the desired default Internet protocol in the `protocol` argument. This must be one of the following special values:\n\n- `#IPV4`: Use Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Use Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: Let the host operating system determine the Internet protocol to use.\n\nDue to historical and portability reasons, `#IPV4` is the default network protocol Hollywood will use. If you want to change this default, call this function.",
    "inputsDocs": "* `protocol` — desired new default Internet protocol to use",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetNetworkProtocol(${1:protocol})"
  },
  {
    "name": "SetNetworkTimeout",
    "helpId": "SetNetworkTimeout",
    "shortDescription": "set global timeout for network functions",
    "version": "5.0",
    "synopsis": "SetNetworkTimeout(ms)",
    "functionDocs": "This function can be used to define a global timeout setting for all functions of the Hollywood network library. By default, this timeout is set to 10000 milliseconds (10 seconds). This means that if a server takes longer than 10 seconds to respond, the network library will automatically terminate the connection. Defining such a timeout is very important to make sure that network functions cannot block your whole script just because a server is down. Thus, there should always be a reasonable timeout value.\n\nNormally, it should not be necessary to use this function. In rare circumstances, however, it might be useful to modify the global timeout value. If you need to do so, just pass the desired timeout value in milliseconds to this function.",
    "inputsDocs": "* `ms` — new desired global timeout in milliseconds (defaults to 10000 milliseconds)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetNetworkTimeout(${1:ms})"
  },
  {
    "name": "ToHostName",
    "helpId": "ToHostName",
    "shortDescription": "convert IP address to host name",
    "version": "5.0",
    "synopsis": "host$ = ToHostName(ip$)",
    "functionDocs": "This function can be used to locate the host name of the specified IP address. The IP address must be specified as a string in the form of four numbers separated by colons, like this: \"10.20.30.40\". To get the IP address from a host name, use [ToIP()](https://www.hollywood-mal.com/docs/html/hollywood/ToIP_.html).",
    "inputsDocs": "* `ip$` — IP address to resolve",
    "resultsDocs": "* `host$` — resolved host name of the specified IP address",
    "platforms": ["All"],
    "insertText": "ToHostName(${1:ip$})"
  },
  {
    "name": "ToIP",
    "helpId": "ToIP",
    "shortDescription": "convert host name to IP address",
    "version": "5.0",
    "synopsis": "ip$ = ToIP(host$[, protocol])",
    "functionDocs": "This function can be used to resolve the IP address of the specified host name. The IP address of the host will be returned as a string. To get the host of an IP address, use [ToHostName()](https://www.hollywood-mal.com/docs/html/hollywood/ToHostName_.html).\n\nStarting with Hollywood 8.0, there is an optional new `protocol` argument which allows you to specify the Internet protocol that should be used for the resulting IP address. This can be one of the following special constants:\n\n- `#IPV4`: Use Internet Protocol version 4 (IPv4). IPv4 addresses are limited to 32 bits and are represented using four numbers separated by three dots, e.g. 127.0.0.1.\n\n- `#IPV6`: Use Internet Protocol version 6 (IPv6). IPv6 addresses use 128 bits and are represented by eight groups of four hexadecimal digits, e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n\n- `#IPAUTO`: Let the host operating system determine the Internet protocol to use.\n\nThe `protocol` argument defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html).\n\nTo resolve a host name with advanced functionality, take a look at the [ResolveHostName()](https://www.hollywood-mal.com/docs/html/hollywood/ResolveHostName_.html) function. See [ResolveHostName](https://www.hollywood-mal.com/docs/html/hollywood/ResolveHostName_.html).",
    "inputsDocs": "* `host$` — host name to resolve\n* `protocol` — optional: Internet protocol to use (see above for possible values); defaults to the protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html) (V8.0)",
    "resultsDocs": "* `ip$` — IP address of the specified host",
    "platforms": ["All"],
    "insertText": "ToIP(${1:host$})"
  },
  {
    "name": "UploadFile",
    "helpId": "UploadFile",
    "shortDescription": "upload file to a server",
    "version": "5.0",
    "synopsis": "s$, len = UploadFile(url$, options[, func, userdata])",
    "functionDocs": "This command allows you to conveniently upload a file to a network server. By default, `UploadFile()` supports the FTP and HTTP protocols but plugins may provide support for additional protocols. Before Hollywood 6.0 `UploadFile()` only supported FTP upload but starting with version 6.0 HTTP upload is supported as well. Since HTTP and FTP upload use two entirely different mechanisms of sending the data to the receiving server, the procedures of uploading a file using FTP and using HTTP are quite different as well.\n\nIf you want to upload a file to an FTP server with `UploadFile()`, you will have to pass the URL where the file should be stored on the FTP server as the first argument. This URL must begin with the ftp:// prefix, and it must contain a fully qualified path specification (that is, including the destination filename). The URL must not contain any escaped characters. Escaping will be done by `UploadFile()` so make sure that you pass only unescaped URLs, e.g. passing \"ftp://ftp.site.net/my%20file.zip\" will not work. You must specify an URL without escaped characters, so the correct version would be: \"ftp://ftp.site.net/my file.zip\". If you want to pass a URL that has already been escaped, you have to set the `Encoded` tag to `True` (see below). In that case, `UploadFile()` won't do any further escaping on your URL.\n\nThe file that should be uploaded to the FTP server must be specified in either the `File` or `Data` table element (see below).\n\nIf you want to upload a file to an HTTP server, you need to pass the URL of a PHP or CGI script which handles the upload. Note that `UploadFile()` only supports upload using the HTTP POST method. Upload via HTTP PUT is not supported. In addition to the URL of a PHP or CGI script, you also have to specify the parameters that should be passed to this script. These parameters are passed in the `FormData` table element (see below). The file(s) to be uploaded also have to be passed as parameters in the `FormData` table element.\n\nYou can also specify a username and password that shall be used to log into the HTTP or FTP server. When using FTP upload, \"anonymous\" is used as the default username and \"anonymous@anonymous.org\" as the default password. If you want to use a different user account, you have to pass the username/password pair in the URL. Here is an example URL for username \"johndoe\" and password \"topsecret\": ftp://johndoe:topsecret@ftp.test.net/pub/files.lha for FTP upload or http://johndoe:topsecret@www.test.com/private/upload.php for HTTP upload.\n\nThe URL you pass to this function can also contain a port number. If you want to specify a port number, you have to put it after the host name and separate it using a colon. Here is an example for using port 1234: ftp://ftp.test.net:1234/test/image.jpg. If no port is specified, `UploadFile()` will use port 21.\n\nThe second argument is a table that recognizes several options. When using FTP upload, the data to be uploaded can be specified by using either the `File` table tag or the `Data` tag. When using HTTP upload, the data to be uploaded must be specified using the `FormData` element. Here is an overview of all tags that are currently recognized by the `options` table:\n\n- `File`: For FTP uploads, the file you want to upload must be specified in this tag. In case you want to upload data from a string source, you must use the `Data` tag below. You must use either specify `File` or `Data` in every call to `UploadFile()` for FTP uploads. You must not use this tag for HTTP uploads. Use `FormData` for HTTP uploads (see below).\n\n- `Data`: For FTP uploads, this tag allows you to specify a string that will be uploaded to the location specified in argument one. The string is not limited to text only, but it can also contain binary data. If you want to upload data from a file source, you must use the `File` tag instead (see above). You must specify either `Data` or `File` in every call to `UploadFile()` for FTP uploads. You must not use this tag for HTTP uploads. Use `FormData` for HTTP uploads (see below).\n\n- `TransferMode`: This tag can be used to specify whether `UploadFile()` should transfer the file in ASCII or in binary mode. For ASCII mode, specify `#FTPASCII` here. For binary mode, use `#FTPBINARY`. The default transfer mode is `#FTPBINARY`. This tag is only supported for FTP uploads.\n\n- `SilentFail`: If you set this tag to `True`, `UploadFile()` will never throw an error but simply exit silently and return an error message in the first return value, and -1 in the second return value to indicate that an error has happened. If it is set to `False`, `UploadFile()` will throw a system error for all errors that occur. Defaults to `False`.\n\n- `FormData`: This tag is needed for HTTP uploads. It allows you to specify a table of parameters that should be passed to the PHP or CGI script which handles the upload. The file or data to be uploaded has to be passed in this table as well. You have to pass a table of tables to this argument. Every subtable describes a single script parameter. `UploadFile()` will use this table of tables to compose multipart form data request that is then sent to the HTTP server using the POST request type. The following table elements can be used in each subtable:\n\n  - `Name`: This must be set to the name of the parameter. This table element must always be provided.\n\n  - `Data`: The data that should be passed as the parameter's value. This must be set to a string. The string can also contain binary data so it is possible to pass the file data to be uploaded in this table element. Alternatively, you can also use the `File` table element to upload data from a file source. Note that you have to specify either the `Data` or the `File` tag for each subtable. If you want to use `Data` to upload file instead of form data, you also have to specify the `MIMEType` and `FileAlias` tags (see below).\n\n  - `File`: If you don't set the `Data` tag, you need to set this table element to a filename whose contents should be uploaded as part of the parameter passed in `Name`. Alternatively, you can also use the `Data` table element to upload data from a string source. Note that you have to specify either the `File` or the `Data` tag for each subtable.\n\n  - `MIMEType`: This tag allows you to set the MIME type of the data to be uploaded. This should be specified whenever the parameter subtable intends to upload a file. It must not be specified in case the parameter subtable merely passes simple form data (i.e. plain text) to the server. This tag defaults to \"application/octet-stream\" if the `File` tag has been set. If the `Data` tag has been set there is no default for the `MIMEType` tag since the `Data` tag could also contain plain form data. Thus, if you want to use the `Data` tag to upload file data, you always have to explicitly set `MIMEType` to the data's MIME type.\n\n  - `FileAlias`: If the parameter subtable intends to upload a file, this tag can be used to set a name for this file. This is usually only needed if the file data you want to upload is specified using the `Data` tag. When using the `File` tag, `UploadFile()` will simply use the name of this file and you don't have to use `FileAlias` at all, though it can be used to override the filename specified in `File`.\n\n  It is perfectly allowed to upload more than one file at once. You can use as many subtables as you need with the `FormData` table element. The resulting HTML page generated by the PHP or CGI script after the upload will be returned as a string by `UploadFile()`. (V6.0)\n\n- `CustomHeaders`: This tag allows you to specify a string of custom headers that should be sent to the HTTP server when making the request. This can be useful for some fine-tuned adjustments for some servers. Keep in mind that the individual header elements have to be terminated by a carriage return and a line feed. This tag is only supported when using the HTTP protocol. (V6.0)\n\n- `Encoded`: Set this tag to `True` if the URL you passed to this function has already been correctly escaped. If this tag is set to `True`, `UploadFile()` won't escape any characters. Instead, it expects you to pass a URL that has already been correctly escaped so that it can be directly used for server requests without any additional escaping. (V6.1)\n\n- `Protocol`: This tag can be used to specify the Internet protocol that should be used when opening the connection. This can be one of the following special constants:\n\n  - `#IPV4`: Use Internet Protocol version 4 (IPv4).\n  - `#IPV6`: Use Internet Protocol version 6 (IPv6). Note that `#IPV6` is currently unsupported on AmigaOS and compatible systems.\n  - `#IPAUTO`: Let the host operating system determine the Internet protocol to use.\n\n  This tag defaults to the default protocol type set using [SetNetworkProtocol()](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). By default, this is `#IPV4` due to historical and portability reasons. See [SetNetworkProtocol](https://www.hollywood-mal.com/docs/html/hollywood/SetNetworkProtocol_.html). (V8.0)\n\n- `Adapter`: This tag allows you to specify one or more network adapters that should be asked to establish the specified connection. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V8.0)\n\n- `SSL`: Set this tag to `True` to request a connection through TLS/SSL encryption. Note that setting this tag when using Hollywood's inbuilt network adapter doesn't have any effect because Hollywood's inbuilt network adapter doesn't support TLS/SSL connections. However, there might be a network adapter provided by a plugin that supports TLS/SSL and if you set this tag to `True` Hollywood will forward your wish to have a TLS/SSL connection to the network adapter provided by the plugin. Do note, though, that you normally don't have to set this tag in case the URL's scheme already indicates an SSL connection by using a prefix such as \"https://\" or \"ftps://\". (V8.0)\n\n- `Async`: If this is set to `True`, `UploadFile()` will operate in asynchronous mode. This means that it will return immediately, passing an asynchronous operation handle to you. You can then use this asynchronous operation handle to finish the operation by repeatedly calling [ContinueAsyncOperation()](https://www.hollywood-mal.com/docs/html/hollywood/ContinueAsyncOperation_.html) until it returns `True`. This is very useful in case your script needs to do something else while the operation is in progress, e.g. displaying a status animation or something similar. By putting `UploadFile()` into asynchronous mode, it is easily possible for your script to do something else while the operation is being processed. See [ContinueAsyncOperation](https://www.hollywood-mal.com/docs/html/hollywood/ContinueAsyncOperation_.html). Defaults to `False`. (V9.0)\n\n- `Verbose`: This tag can be set to `True` to request detailed log information about the connection and the protocol interaction with the server. This is currently only used by Hollywood plugins so if you use Hollywood's internal network adapter, setting this tag to `True` has no effect. Plugins, however, may choose to provide extended connection information when this tag has been set to `True`. Defaults to `False`. (V9.0)\n\n- `FileAdapter`: This tag is only used if the `File` tag is set as well. In that case, `FileAdapter` allows you to specify one or more file adapters that should be asked if they want to open the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to `default`. See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to file and network adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nThe optional parameter `func` can be used to pass a callback function which will be called from time to time by `UploadFile()` allowing you to update a progress bar for example. The callback function you specify here will be called with a single argument: A table that contains more information. Here is an overview of the table fields that will be initialized before `UploadFile()` runs your callback function:\n\n- `Action`: `#UPLOADFILE_STATUS`\n\n- `Count`: Contains the number of bytes that have already been uploaded.\n\n- `Total`: Contains the size of the file being uploaded.\n\n- `UserData`: Contains the value you passed in the `userdata` argument.\n\nThe callback function of type `#UPLOADFILE_STATUS` should normally return `False`. If it returns `True`, the upload operation will be aborted.\n\nNote that when using `UploadFile()` for HTTP uploading, the PHP or CGI script used to handle the upload will also generate a resulting HTML page that is usually shown by the browser after the upload has been completed. This HTML page is returned by `UploadFile()` as a string. The second return value describes the length of this HTML page in bytes. Since `UploadFile()` has to download this resulting HTML page from the server, your callback function will be called while `UploadFile()` is receiving the server's response so that you can monitor progress. The table that is passed to your callback function will be initialized as follows in that case:\n\n- `Action`: `#UPLOADFILE_RESPONSE`\n\n- `Count`: Contains the number of bytes that have already been downloaded.\n\n- `Total`: Contains the size of the file being downloaded.\n\n- `UserData`: Contains the value you passed in the `userdata` argument.\n\nThe callback function of type `#UPLOADFILE_RESPONSE` should normally return `False`. If it returns `True`, the download operation will be aborted.\n\nFinally, there is a fourth optional argument called `userdata`. The value you specify here is passed to your callback function whenever it is called. This is useful if you want to avoid working with global variables. Using the `userdata` argument you can easily pass data to your callback function. You can specify a value of any type in `userdata`. Numbers, strings, tables, and even functions can be passed as user data.",
    "inputsDocs": "* `url$` — FTP URL for destination file or URL of a PHP or CGI script on a HTTP server\n* `options` — a table containing the file/data to be uploaded as well as further options\n* `func` — optional: a callback function that shall be called from time to time\n* `userdata` — optional: user defined data that should be passed to callback function",
    "resultsDocs": "* `s$` — optional: the resulting HTML page generated by the PHP or CGI script; note that this is only passed when using HTTP upload\n* `len` — optional: the length of the resulting HTML page generated by the PHP or CGI script; note that this is only passed when using HTTP upload",
    "example": "```\nUploadFile(\"ftp://ftp.test.net/pub/image.jpg\", {File = \"image.jpg\"})\n```\n\nThe code above uploads the file \"image.jpg\" to the FTP server specified in argument 1.\n\n---\n\n```\nUploadFile(\"http://www.test.com/upload.php\", {FormData = {\n    {Name = \"uploadername\", Data = \"John Doe\"},\n    {Name = \"uploaderemail\", Data = \"john@doe.com\"},\n    {Name = \"description\", Data = \"My profile picture\"},\n    {Name = \"imagefile\", File = \"image.jpg\", MIMEType = \"image/jpeg\"}}})\n```\n\nThe code above uploads the file \"image.jpg\" to a HTTP server. Additionally, it passes the parameters `uploadername`, `uploaderemail`, and `description` to the PHP script.\n\n---\n\n```\n@REQUIRE \"hurl\"\n...\nUploadFile(\"ftp://ftp.test.net/pub/image.jpg\",\n    {File = \"image.jpg\", SSL = True, Adapter = \"hurl\"})\n```\n\nThe code above uploads a file using explicit FTPS. Since Hollywood doesn't support SSL/TLS by default, this code uses the hURL plugin for the operation because hURL supports SSL/TLS. hURL is activated by passing `hurl` in the `Adapter` tag.\n\n---\n\n```\n@REQUIRE \"hurl\"\n...\nUploadFile(\"ftps://ftp.test.net/pub/image.jpg\",\n    {File = \"image.jpg\", Adapter = \"hurl\"})\n```\n\nThe code above uploads a file using implicit FTPS. Since Hollywood doesn't support SSL/TLS by default, this code uses the hURL plugin for the operation because hURL supports SSL/TLS. hURL is activated by passing `hurl` in the `Adapter` tag.",
    "platforms": ["All"],
    "insertText": "UploadFile(${1:url$}, ${2:options})"
  }
]
