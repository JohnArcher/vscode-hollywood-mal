[
  {
    "name": "ClearSerialQueue",
    "helpId": "ClearSerialQueue",
    "shortDescription": "clear serial port read buffer",
    "version": "8.0",
    "synopsis": "ClearSerialQueue(id)",
    "functionDocs": "This function can be used to clear the read buffer of the serial port connection specified by `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nTo poll the number of bytes currently in the read buffer, use the [PollSerialQueue()](https://www.hollywood-mal.com/docs/html/hollywood/PollSerialQueue_.html) function. See [PollSerialQueue](https://www.hollywood-mal.com/docs/html/hollywood/PollSerialQueue_.html).\n\nNote that this function is currently unsupported on Android.",
    "inputsDocs": "* `id` — identifier of the serial port whose read buffer shall be cleared",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ClearSerialQueue(${1:id})"
  },
  {
    "name": "CloseSerialPort",
    "helpId": "CloseSerialPort",
    "shortDescription": "close serial port connection",
    "version": "8.0",
    "synopsis": "CloseSerialPort(id)",
    "functionDocs": "This function can be used to close the serial port connection specified by `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You should always close serial port connections as soon as you are done with them.",
    "inputsDocs": "* `id` — identifier of the serial port connection to close",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "CloseSerialPort(${1:id})"
  },
  {
    "name": "FlushSerialPort",
    "helpId": "FlushSerialPort",
    "shortDescription": "flush serial port connection",
    "version": "8.0",
    "synopsis": "FlushSerialPort(id)",
    "functionDocs": "This function can be used to flush the serial port connection specified by `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.",
    "inputsDocs": "* `id` — identifier of the serial port connection to flush",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FlushSerialPort(${1:id})"
  },
  {
    "name": "GetBaudRate",
    "helpId": "GetBaudRate",
    "shortDescription": "get baud rate for serial port connection",
    "version": "8.0",
    "synopsis": "baud = GetBaudRate(id)",
    "functionDocs": "This command can be used to get the baud rate for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#BAUD_300`: 300 bits per second.\n- `#BAUD_600`: 600 bits per second. (V9.0)\n- `#BAUD_1200`: 1200 bits per second. (V9.0)\n- `#BAUD_2400`: 2400 bits per second.\n- `#BAUD_4800`: 4800 bits per second.\n- `#BAUD_9600`: 9600 bits per second.\n- `#BAUD_19200`: 19200 bits per second.\n- `#BAUD_38400`: 38400 bits per second.\n- `#BAUD_57600`: 57600 bits per second.\n- `#BAUD_115200`: 115200 bits per second.\n- `#BAUD_460800`: 460800 bits per second.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `baud` — current baud rate as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetBaudRate(${1:id})"
  },
  {
    "name": "GetDataBits",
    "helpId": "GetDataBits",
    "shortDescription": "get data bits for serial port connection",
    "version": "8.0",
    "synopsis": "bits = GetDataBits(id)",
    "functionDocs": "This command can be used to get the number of data bits for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#DATA_5`: Use 5 data bits.\n- `#DATA_6`: Use 6 data bits.\n- `#DATA_7`: Use 7 data bits.\n- `#DATE_8`: Use 8 data bits.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `bits` — current data bits as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetDataBits(${1:id})"
  },
  {
    "name": "GetDTR",
    "helpId": "GetDTR",
    "shortDescription": "get DTR pin state for serial port connection",
    "version": "8.0",
    "synopsis": "state = GetDTR(id)",
    "functionDocs": "This command can be used to get the DTR pin state for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#DTR_ON`: DTR pin is set.\n- `#DTR_OFF`: DTR pin is cleared.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `state` — state of DTR pin as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetDTR(${1:id})"
  },
  {
    "name": "GetFlowControl",
    "helpId": "GetFlowControl",
    "shortDescription": "get flow control for serial port connection",
    "version": "8.0",
    "synopsis": "flow = GetFlowControl(id)",
    "functionDocs": "This command can be used to get the flow control for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#FLOW_OFF`: No flow control.\n- `#FLOW_HARDWARE`: Hardware flow control using CTS/RTS.\n- `#FLOW_XON_XOFF`: Software flow control using XON/XOFF handshaking.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `flow` — flow control as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetFlowControl(${1:id})"
  },
  {
    "name": "GetParity",
    "helpId": "GetParity",
    "shortDescription": "get parity mode for serial port connection",
    "version": "8.0",
    "synopsis": "parity = GetParity(id)",
    "functionDocs": "This command can be used to get the parity mode for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#PARITY_NONE`: Do not use any parity bit.\n- `#PARITY_EVEN`: Use 1 bit of even parity.\n- `#PARITY_ODD`: Use 1 bit of odd parity.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `parity` — parity bit as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetParity(${1:id})"
  },
  {
    "name": "GetRTS",
    "helpId": "GetRTS",
    "shortDescription": "get RTS pin state for serial port connection",
    "version": "8.0",
    "synopsis": "state = GetRTS(id)",
    "functionDocs": "This command can be used to get the RTS pin state for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#RTS_ON`: RTS pin is set.\n- `#RTS_OFF`: RTS pin is cleared.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `state` — state of RTS pin as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetRTS(${1:id})"
  },
  {
    "name": "GetStopBits",
    "helpId": "GetStopBits",
    "shortDescription": "get stop bits for serial port connection",
    "version": "8.0",
    "synopsis": "bits = GetStopBits(id)",
    "functionDocs": "This command can be used to get the number of stop bits for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nThe return value will be one of the following special constants:\n\n- `#STOP_1`: Use 1 stop bit.\n- `#STOP_2`: Use 2 stop bits.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use",
    "resultsDocs": "* `bits` — current stop bits as a special constant (see above)",
    "platforms": ["All"],
    "insertText": "GetStopBits(${1:id})"
  },
  {
    "name": "OpenSerialPort",
    "helpId": "OpenSerialPort",
    "shortDescription": "open serial port connection",
    "version": "8.0",
    "synopsis": "[id] = OpenSerialPort(id, portname$[, table])",
    "functionDocs": "This function can be used to open a connection to the serial port specified in `portname$` and assign the identifier `id` to the connection. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `OpenSerialPort()` will automatically choose an identifier and return it.\n\nThe name you pass in `portname$` depends on the platform your script is running on. On Windows it could be `COM1`, on Linux and macOS it could be `/dev/ttyS0` or `/dev/ttyUSB0` in case you're using a USB adapter. On AmigaOS you have to pass the serial.device unit you want to open in `portname$` and on Android it is assumed that there is only one port so `portname$` is ignored.\n\nStarting with Hollywood 9.0, `portname$` can also be a string in the format \"<devicename>:<port>\" now on AmigaOS and compatibles. This is useful in case you want `OpenSerialPort()` to open an alternative serial device instead of AmigaOS's standard `serial.device`. For example, passing \"serialpl2303.device:0\" in `portname$` will try to open `serialpl2303.device` on port 0.\n\nAdditionally, you can pass an optional table argument allowing you to set the parameters for the serial port connection. The following fields are currently recognized:\n\n- `BaudRate`: The desired baud rate for the connection. This can be one of the following special constants:\n\n  - `#BAUD_300`: 300 bits per second.\n  - `#BAUD_600`: 600 bits per second. (V9.0)\n  - `#BAUD_1200`: 1200 bits per second. (V9.0)\n  - `#BAUD_2400`: 2400 bits per second.\n  - `#BAUD_4800`: 4800 bits per second.\n  - `#BAUD_9600`: 9600 bits per second. This is the default.\n  - `#BAUD_19200`: 19200 bits per second.\n  - `#BAUD_38400`: 38400 bits per second.\n  - `#BAUD_57600`: 57600 bits per second.\n  - `#BAUD_115200`: 115200 bits per second.\n  - `#BAUD_460800`: 460800 bits per second.\n\n- `DataBits`: The desired data bits for the connection. This can be set to one of the following special constants:\n\n  - `#DATA_5`: Use 5 data bits.\n  - `#DATA_6`: Use 6 data bits.\n  - `#DATA_7`: Use 7 data bits.\n  - `#DATE_8`: Use 8 data bits. This is the default.\n\n- `StopBits`: The desired stop bits for the connection. This can be set to one of the following special constants:\n\n  - `#STOP_1`: Use 1 stop bit. This is the default.\n  - `#STOP_2`: Use 2 stop bits.\n\n- `Parity`: The desired parity mode. This can be set to one of the following special constants:\n\n  - `#PARITY_NONE`: Do not use any parity bit. This is the default.\n  - `#PARITY_EVEN`: Use 1 bit of even parity.\n  - `#PARITY_ODD`: Use 1 bit of odd parity.\n\n- `FlowControl`: The desired type of flow control to use. This can be set to one of the following special constants:\n\n  - `#FLOW_OFF`: Do not use any flow control. This is the default.\n  - `#FLOW_HARDWARE`: Use hardware flow control using CTS/RTS.\n  - `#FLOW_XON_XOFF`: Use software flow control using XON/XOFF handshaking.\n\n- `RTS`: The desired state of the RTS pin. Note that manually setting the RTS pin isn't supported on every platform. Where supported, it can be set to one of the following special constants:\n\n  - `#RTS_ON`: Set the RTS pin.\n  - `#RTS_OFF`: Clear the RTS pin.\n\n- `DTR`: The desired state of the DTR pin. Note that manually setting the DTR pin isn't supported on every platform. Where supported, it can be set to one of the following special constants:\n\n  - `#DTR_ON`: Set the DTR pin.\n  - `#DTR_OFF`: Clear the DTR pin.\n\nAs you can see above, the default configuration used by `OpenSerialPort()` is 9600/8-N-1, i.e. 9600 bps, 8 data bits, no parity bit, 1 stop bit. This is the most common configuration and should work on every platform.",
    "inputsDocs": "* `id` — identifier for the new serial connection or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `portname$` — serial port to open\n* `table` — optional: further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the serial port connection; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nOpenSerialPort(1, \"COM1\")\nWriteSerialData(1, \"Hello World!\")\nCloseSerialPort(1)\n```\n\nThe code above opens the serial port COM1 on Windows, sends the string \"Hello World!\" to the receiver and closes the serial port connection. Note that there is no guarantee that all 12 bytes could be sent to the serial port. In stable code, you would have to check the return value of [WriteSerialData()](https://www.hollywood-mal.com/docs/html/hollywood/WriteSerialData_.html) and call it again if necessary to send the remaining bytes.",
    "platforms": ["All"],
    "insertText": "OpenSerialPort(${1:id}, ${2:portname$})"
  },
  {
    "name": "PollSerialQueue",
    "helpId": "PollSerialQueue",
    "shortDescription": "poll number of bytes in read buffer",
    "version": "8.0",
    "synopsis": "n = PollSerialQueue(id)",
    "functionDocs": "This function can be used to poll the number of bytes currently in the read buffer of the serial port connection specified by `id`.  This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before.\n\nTo clear a serial port connection's read buffer, use the [ClearSerialQueue()](https://www.hollywood-mal.com/docs/html/hollywood/ClearSerialQueue_.html) command. See [ClearSerialQueue](https://www.hollywood-mal.com/docs/html/hollywood/ClearSerialQueue_.html).\n\nNote that this function is currently unsupported on Android.",
    "inputsDocs": "* `id` — identifier of the serial port whose read buffer you want to poll",
    "resultsDocs": "* `n` — number of bytes in read buffer",
    "platforms": ["All"],
    "insertText": "PollSerialQueue(${1:id})"
  },
  {
    "name": "ReadSerialData",
    "helpId": "ReadSerialData",
    "shortDescription": "read data from serial port connection",
    "version": "8.0",
    "synopsis": "data$, count = ReadSerialData(id, len[, timeout])",
    "functionDocs": "This command can be used to read `len` bytes of data from the serial port connection specified in `id`. The serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. Additionally, you can pass a duration in milliseconds in the `timeout` argument to set a timeout for the read operation. If the `timeout` parameter is specified, `ReadSerialData()` will never block for longer than the specified duration. Otherwise it will wait forever for data to arrive.\n\n`ReadSerialData()` will return the data it has read from the serial port and the length of the data in bytes. Note that this can be less than the length specified in `len`. If `ReadSerialData()` returns less bytes than you requested in `len`, you have to call `ReadSerialData()` again and again until you have received all the data you need.\n\nNote that the value returned in `count` will always be the same as the [ByteLen()](https://www.hollywood-mal.com/docs/html/hollywood/ByteLen_.html) for `data$`. The only reason for the `count` return value is a performance gain because in that way you don't have to call [ByteLen()](https://www.hollywood-mal.com/docs/html/hollywood/ByteLen_.html) to calculate the length of `data$`.\n\nTo poll the number of bytes currently in the read buffer, use the [PollSerialQueue()](https://www.hollywood-mal.com/docs/html/hollywood/PollSerialQueue_.html) function. See [PollSerialQueue](https://www.hollywood-mal.com/docs/html/hollywood/PollSerialQueue_.html).",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `len` — number of bytes to read from the serial port\n* `timeout` — optional: number of milliseconds after which to abort the operation (defaults to 0 which means to block forever until data arrives)",
    "resultsDocs": "* `data$` — the data read from the serial port\n* `count` — number of bytes read from the serial port",
    "example": "```\nOpenSerialPort(1, \"COM1\")\nPrint(ReadSerialData(1, 256))\n```\n\nThe code above will wait forever for data to arrive from the serial port. As soon as something arrives, it will return and print it. This can be less than 256 bytes. The only thing that is guaranteed is that it will never be more than 256 bytes.",
    "platforms": ["All"],
    "insertText": "ReadSerialData(${1:id}, ${2:len})"
  },
  {
    "name": "SetBaudRate",
    "helpId": "SetBaudRate",
    "shortDescription": "set baud rate for serial port connection",
    "version": "8.0",
    "synopsis": "SetBaudRate(id, baud)",
    "functionDocs": "This command can be used to set the baud rate for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired baud rate in the `baud` parameter. This must be one of the following special constants:\n\n- `#BAUD_300`: 300 bits per second.\n- `#BAUD_600`: 600 bits per second. (V9.0)\n- `#BAUD_1200`: 1200 bits per second. (V9.0)\n- `#BAUD_2400`: 2400 bits per second.\n- `#BAUD_4800`: 4800 bits per second.\n- `#BAUD_9600`: 9600 bits per second.\n- `#BAUD_19200`: 19200 bits per second.\n- `#BAUD_38400`: 38400 bits per second.\n- `#BAUD_57600`: 57600 bits per second.\n- `#BAUD_115200`: 115200 bits per second.\n- `#BAUD_460800`: 460800 bits per second.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired baud rate",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetBaudRate(${1:id}, ${2:baud})"
  },
  {
    "name": "SetDataBits",
    "helpId": "SetDataBits",
    "shortDescription": "set data bits for serial port connection",
    "version": "8.0",
    "synopsis": "SetDataBits(id, bits)",
    "functionDocs": "This command can be used to set the number of data bits for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired data bits in the `bits` parameter. This must be one of the following special constants:\n\n- `#DATA_5`: Use 5 data bits.\n- `#DATA_6`: Use 6 data bits.\n- `#DATA_7`: Use 7 data bits.\n- `#DATE_8`: Use 8 data bits.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired data bits",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetDataBits(${1:id}, ${2:bits})"
  },
  {
    "name": "SetDTR",
    "helpId": "SetDTR",
    "shortDescription": "set DTR pin state for serial port connection",
    "version": "8.0",
    "synopsis": "SetDTR(id, state)",
    "functionDocs": "This command can be used to set the DTR pin state for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired state in the `state` parameter. This must be one of the following special constants:\n\n- `#DTR_ON`: Set the DTR pin.\n- `#DTR_OFF`: Clear the DTR pin.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired DTR pin state",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetDTR(${1:id}, ${2:state})"
  },
  {
    "name": "SetFlowControl",
    "helpId": "SetFlowControl",
    "shortDescription": "set flow control for serial port connection",
    "version": "8.0",
    "synopsis": "SetFlowControl(id, flow)",
    "functionDocs": "This command can be used to set the flow control for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired flow control mode in the `flow` parameter. This must be one of the following special constants:\n\n- `#FLOW_OFF`: Do not use any flow control.\n- `#FLOW_HARDWARE`: Use hardware flow control using CTS/RTS.\n- `#FLOW_XON_XOFF`: Use software flow control using XON/XOFF handshaking.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired flow control type",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetFlowControl(${1:id}, ${2:flow})"
  },
  {
    "name": "SetParity",
    "helpId": "SetParity",
    "shortDescription": "set parity mode for serial port connection",
    "version": "8.0",
    "synopsis": "SetParity(id, parity)",
    "functionDocs": "This command can be used to set the parity mode for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired parity mode in the `parity` parameter. This must be one of the following special constants:\n\n- `#PARITY_NONE`: Do not use any parity bit.\n- `#PARITY_EVEN`: Use 1 bit of even parity.\n- `#PARITY_ODD`: Use 1 bit of odd parity.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired parity mode",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetParity(${1:id}, ${2:parity})"
  },
  {
    "name": "SetRTS",
    "helpId": "SetRTS",
    "shortDescription": "set RTS pin state for serial port connection",
    "version": "8.0",
    "synopsis": "SetRTS(id, state)",
    "functionDocs": "This command can be used to set the RTS pin state for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired state in the `state` parameter. This must be one of the following special constants:\n\n- `#RTS_ON`: Set the RTS pin.\n- `#RTS_OFF`: Clear the RTS pin.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired RTS pin state",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetRTS(${1:id}, ${2:state})"
  },
  {
    "name": "SetStopBits",
    "helpId": "SetStopBits",
    "shortDescription": "set stop bits for serial port connection",
    "version": "8.0",
    "synopsis": "SetStopBits(id, bits)",
    "functionDocs": "This command can be used to set the number of stop bits for the serial port connection specified in `id`. This serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. You have to pass the desired stop bits in the `bits` parameter. This must be one of the following special constants:\n\n- `#STOP_1`: Use 1 stop bit.\n- `#STOP_2`: Use 2 stop bits.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `baud` — desired stop bits",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetStopBits(${1:id}, ${2:bits})"
  },
  {
    "name": "WriteSerialData",
    "helpId": "WriteSerialData",
    "shortDescription": "write data to serial port connection",
    "version": "8.0",
    "synopsis": "count = WriteSerialData(id, data$[, timeout])",
    "functionDocs": "This command can be used to write the data specified in `data$` to the serial port connection specified in `id`. The serial port connection must have been opened using [OpenSerialPort()](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html) before. Additionally, you can pass a duration in milliseconds in the `timeout` argument to set a timeout for the write operation. If the `timeout` parameter is specified, `WriteSerialData()` will never block for longer than the specified duration.\n\n`WriteSerialData()` returns the number of bytes written to the serial port. Note that this can be less than the bytes in `data$`. If only parts of `data$` have been sent to the serial port, you need to call `WriteSerialData()` again to send the rest.",
    "inputsDocs": "* `id` — identifier of the serial port connection to use\n* `data$` — the data to write to the serial port\n* `timeout` — optional: number of milliseconds after which to abort the operation (defaults to 0 which means to block forever until data can be sent)",
    "resultsDocs": "* `count` — number of bytes successfully written",
    "example": "See [OpenSerialPort](https://www.hollywood-mal.com/docs/html/hollywood/OpenSerialPort_.html)",
    "platforms": ["All"],
    "insertText": "WriteSerialData(${1:id}, ${2:data$})"
  }
]
