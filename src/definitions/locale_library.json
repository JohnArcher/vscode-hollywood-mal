[
  {
    "name": "CloseCatalog",
    "helpId": "CloseCatalog",
    "shortDescription": "close an open catalog",
    "version": "1.0",
    "synopsis": "CloseCatalog()",
    "functionDocs": "This function will close the currently opened catalog. You do not really have to call this function, because Hollywood will close the catalog by itself when it terminates.",
    "inputsDocs": "none",
    "example": "See [OpenCatalog](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html)",
    "platforms": ["All"],
    "insertText": "CloseCatalog()"
  },
  {
    "name": "FormatDate",
    "helpId": "FormatDate",
    "shortDescription": "format date template",
    "version": "10.0",
    "synopsis": "d$ = FormatDate(fmt$, date$[, isdst])",
    "functionDocs": "This function formats the date passed in `date$` according to the format template passed in `fmt$` and returns the result. This allows you to convert date and time format templates returned by [GetLocaleInfo()](https://www.hollywood-mal.com/docs/html/hollywood/GetLocaleInfo_.html) to human-readable dates. The date string passed in `date$` must be in the default date and time notation used by Hollywood:\n\n```\ndd-mmm-yyyy hh:mm:ss\n```\n\nThe `dd` part is a two digit date specification (with leading zeros) and the `mmm` constituent is a string with three characters identifying the month. This can be `Jan`, `Feb`, `Mar`, `Apr`, `May`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, or `Dec`. The `yyyy` is a four digit year specification whereas `hh` specifies the hours, `mm` the minutes and `ss` the seconds.\n\nThe date template passed in `date$` can contain string literals as well the following tokens:\n\n- `%a` Abbreviated weekday name\n- `%A` Weekday name\n- `%b` Abbreviated month name\n- `%B` Month name\n- `%d` Day number with leading zeros\n- `%-d` Day number without leading zeros\n- `%H` Hour using 24-hour style with leading zeros\n- `%-H` Hour using 24-hour style without leading zeros\n- `%I` Hour using 12-hour style with leading zeros\n- `%-I` Hour using 12-hour style without leading zeros\n- `%m` Month number with leading zeros\n- `%-m` Month number without leading zeros\n- `%M` Number of minutes with leading zeros\n- `%-M` Number of minutes without leading zeros\n- `%S` Number of seconds with leading zeros\n- `%-S` Number of seconds without leading zeros\n- `%y` Year using two digits with leading zeros\n- `%-y` Year using two digits without leading zeros\n- `%Y` Year using four digits with leading zeros\n\nNote that depending on the platform Hollywood is running on some more tokens might be supported but only the ones listed above are guaranteed to work on all platforms.\n\nOnly the tokens listed above will be replaced in `fmt$`. All other characters won't be replaced and will remain as string literals in the returned string. If you want to have a percent character as a string literal in the date template string, you need to escape it by using two percent characters (%%).\n\nThe optional argument `isdst` specifies whether or not daylight saving time is active at the specified date. Normally, you don't have to specify this argument because Hollywood will automatically query this information from the timezone database. It is only necessary to pass this information in case the specified time is ambiguous, i.e. when switching from daylight saving time back to standard time, a certain period of time (typically an hour) is repeated in the night. In Germany, for example, clocks are set back from 3am to 2am when switching from daylight saving time to standard time. This means that the hour between 2am and 3am happens twice: Once in daylight saving time, once in standard time. The `isdst` argument allows you to specify which hour you are referring to.",
    "inputsDocs": "* `fmt$` â€” date template string\n* `date$` â€” date string in the Hollywood date notation\n* `isdst` â€” optional: whether or not daylight saving time is active at the specified date (defaults to -1 which means that this information should be retrieved from the local timezone database)",
    "resultsDocs": "* `d$` â€” formatted date",
    "example": "```\nd$ = FormatDate(GetLocaleInfo().DateTimeFormat, GetDate(#DATELOCAL))\nDebugPrint(d$)\n```\n\nThe code above prints the date and time formatted according to the rules of the current locale.",
    "platforms": ["All"],
    "insertText": "FormatDate(${1:fmt$}, ${2:date$})"
  },
  {
    "name": "GetCatalogString",
    "helpId": "GetCatalogString",
    "shortDescription": "get a string from a catalog",
    "version": "1.0",
    "synopsis": "s$ = GetCatalogString(id, default$)",
    "functionDocs": "This function extracts the string with the number `id` from the currently opened catalog file. If there is no open catalog, the string specified in `default$` is returned.",
    "inputsDocs": "* `id` â€” specifies which string to return (starting from 0)\n* `default$` â€” string to return if there is no open catalog or if there is no string with the specified id",
    "example": "See [OpenCatalog](https://www.hollywood-mal.com/docs/html/hollywood/OpenCatalog_.html)",
    "platforms": ["All"],
    "insertText": "GetCatalogString(${1:id}, ${2:default$})"
  },
  {
    "name": "GetCountryInfo",
    "helpId": "GetCountryInfo",
    "shortDescription": "get information about country",
    "version": "7.1",
    "synopsis": "t = GetCountryInfo(ctry)",
    "functionDocs": "This function can be used to retrieve additional information about a country. You have to pass one of Hollywood's country constants in the `ctry` argument. See [GetSystemCountry](https://www.hollywood-mal.com/docs/html/hollywood/GetSystemCountry_.html).\n\n`GetCountryInfo()` will then return a table with the following fields initialized:\n\n- `Alpha2`: Alpha-2 country code as defined by ISO 3166-1.\n\n- `Alpha3`: Alpha-3 country code as defined by ISO 3166-1.",
    "inputsDocs": "* `ctry` â€” one of the country constants defined by Hollywood (see above)",
    "resultsDocs": "* `t` â€” table containing country information",
    "example": "```\nt = GetCountryInfo(GetSystemCountry())\nPrint(t.Alpha2, t.Alpha3)\n```\n\nOn a German system, this will print \"DE\" and \"DEU\".",
    "platforms": ["All"],
    "insertText": "GetCountryInfo(${1:ctry})"
  },
  {
    "name": "GetLanguageInfo",
    "helpId": "GetLanguageInfo",
    "shortDescription": "get information about language",
    "version": "7.1",
    "synopsis": "t = GetLanguageInfo(lang)",
    "functionDocs": "This function can be used to retrieve additional information about a language. You have to pass one of Hollywood's language constants in the `lang` argument. See [GetSystemLanguage](https://www.hollywood-mal.com/docs/html/hollywood/GetSystemLanguage_.html).\n\n`GetLanguageInfo()` will then return a table with the following fields initialized:\n\n- `Code`: Two letter language code as defined by ISO 639.\n\n- `Name`: The language's ISO name.",
    "inputsDocs": "* `lang` â€” one of the language constants defined by Hollywood (see above)",
    "resultsDocs": "* `t` â€” table containing language information",
    "example": "```\nt = GetLanguageInfo(GetSystemLanguage())\nPrint(t.Code, t.Name)\n```\n\nOn a German system, this will print \"DE\" and \"german\".",
    "platforms": ["All"],
    "insertText": "GetLanguageInfo(${1:lang})"
  },
  {
    "name": "GetLocaleInfo",
    "helpId": "GetLocaleInfo",
    "shortDescription": "get information about locale",
    "version": "10.0",
    "synopsis": "t = GetLocaleInfo()",
    "functionDocs": "This function can be used to retrieve information about the currently active locale. `GetLocaleInfo()` will then return a table with the following fields initialized:\n\n- `DecimalPoint`: Contains the locale's decimal point, e.g. \".\" on an English and \",\" on a German system.\n\n- `ThousandSeparator`: Contains the locale's thousand separator, e.g. \",\" on an English and \".\" on a German system.\n\n- `Currency`: Contains the locale's default currency symbol, e.g. \"€\" on a German system.\n\n- `DateFormat`: Contains the long date format template for the current locale. See [FormatDate](https://www.hollywood-mal.com/docs/html/hollywood/FormatDate_.html).\n\n- `ShortDateFormat`: Contains the short date format template for the current locale. See [FormatDate](https://www.hollywood-mal.com/docs/html/hollywood/FormatDate_.html).\n\n- `TimeFormat`: Contains the time format template for the current locale. See [FormatDate](https://www.hollywood-mal.com/docs/html/hollywood/FormatDate_.html).\n\n- `DateTimeFormat`: Contains the combined date and time format template for the current locale. See [FormatDate](https://www.hollywood-mal.com/docs/html/hollywood/FormatDate_.html).\n\n- `Days`: Contains an array of the weekday names in the current locale, e.g. \"Monday\", \"Tuesday\", etc.\n\n- `AbDays`: Contains an array of the abbreviated weekday names in the current locale, e.g. \"Mon\", \"Tue\", etc.\n\n- `Months`: Contains an array of the month names in the current locale, e.g. \"January\", \"February\", etc.\n\n- `AbMonths`: Contains an array of the abbreviated month names in the current locale, e.g. \"Jan\", \"Feb\", etc.\n\n- `Language`: The language name in the locale's language, e.g. \"deutsch\" on a German system. Note that the exact string you get here depends on the host OS so this is not really portable.",
    "inputsDocs": "none",
    "resultsDocs": "* `t` â€” table containing locale information",
    "example": "```\nd$ = FormatDate(GetLocaleInfo().DateTimeFormat, GetDate(#DATELOCAL))\nDebugPrint(d$)\n```\n\nThe code above prints the date and time formatted according to the rules of the current locale.",
    "platforms": ["All"],
    "insertText": "GetLocaleInfo()"
  },
  {
    "name": "GetSystemCountry",
    "helpId": "GetSystemCountry",
    "shortDescription": "retrieve current user's country",
    "version": "5.0",
    "synopsis": "ctry = GetSystemCountry()",
    "functionDocs": "This function can be used to retrieve the country setting of the current system. The following countries are currently supported:\n\n```\n#COUNTRY_UK (0)\n#COUNTRY_USA (1)\n#COUNTRY_AUSTRALIA (2)\n#COUNTRY_BELGIUM (3)\n#COUNTRY_BULGARIA (4)\n#COUNTRY_BRAZIL (5)\n#COUNTRY_CANADA (6)\n#COUNTRY_CZECHREPUBLIC (7)\n#COUNTRY_DENMARK (8)\n#COUNTRY_GERMANY (9)\n#COUNTRY_SPAIN (10)\n#COUNTRY_FRANCE (11)\n#COUNTRY_GREECE (12)\n#COUNTRY_ITALY (13)\n#COUNTRY_LIECHTENSTEIN (14)\n#COUNTRY_LITHUANIA (15)\n#COUNTRY_LUXEMBOURG (16)\n#COUNTRY_HUNGARY (17)\n#COUNTRY_MALTA (18)\n#COUNTRY_MONACO (19)\n#COUNTRY_NETHERLANDS (20)\n#COUNTRY_NORWAY (21)\n#COUNTRY_POLAND (22)\n#COUNTRY_PORTUGAL (23)\n#COUNTRY_ROMANIA (24)\n#COUNTRY_RUSSIA (25)\n#COUNTRY_SANMARINO (26)\n#COUNTRY_SLOVAKIA (27)\n#COUNTRY_SLOVENIA (28)\n#COUNTRY_SWITZERLAND (29)\n#COUNTRY_FINLAND (30)\n#COUNTRY_SWEDEN (31)\n#COUNTRY_TURKEY (32)\n#COUNTRY_IRELAND (33)\n#COUNTRY_AUSTRIA (34)\n#COUNTRY_ICELAND (35)\n#COUNTRY_ANDORRA (36)\n#COUNTRY_UKRAINE (37)\n#COUNTRY_UNKNOWN (38)\n#COUNTRY_AFGHANISTAN (39)\n#COUNTRY_ALANDISLANDS (40)\n#COUNTRY_ALBANIA (41)\n#COUNTRY_ALGERIA (42)\n#COUNTRY_AMERICANSAMOA (43)\n#COUNTRY_ANGOLA (44)\n#COUNTRY_ANGUILLA (45)\n#COUNTRY_ANTARCTICA (46)\n#COUNTRY_ANTIGUAANDBARBUDA (47)\n#COUNTRY_ARGENTINA (48)\n#COUNTRY_ARMENIA (49)\n#COUNTRY_ARUBA (50)\n#COUNTRY_AZERBAIJAN (51)\n#COUNTRY_BAHAMAS (52)\n#COUNTRY_BAHRAIN (53)\n#COUNTRY_BANGLADESH (54)\n#COUNTRY_BARBADOS (55)\n#COUNTRY_BELARUS (56)\n#COUNTRY_BELIZE (57)\n#COUNTRY_BENIN (58)\n#COUNTRY_BERMUDA (59)\n#COUNTRY_BHUTAN (60)\n#COUNTRY_BOLIVIA (61)\n#COUNTRY_BESISLANDS (62)\n#COUNTRY_BOSNIAANDHERZEGOVINA (63)\n#COUNTRY_BOTSWANA (64)\n#COUNTRY_BOUVETISLAND (65)\n#COUNTRY_BRUNEI (66)\n#COUNTRY_BURKINAFASO (67)\n#COUNTRY_BURUNDI (68)\n#COUNTRY_CAMBODIA (69)\n#COUNTRY_CAMEROON (70)\n#COUNTRY_CAPEVERDE (71)\n#COUNTRY_CAYMANISLANDS (72)\n#COUNTRY_CENTRALAFRICANREPUBLIC (73)\n#COUNTRY_CHAD (74)\n#COUNTRY_CHILE (75)\n#COUNTRY_CHINA (76)\n#COUNTRY_CHRISTMASISLAND (77)\n#COUNTRY_COCOSISLANDS (78)\n#COUNTRY_COLOMBIA (79)\n#COUNTRY_COMOROS (80)\n#COUNTRY_CONGO (81)\n#COUNTRY_COOKISLANDS (82)\n#COUNTRY_COSTARICA (83)\n#COUNTRY_IVORYCOAST (84)\n#COUNTRY_CROATIA (85)\n#COUNTRY_CUBA (86)\n#COUNTRY_CURACAO (87)\n#COUNTRY_CYPRUS (88)\n#COUNTRY_DJIBOUTI (89)\n#COUNTRY_DOMINICA (90)\n#COUNTRY_DOMINICANREPUBLIC (91)\n#COUNTRY_DRCONGO (92)\n#COUNTRY_ECUADOR (93)\n#COUNTRY_EGYPT (94)\n#COUNTRY_ELSALVADOR (95)\n#COUNTRY_EQUATORIALGUINEA (96)\n#COUNTRY_ERITREA (97)\n#COUNTRY_ESTONIA (98)\n#COUNTRY_ETHIOPIA (99)\n#COUNTRY_FALKLANDISLANDS (100)\n#COUNTRY_FAROEISLANDS (101)\n#COUNTRY_FIJI (102)\n#COUNTRY_FRENCHGUIANA (103)\n#COUNTRY_FRENCHPOLYNESIA (104)\n#COUNTRY_GABON (105)\n#COUNTRY_GAMBIA (106)\n#COUNTRY_GEORGIA (107)\n#COUNTRY_GHANA (108)\n#COUNTRY_GIBRALTAR (109)\n#COUNTRY_GREENLAND (110)\n#COUNTRY_GRENADA (111)\n#COUNTRY_GUADELOUPE (112)\n#COUNTRY_GUAM (113)\n#COUNTRY_GUATEMALA (114)\n#COUNTRY_GUERNSEY (115)\n#COUNTRY_GUINEA (116)\n#COUNTRY_GUINEABISSAU (117)\n#COUNTRY_GUYANA (118)\n#COUNTRY_HAITI (119)\n#COUNTRY_HOLYSEE (120)\n#COUNTRY_HONDURAS (121)\n#COUNTRY_HONGKONG (122)\n#COUNTRY_INDIA (123)\n#COUNTRY_INDONESIA (124)\n#COUNTRY_IRAN (125)\n#COUNTRY_IRAQ (126)\n#COUNTRY_ISLEOFMAN (127)\n#COUNTRY_ISRAEL (128)\n#COUNTRY_JAMAICA (129)\n#COUNTRY_JAPAN (130)\n#COUNTRY_JERSEY (131)\n#COUNTRY_JORDAN (132)\n#COUNTRY_KAZAKHSTAN (133)\n#COUNTRY_KENYA (134)\n#COUNTRY_KIRIBATI (135)\n#COUNTRY_NORTHKOREA (136)\n#COUNTRY_SOUTHKOREA (137)\n#COUNTRY_KUWAIT (138)\n#COUNTRY_KYRGYZSTAN (139)\n#COUNTRY_LAOS (140)\n#COUNTRY_LATVIA (141)\n#COUNTRY_LEBANON (142)\n#COUNTRY_LESOTHO (143)\n#COUNTRY_LIBERIA (144)\n#COUNTRY_LIBYA (145)\n#COUNTRY_MACAO (146)\n#COUNTRY_MACEDONIA (147)\n#COUNTRY_MADAGASCAR (148)\n#COUNTRY_MALAWI (149)\n#COUNTRY_MALAYSIA (150)\n#COUNTRY_MALDIVES (151)\n#COUNTRY_MALI (152)\n#COUNTRY_MARSHALLISLANDS (153)\n#COUNTRY_MARTINIQUE (154)\n#COUNTRY_MAURITANIA (155)\n#COUNTRY_MAURITIUS (156)\n#COUNTRY_MAYOTTE (157)\n#COUNTRY_MEXICO (158)\n#COUNTRY_MICRONESIA (159)\n#COUNTRY_MOLDOVA (160)\n#COUNTRY_MONGOLIA (161)\n#COUNTRY_MONTENEGRO (162)\n#COUNTRY_MONTSERRAT (163)\n#COUNTRY_MOROCCO (164)\n#COUNTRY_MOZAMBIQUE (165)\n#COUNTRY_MYANMAR (166)\n#COUNTRY_NAMIBIA (167)\n#COUNTRY_NAURU (168)\n#COUNTRY_NEPAL (169)\n#COUNTRY_NEWCALEDONIA (170)\n#COUNTRY_NEWZEALAND (171)\n#COUNTRY_NICARAGUA (172)\n#COUNTRY_NIGER (173)\n#COUNTRY_NIGERIA (174)\n#COUNTRY_NIUE (175)\n#COUNTRY_NORFOLKISLAND (176)\n#COUNTRY_OMAN (177)\n#COUNTRY_PAKISTAN (178)\n#COUNTRY_PALAU (179)\n#COUNTRY_PALESTINE (180)\n#COUNTRY_PANAMA (181)\n#COUNTRY_PAPUANEWGUINEA (182)\n#COUNTRY_PARAGUAY (183)\n#COUNTRY_PERU (184)\n#COUNTRY_PHILIPPINES (185)\n#COUNTRY_PITCAIRN (186)\n#COUNTRY_PUERTORICO (187)\n#COUNTRY_QATAR (188)\n#COUNTRY_REUNION (189)\n#COUNTRY_RWANDA (190)\n#COUNTRY_SAINTBARTHELEMY (191)\n#COUNTRY_SAINTHELENA (192)\n#COUNTRY_SAINTKITTSANDNEVIS (193)\n#COUNTRY_SAINTLUCIA (194)\n#COUNTRY_SAINTVINCENT (195)\n#COUNTRY_SAMOA (196)\n#COUNTRY_SAOTOMEANDPRINCIPE (197)\n#COUNTRY_SAUDIARABIA (198)\n#COUNTRY_SENEGAL (199)\n#COUNTRY_SERBIA (200)\n#COUNTRY_SEYCHELLES (201)\n#COUNTRY_SIERRALEONE (202)\n#COUNTRY_SINGAPORE (203)\n#COUNTRY_SOLOMONISLANDS (204)\n#COUNTRY_SOMALIA (205)\n#COUNTRY_SOUTHAFRICA (206)\n#COUNTRY_SOUTHSUDAN (207)\n#COUNTRY_SRILANKA (208)\n#COUNTRY_SUDAN (209)\n#COUNTRY_SURINAME (210)\n#COUNTRY_SWAZILAND (211)\n#COUNTRY_SYRIA (212)\n#COUNTRY_TAIWAN (213)\n#COUNTRY_TAJIKISTAN (214)\n#COUNTRY_TANZANIA (215)\n#COUNTRY_THAILAND (216)\n#COUNTRY_TIMOR (217)\n#COUNTRY_TOGO (218)\n#COUNTRY_TONGA (219)\n#COUNTRY_TRINIDADANDTOBAGO (220)\n#COUNTRY_TUNISIA (221)\n#COUNTRY_TURKMENISTAN (222)\n#COUNTRY_TUVALU (223)\n#COUNTRY_UGANDA (224)\n#COUNTRY_UAE (225)\n#COUNTRY_URUGUAY (226)\n#COUNTRY_UZBEKISTAN (227)\n#COUNTRY_VANUATU (228)\n#COUNTRY_VENEZUELA (229)\n#COUNTRY_VIETNAM (230)\n#COUNTRY_YEMEN (231)\n#COUNTRY_ZAMBIA (232)\n```",
    "inputsDocs": "none",
    "resultsDocs": "* `ctry` â€” country setting of current user",
    "platforms": ["All"],
    "insertText": "GetSystemCountry()"
  },
  {
    "name": "GetSystemLanguage",
    "helpId": "GetSystemLanguage",
    "shortDescription": "retrieve current user's language",
    "version": "5.0",
    "synopsis": "lang = GetSystemLanguage()",
    "functionDocs": "This function can be used to retrieve the default language of the current user. The following languages are currently supported:\n\n```\n#LANGUAGE_ENGLISH (0)\n#LANGUAGE_GERMAN (1)\n#LANGUAGE_DUTCH (2)\n#LANGUAGE_ITALIAN (3)\n#LANGUAGE_FRENCH (4)\n#LANGUAGE_SPANISH (5)\n#LANGUAGE_PORTUGUESE (6)\n#LANGUAGE_SWEDISH (7)\n#LANGUAGE_DANISH (8)\n#LANGUAGE_FINNISH (9)\n#LANGUAGE_NORWEGIAN (10)\n#LANGUAGE_POLISH (11)\n#LANGUAGE_HUNGARIAN (12)\n#LANGUAGE_GREEK (13)\n#LANGUAGE_CZECH (14)\n#LANGUAGE_TURKISH (15)\n#LANGUAGE_CROATIAN (16)\n#LANGUAGE_RUSSIAN (17)\n#LANGUAGE_UNKNOWN (18)\n#LANGUAGE_ABKHAZIAN (19)\n#LANGUAGE_AFAR (20)\n#LANGUAGE_AFRIKAANS (21)\n#LANGUAGE_AKAN (22)\n#LANGUAGE_ALBANIAN (23)\n#LANGUAGE_AMHARIC (24)\n#LANGUAGE_ARABIC (25)\n#LANGUAGE_ARAGONESE (26)\n#LANGUAGE_ARMENIAN (27)\n#LANGUAGE_ASSAMESE (28)\n#LANGUAGE_AVARIC (29)\n#LANGUAGE_AVESTAN (30)\n#LANGUAGE_AYMARA (31)\n#LANGUAGE_AZERBAIJANI (32)\n#LANGUAGE_BAMBARA (33)\n#LANGUAGE_BASHKIR (34)\n#LANGUAGE_BASQUE (35)\n#LANGUAGE_BELARUSIAN (36)\n#LANGUAGE_BENGALI (37)\n#LANGUAGE_BIHARI (38)\n#LANGUAGE_BISLAMA (39)\n#LANGUAGE_BOSNIAN (40)\n#LANGUAGE_BRETON (41)\n#LANGUAGE_BULGARIAN (42)\n#LANGUAGE_BURMESE (43)\n#LANGUAGE_CATALAN (44)\n#LANGUAGE_CHAMORRO (45)\n#LANGUAGE_CHECHEN (46)\n#LANGUAGE_CHICHEWA (47)\n#LANGUAGE_CHINESE (48)\n#LANGUAGE_CHUVASH (49)\n#LANGUAGE_CORNISH (50)\n#LANGUAGE_CORSICAN (51)\n#LANGUAGE_CREE (52)\n#LANGUAGE_DIVEHI (53)\n#LANGUAGE_DZONGKHA (54)\n#LANGUAGE_ESPERANTO (55)\n#LANGUAGE_ESTONIAN (56)\n#LANGUAGE_EWE (57)\n#LANGUAGE_FAROESE (58)\n#LANGUAGE_FIJIAN (59)\n#LANGUAGE_FULAH (60)\n#LANGUAGE_GALICIAN (61)\n#LANGUAGE_GEORGIAN (62)\n#LANGUAGE_GREENLANDIC (63)\n#LANGUAGE_GUARANI (64)\n#LANGUAGE_GUJARATI (65)\n#LANGUAGE_HAITIAN (66)\n#LANGUAGE_HAUSA (67)\n#LANGUAGE_HEBREW (68)\n#LANGUAGE_HERERO (69)\n#LANGUAGE_HINDI (70)\n#LANGUAGE_HIRIMOTU (71)\n#LANGUAGE_INTERLINGUA (72)\n#LANGUAGE_INDONESIAN (73)\n#LANGUAGE_INTERLINGUE (74)\n#LANGUAGE_IRISH (75)\n#LANGUAGE_IGBO (76)\n#LANGUAGE_INUPIAQ (77)\n#LANGUAGE_IDO (78)\n#LANGUAGE_ICELANDIC (79)\n#LANGUAGE_INUKTITUT (80)\n#LANGUAGE_JAPANESE (81)\n#LANGUAGE_JAVANESE (82)\n#LANGUAGE_KANNADA (83)\n#LANGUAGE_KANURI (84)\n#LANGUAGE_KASHMIRI (85)\n#LANGUAGE_KAZAKH (86)\n#LANGUAGE_CENTRALKHMER (87)\n#LANGUAGE_KIKUYU (88)\n#LANGUAGE_KINYARWANDA (89)\n#LANGUAGE_KIRGHIZ (90)\n#LANGUAGE_KOMI (91)\n#LANGUAGE_KONGO (92)\n#LANGUAGE_KOREAN (93)\n#LANGUAGE_KURDISH (94)\n#LANGUAGE_KUANYAMA (95)\n#LANGUAGE_LATIN (96)\n#LANGUAGE_LUXEMBOURGISH (97)\n#LANGUAGE_GANDA (98)\n#LANGUAGE_LIMBURGAN (99)\n#LANGUAGE_LINGALA (100)\n#LANGUAGE_LAO (101)\n#LANGUAGE_LITHUANIAN (102)\n#LANGUAGE_LUBAKATANGA (103)\n#LANGUAGE_LATVIAN (104)\n#LANGUAGE_MANX (105)\n#LANGUAGE_MACEDONIAN (106)\n#LANGUAGE_MALAGASY (107)\n#LANGUAGE_MALAY (108)\n#LANGUAGE_MALAYALAM (109)\n#LANGUAGE_MALTESE (110)\n#LANGUAGE_MAORI (111)\n#LANGUAGE_MARATHI (112)\n#LANGUAGE_MARSHALLESE (113)\n#LANGUAGE_MONGOLIAN (114)\n#LANGUAGE_NAURU (115)\n#LANGUAGE_NAVAJO (116)\n#LANGUAGE_NORTHNDEBELE (117)\n#LANGUAGE_NEPALI (118)\n#LANGUAGE_NDONGA (119)\n#LANGUAGE_NORWEGIANBOKMAL (120)\n#LANGUAGE_NORWEGIANNYNORSK (121)\n#LANGUAGE_SICHUANYI (122)\n#LANGUAGE_SOUTHNDEBELE (123)\n#LANGUAGE_OCCITAN (124)\n#LANGUAGE_OJIBWA (125)\n#LANGUAGE_CHURCHSLAVIC (126)\n#LANGUAGE_OROMO (127)\n#LANGUAGE_ORIYA (128)\n#LANGUAGE_OSSETIAN (129)\n#LANGUAGE_PANJABI (130)\n#LANGUAGE_PALI (131)\n#LANGUAGE_PERSIAN (132)\n#LANGUAGE_PASHTO (133)\n#LANGUAGE_QUECHUA (134)\n#LANGUAGE_ROMANSH (135)\n#LANGUAGE_RUNDI (136)\n#LANGUAGE_ROMANIAN (137)\n#LANGUAGE_SANSKRIT (138)\n#LANGUAGE_SARDINIAN (139)\n#LANGUAGE_SINDHI (140)\n#LANGUAGE_NORTHERNSAMI (141)\n#LANGUAGE_SAMOAN (142)\n#LANGUAGE_SANGO (143)\n#LANGUAGE_SERBIAN (144)\n#LANGUAGE_GAELIC (145)\n#LANGUAGE_SHONA (146)\n#LANGUAGE_SINHALA (147)\n#LANGUAGE_SLOVAK (148)\n#LANGUAGE_SLOVENIAN (149)\n#LANGUAGE_SOMALI (150)\n#LANGUAGE_SOUTHERNSOTHO (151)\n#LANGUAGE_SUNDANESE (152)\n#LANGUAGE_SWAHILI (153)\n#LANGUAGE_SWATI (154)\n#LANGUAGE_TAMIL (155)\n#LANGUAGE_TELUGU (156)\n#LANGUAGE_TAJIK (157)\n#LANGUAGE_THAI (158)\n#LANGUAGE_TIGRINYA (159)\n#LANGUAGE_TIBETAN (160)\n#LANGUAGE_TURKMEN (161)\n#LANGUAGE_TAGALOG (162)\n#LANGUAGE_TSWANA (163)\n#LANGUAGE_TONGA (164)\n#LANGUAGE_TSONGA (165)\n#LANGUAGE_TATAR (166)\n#LANGUAGE_TWI (167)\n#LANGUAGE_TAHITIAN (168)\n#LANGUAGE_UIGHUR (169)\n#LANGUAGE_UKRAINIAN (170)\n#LANGUAGE_URDU (171)\n#LANGUAGE_UZBEK (172)\n#LANGUAGE_VENDA (173)\n#LANGUAGE_VIETNAMESE (174)\n#LANGUAGE_WALLOON (175)\n#LANGUAGE_WELSH (176)\n#LANGUAGE_WOLOF (177)\n#LANGUAGE_WESTERNFRISIAN (178)\n#LANGUAGE_XHOSA (179)\n#LANGUAGE_YIDDISH (180)\n#LANGUAGE_YORUBA (181)\n#LANGUAGE_ZHUANG (182)\n#LANGUAGE_ZULU (183)\n```",
    "inputsDocs": "none",
    "resultsDocs": "* `lang` â€” default language of current user",
    "platforms": ["All"],
    "insertText": "GetSystemLanguage()"
  },
  {
    "name": "OpenCatalog",
    "helpId": "OpenCatalog",
    "shortDescription": "open a locale catalog",
    "version": "1.0",
    "synopsis": "OpenCatalog(name$[, version])",
    "functionDocs": "This function tries to open the catalog specified by `name$` in the user's language. If a catalog in the user's language does not exist, this function will not fail. You have to specify alternative English strings in the [GetCatalogString()](https://www.hollywood-mal.com/docs/html/hollywood/GetCatalogString_.html) function that will be used if there is no catalog in the user's language.\n\nBy default, Hollywood will search for catalogs inside a sub-directory named \"Catalogs\" inside the current directory. For example, if the current user's language is `#LANGUAGE_GERMAN` and you try to open \"MyProgram.catalog\" using `OpenCatalog()`, Hollywood will look in the following places for the catalog:\n\n```\n<current-directory>/Catalogs/deutsch/MyProgram.catalog\n<current-directory>/Catalogs/german/MyProgram.catalog\n```\n\nIf the current user's language is `#LANGUAGE_FRENCH`, Hollywood will look in these places for the catalog:\n\n```\n<current-directory>/Catalogs/français/MyProgram.catalog\n<current-directory>/Catalogs/french/MyProgram.catalog\n```\n\nNote that on AmigaOS and compatibles, Hollywood will also scan Locale:Catalogs for the catalog.\n\nNote that it is recommended to use international names for the language sub-directory, i.e. \"german\" instead of \"deutsch\" and \"french\" instead of \"français\". The native names are only supported for compatibility reasons with AmigaOS-based systems.\n\nThe catalog specified in `name$` can be either in the `IFF CTLG` format developed by Commodore, or it can be in a platform-neutral format defined by Hollywood. It is recommended to use Hollywood's platform-neutral format because `IFF CTLG` doesn't support Unicode and has some other restrictions and potential compatibility issues. See [Catalog format](https://www.hollywood-mal.com/docs/html/hollywood/CatalogFormatNote_.html).\n\nThis command is also available from the preprocessor. Use [@CATALOG](https://www.hollywood-mal.com/docs/html/hollywood/atCATALOG_.html) to load catalogs from the preprocessor.",
    "inputsDocs": "* `name$` â€” catalog to open\n* `version` â€” optional: version that the catalog must have at least; if omitted this function will accept any version",
    "example": "```\nOpenCatalog(\"Hollywood.catalog\")\n\n; this is our default English catalog\ndef$ = {}\ndef$[0] = \"Welcome to Hollywood!\"\ndef$[1] = \"Written by Andreas Falkenhahn\"\ndef$[2] = \"What do you want to do?\"\n\n; if Hollywood.catalog is not available in the\n; user's language; the English strings will be\n; used\nFor k = 0 To 2\n   c$[k] = GetCatalogString(k, def$[k])\nNext\n\nCloseCatalog()\n```\n\nThe code above opens \"Hollywood.catalog\" and prints the first three entries from that catalog.",
    "platforms": ["All"],
    "insertText": "OpenCatalog(${1:name$})"
  }
]
