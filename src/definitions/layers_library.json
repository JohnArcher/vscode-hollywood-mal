[
  {
    "name": "AddMove",
    "helpId": "AddMove",
    "shortDescription": "add object to move list",
    "version": "1.5",
    "synopsis": "[id] = AddMove(id, type, sourceid[, par1, par2, par3])",
    "functionDocs": "This function adds an object to the move list specified by `id`. If the move list is not existing yet, it is created by this function. You can also pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id` which will cause `AddMove()` to create a new move list in any case and return its id. Move lists are used for optimized drawing using DoMove(). The optional parameters `par1`, `par2` and `par3` specify different things depending on which object type you passed over.\n\nThe following types are currently supported by `AddMove()`:\n\n- `#BRUSH` Adds the brush with id `sourceid` to the move list; `par1` specifies x-position and `par2` the y-position for the brush; `par3` is not used\n\n- `#HIDEBRUSH` Hides the brush with id specified by `sourceid`; optional parameters are not used\n\n- `#HIDELAYER` Hides the layer specified by `sourceid`; optional parameters are not used\n\n- `#INSERTBRUSH` Inserts the brush specified by `sourceid` into the layer position specified by `par3`; `par1` specifies the x-position for the brush and `par2` the y-position; See [InsertLayer](https://www.hollywood-mal.com/docs/html/hollywood/InsertLayer_.html).\n\n- `#LAYER` Adds the layer specified by `sourceid` to the move list; `par1` specifies the x-position for the layer, `par2` the y-position; new in Hollywood 4.0: `par3` can be used to specify a visibility mode: 0 means \"show layer\", 1 means \"hide layer\", and 2 means \"keep current visibility setting\" (i.e. layer stays hidden if it is currently hidden); `par3` defaults to 0 which means always show the layer even if it is currently hidden\n\n- `#NEXTFRAME` Displays a new frame of an anim layer; `par1` specifies the new x-position for the layer, `par2` the y-position; `par3` specifies the frame to be displayed; specify 0 to display the next frame, -1 to display the last frame of the animation (V2.0)\n\n- `#NEXTFRAME2` Same as `#NEXTFRAME` but takes a layer id as `sourceid`; this makes it possible to address anim layers directly; `par1` specifies the new x-position for the layer, `par2` the y-position; `par3` specifies the frame to be displayed; specify 0 to display the next frame, -1 to display the last frame of the animation (V2.5)\n\n- `#REMOVELAYER` Removes the layer specified by `sourceid` from the background picture's layer cache; optional parameters are not used\n\n- `#TEXTOBJECT` Adds the text object specified by `sourceid` to the move list; `par1` specifies x-position and `par2` the y-position; `par3` is not used\n\n- `#UNDO` Adds an [Undo()](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html) operation to the move list; `sourceid` specifies the type of the object to be undone, `par1` specifies the identifier of the object to be undone, `par2` specifies the undo level; See [Undo](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html).\n\nAfter you have filled the move list with objects you can call [DoMove()](https://www.hollywood-mal.com/docs/html/hollywood/DoMove_.html) to draw the new display.\n\nPlease note: It is not possible to have multiple objects of the same type and id in your move list. For example, you cannot do the following:\n\n```\nDisplayBrush(1, #LEFT, #TOP)\nDisplayBrush(1, #RIGHT, #BOTTOM)\n\n/* This will not work */\nAddMove(1, #BRUSH, 1, #CENTER, #CENTER)\nAddMove(1, #BRUSH, 1, #LEFTOUT, #TOPOUT)\n/* This will not work */\n\nDoMove(1)\n```\n\nThe above code will not work because you are using brush 1 two times in the same move list. Hollywood does not know which brush to use then which leads to unpredictable results.\n\nSee [DoMove](https://www.hollywood-mal.com/docs/html/hollywood/DoMove_.html).",
    "inputsDocs": "* `id` — identifier of the move list or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) to create a new move list\n* `type` — type of the object to add (see list above)\n* `sourceid` — depends on the specified type (see list above)\n* `par1` — depends on the specified type (see list above)\n* `par2` — depends on the specified type (see list above)\n* `par3` — depends on the specified type (see list above)",
    "resultsDocs": "* `id` — optional: identifier of the move list; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "See [DoMove](https://www.hollywood-mal.com/docs/html/hollywood/DoMove_.html)",
    "platforms": ["All"],
    "insertText": "AddMove(${1:id}, ${2:type}, ${3:sourceid})"
  },
  {
    "name": "ClearMove",
    "helpId": "ClearMove",
    "shortDescription": "clear move list",
    "version": "1.5",
    "synopsis": "ClearMove(id)",
    "functionDocs": "This function clears all objects which are in the move list specified by `id`. After you have called this command, your move list is empty again and can be filled with new objects.\n\nSee [DoMove](https://www.hollywood-mal.com/docs/html/hollywood/DoMove_.html).",
    "inputsDocs": "* `id` — identifier of the move list to clear",
    "example": "See [DoMove](https://www.hollywood-mal.com/docs/html/hollywood/DoMove_.html)",
    "platforms": ["All"],
    "insertText": "ClearMove(${1:id})"
  },
  {
    "name": "CopyLayer",
    "helpId": "CopyLayer",
    "shortDescription": "clone a layer",
    "version": "9.1",
    "synopsis": "CopyLayer(id, pos[, t])",
    "functionDocs": "This command clones the layer specified by `id` and inserts the copy into the layer position specified by `pos`. The special value 0 can be passed in `pos` to insert the cloned layer as the last one. `CopyLayer()` will clone all layer attributes except the layer's name because that must be unique. You can use the optional table argument `t` to specify a name for the cloned layer.\n\nThe optional table argument supports these tags:\n\n- `Name`: If you want to assign a name to the new layer, set this tag to a string containing the desired name. By default, the new layer won't be given a name.\n\n- `Hidden`: This tag can be set to `True` to automatically hide the new layer after creation. Defaults to `False`.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this command. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the layer to clone\n* `pos` — desired position for the new layer or 0 for last layer\n* `t` — optional: table containing further parameters",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 480, #RED)\nCopyLayer(1, 2, {Hidden = True})\nSetLayerStyle(2, {X = 320, Color = #BLUE, Hidden = False})\n```\n\nThe code above creates a filled red rectangle layer, clones it, changes the color of the cloned layer to blue and positions it next to the red layer.",
    "platforms": ["All"],
    "insertText": "CopyLayer(${1:id}, ${2:pos})"
  },
  {
    "name": "CreateLayer",
    "helpId": "CreateLayer",
    "shortDescription": "create a new layer",
    "version": "4.7",
    "synopsis": "CreateLayer(x, y, width, height[, table])",
    "functionDocs": "This command can be used to insert a new layer to the current BGPic. The layer will be of the dimensions specified in `width` / `height` and it will appear at the specified position. This function will create either a layer of type `#BRUSH` or of type `#ANIM`. If you want to create an anim layer, you will have to pass the desired number of frames in the `Frames` tag in the optional table argument.\n\nThe optional table argument recognizes the following tags:\n\n- `Frames` Specifies the number of frames for this layer. If this is set to 1, `CreateLayer()` will create a brush layer. Otherwise an anim layer containing the specified number of frames will be created. Defaults to 1 (which means that by default, `CreateLayer()` will create a brush layer).\n\n- `Color` Specifies the initial [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) of the layer. This defaults to $000000 (i.e. black).\n\n- `Mask` Set this tag to `True` if `CreateLayer()` should attach a mask to the new layer. If this is `True`, `AlphaChannel` must be `False`. Defaults to `False`.\n\n- `AlphaChannel` Set this tag to `True` if `CreateLayer()` should attach an alpha channel to the new layer. If this is set to `True`, `Mask` must be set to `False`. Defaults to `False`.\n\n- `Clear` This tag is only handled if either `AlphaChannel` or `Mask` was set to `True`. If that is the case, `Clear` specifies whether or not the mask or alpha channel should be cleared (i.e. fully transparent) or not (i.e. opaque). This defaults to `False` which means that by default, the new mask or alpha channel will be opaque.\n\nAdditionally, you can pass one or more of the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) in the optional table argument. Using these tags you can for instance control the insert position of the layer, assign a name to it, and modify the anchor point settings of this layer. See [Standard draw tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\n`CreateLayer()` is the preferred way of creating an empty layer that you later want to modify using the [SelectLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html) command. Of course, you could also create an empty brush using [CreateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/CreateBrush_.html) and then insert it as a layer using [DisplayBrush()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrush_.html) or [InsertLayer()](https://www.hollywood-mal.com/docs/html/hollywood/InsertLayer_.html) but this is not as effective as using the new `CreateLayer()` function because when you then call [SelectLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html) on a layer that was created from an existing brush source, Hollywood first has to create a copy of the layer because [SelectLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html) shall only modify the layer contents and not the contents of the brush that was used to create the layer. This is not very critical with brush layers, but imagine an anim layer with some dozens of frames! Using [SelectLayer()](https://www.hollywood-mal.com/docs/html/hollywood/SelectLayer_.html) on such an anim layer would be very expensive and would take quite some time. In these cases, `CreateLayer()` is really much more effective.",
    "inputsDocs": "* `x` — desired x position for the new layer\n* `y` — desired y position for the new layer\n* `width` — desired layer width\n* `height` — desired layer height\n* `table` — optional: table configuring further options; can be one or more of the tags listed above or from the [standard tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html)",
    "example": "```\nCreateLayer(#CENTER, #CENTER, 100, 100, {Color = #RED})\nSelectLayer(1)\nCircle(0, 0, 50, #WHITE)\nEndSelect\n```\n\nThe code above creates a new 100x100 red layer and then draws a white circle onto it.",
    "platforms": ["All"],
    "insertText": "CreateLayer(${1:x}, ${2:y}, ${3:width}, ${4:height})"
  },
  {
    "name": "DisableLayers",
    "helpId": "DisableLayers",
    "shortDescription": "disable layers for current display",
    "version": "1.5",
    "synopsis": "DisableLayers()",
    "functionDocs": "This function disables layers in the currently selected display.\n\nPlease note that this function does not free any layers that are attached to a background picture. They will be kept until you free them or until Hollywood is closed. So you can also disable layers temporarily and enable them again later and you will not lose any layers.\n\nPlease note though that it is generally not advised to switch between layered and non-layered modes because both modes are not really compatible with each other. Thus, the best idea is certainly to define whether or not a display should use layers at display creation time (e.g. when calling [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) or [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html)) and then stick to this decision. Mixing layered and non-layered sections in the same display is really only recommended if you know exactly what you are doing.\n\nSee [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DisableLayers()"
  },
  {
    "name": "DoMove",
    "helpId": "DoMove",
    "shortDescription": "draw a move list",
    "version": "1.5",
    "synopsis": "DoMove(id)",
    "functionDocs": "This function draws all objects which have been added to the move list specified by `id` (using [AddMove()](https://www.hollywood-mal.com/docs/html/hollywood/AddMove_.html)) at once. This is very useful if you want to display animated graphics with different objects. If you painted every object with [DisplayBrush()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrush_.html) your display would certainly flicker a lot. This can be prevented by updating the display with one drawing operation. `DoMove()` lets you realize that: You add all objects that shall be drawn to a move list (using [AddMove()](https://www.hollywood-mal.com/docs/html/hollywood/AddMove_.html)) and then you call `DoMove()` which will draw the whole move list using just a single draw operation.\n\nImplementation of `DoMove()` is that it scans the move list you specify and looks what objects shall be drawn. For every object that is in the list Hollywood will check if the object is already on the screen. If it is, Hollywood will move the object to the new position. If it is not on the screen, it will be drawn on the screen. Therefore if all objects that shall be drawn are already on the screen and shall just be moved with `DoMove()`, all layer positions will be kept. If there are objects in the move list that are not currently on the screen, they will be drawn and will get the top most layer position assigned.\n\nAfter `DoMove()` is finished, you should call [ClearMove()](https://www.hollywood-mal.com/docs/html/hollywood/ClearMove_.html). This will clear the move list you specify and you can use it again with new object positions.\n\nThis function requires [enabled layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html).",
    "inputsDocs": "* `id` — identifier of the move list to draw",
    "example": "```\nEnableLayers()\nFor x = 0 To 400\nAddMove(1, #BRUSH, 1, x, 0)\nAddMove(1, #BRUSH, 2, x, 100)\nAddMove(1, #BRUSH, 3, x, 200)\nAddMove(1, #BRUSH, 4, x, 300)\nDoMove(1)\nClearMove(1)\nNext\n```\n\nThe code above scrolls brushes 1 to 4 from 0 to 400. You will see no flickering because we use the move list technique.",
    "platforms": ["All"],
    "insertText": "DoMove(${1:id})"
  },
  {
    "name": "DumpLayers",
    "helpId": "DumpLayers",
    "shortDescription": "print internal information about layers",
    "version": "2.0",
    "synopsis": "DumpLayers([what])",
    "functionDocs": "This function prints internal information about the layers in the current BGPic to the debug device. This is mostly useful for debugging purposes. The information that is printed by `DumpLayers()` includes position and size information, the layer's visibility flag as well as the internal storage size of a basic Hollywood layer.\n\nThe `what` argument can be used to control the information that should be printed. Internally, Hollywood layers can have up to three different representations. A normal representation without any transformations, a transformed representation and a layerscale-transformed representation. The transformed representation is created by functions such as [RotateLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RotateLayer_.html) and [ScaleLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleLayer_.html) whereas the layerscale-transformed manifestation of a layer represents either the normal or the transformed layer with additional transformations added by the layer scaling engine.\n\nThe following values are currently accepted by the `what` argument:\n\n- `0`: Print information about the normal representation of the layer. This is the default.\n\n- `1`: Print information about the transformed representation of the layer.\n\n- `2`: Print information about the layerscale-transformed representation of the layer.\n\nNote that even if no layerscale-transformation is currently active, level 2 always represents the physical appearance of a layer. So if you need to know details about the physical appearance of a layer, always pass 2 in the `what` parameter, even if no transformation are currently active.\n\nAlso note that the position and size information printed by this function is separated into the real physical position and size and the position and size as maintained by the script. The real physical position and size information is printed in brackets.\n\nAll this information, however, is probably of not much use for normal programmers. This function is mainly here for debugging purposes. If you need to query layer attributes for your script, use the [GetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/GetLayerStyle_.html) or the [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html) function using the `#LAYER` source type. See [GetLayerStyle](https://www.hollywood-mal.com/docs/html/hollywood/GetLayerStyle_.html). See [GetAttribute](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `what` — flag to control which information should be printed (see above); defaults to 0",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DumpLayers()"
  },
  {
    "name": "EnableLayers",
    "helpId": "EnableLayers",
    "shortDescription": "enable layers for current display",
    "version": "1.5",
    "synopsis": "EnableLayers()",
    "functionDocs": "This function enables layers in the currently selected display. In order to use any of the layer functions in this display, you need to call this function first. Alternatively, you could enable layers already at display creation time by using the `Layers` tag in either the [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) or [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html) commands.\n\nPlease note also that it is generally not advised to switch between layered and non-layered modes because both modes are not really compatible with each other. Thus, the best idea is certainly to define whether or not a display should use layers at display creation time (e.g. when calling [@DISPLAY](https://www.hollywood-mal.com/docs/html/hollywood/atDISPLAY_.html) or [CreateDisplay()](https://www.hollywood-mal.com/docs/html/hollywood/CreateDisplay_.html)) and then stick to this decision. Mixing layered and non-layered sections in the same display is really only recommended if you know exactly what you are doing.\n\nSee [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "EnableLayers()"
  },
  {
    "name": "FreeLayers",
    "helpId": "FreeLayers",
    "shortDescription": "free background picture's layers",
    "version": "1.5",
    "synopsis": "FreeLayers([keep])",
    "functionDocs": "This function frees all layers associated with the current background picture. You should call this command when you are finished with layers on a background picture because it releases quite some memory.\n\nBy default, `FreeLayers()` will free all layers but it will also draw them into the background picture. This means that there will be no visible change after you have called `FreeLayers()`. The layers will be gone but it will look as if they were still there because they will be drawn into the background picture. If you don't want that, set the `keep` parameter to `False`. In that case, the layers will be removed and they won't be drawn into the background. This is the same as calling [RemoveLayers()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveLayers_.html).\n\nPlease note: Layers will not be freed when you display a new background picture. You have to free them on your own.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `keep` — optional: whether to draw the layers into the background picture or not (defaults to `True`) (V4.0)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeLayers()"
  },
  {
    "name": "GetLayerAtPos",
    "helpId": "GetLayerAtPos",
    "shortDescription": "return topmost layer at specified position",
    "version": "4.7",
    "synopsis": "id, name$ = GetLayerAtPos(x, y)",
    "functionDocs": "This function returns the topmost layer at the specified position. This is useful when creating some interactive user interface where layers can be moved with the mouse or hovering over a layer changes the style of that very layer. The position passed to this function is relative to the top-left corner of the display, i.e. a position of (0,0) means the top-left corner.\n\n`GetLayerAtPos()` returns the identifier of the topmost layer at the specified position as well as the name of that layer. If the layer does not have a name, an empty string is returned as the second return value. If there is no layer at the specified position at all, 0 is returned as the identifier and an empty string as the name.",
    "inputsDocs": "* `x` — x position to query\n* `y` — y position to query",
    "resultsDocs": "* `id` — identifier of the topmost layer at this position or 0 if there is no layer at this position\n* `name$` — name of the topmost layer or empty string (\"\") if the layer does not have a name or no layer was found",
    "platforms": ["All"],
    "insertText": "GetLayerAtPos(${1:x}, ${2:y})"
  },
  {
    "name": "GetLayerGroupMembers",
    "helpId": "GetLayerGroupMembers",
    "shortDescription": "return all members of a layer group",
    "version": "10.0",
    "synopsis": "t = GetLayerGroupMembers(group$)",
    "functionDocs": "This function finds all members of the layer group specified by `group$` and returns them in a table. The order in which the group members are returned in the table is arbitrary.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `group$` — name of layer group to use",
    "resultsDocs": "* `t` — table containing all group members",
    "example": "```\nt = GetLayerGroupMembers(\"mygroup\")\nFor Local k = 0 To ListItems(t) - 1 Do DebugPrint(t[k])\n```\n\nThe code above gets all members of the layer group \"mygroup\" and prints them.",
    "platforms": ["All"],
    "insertText": "GetLayerGroupMembers(${1:group$})"
  },
  {
    "name": "GetLayerGroups",
    "helpId": "GetLayerGroups",
    "shortDescription": "return layer groups in current BGPic",
    "version": "10.0",
    "synopsis": "t = GetLayerGroups()",
    "functionDocs": "This function collects all layer groups in the current BGPic and returns them in a table. The order in which the groups are returned in the table is arbitrary.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `t` — table containing all layer groups",
    "example": "```\nt = GetLayerGroups()\nFor Local k = 0 To ListItems(t) - 1 Do DebugPrint(t[k])\n```\n\nThe code above gets all layer groups and prints them.",
    "platforms": ["All"],
    "insertText": "GetLayerGroups()"
  },
  {
    "name": "GetLayerPen",
    "helpId": "GetLayerPen",
    "shortDescription": "get pen color from layer's palette",
    "version": "9.0",
    "synopsis": "color = GetLayerPen(id, pen)",
    "functionDocs": "This function gets the color of the pen specified by `pen` from the palette of the layer specified by `id`. The color will be returned as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer to use\n* `pen` — pen you want to get (starting from 0)",
    "resultsDocs": "* `color` — color of the pen, specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\ncolor = GetLayerPen(1, 0)\n```\n\nThe code gets the color of the first pen of layer 1.",
    "platforms": ["All"],
    "insertText": "GetLayerPen(${1:id}, ${2:pen})"
  },
  {
    "name": "GetLayerStyle",
    "helpId": "GetLayerStyle",
    "shortDescription": "get the style of a layer",
    "version": "4.0",
    "synopsis": "t = GetLayerStyle(id)",
    "functionDocs": "This function returns all style attributes of the specified layer. The different attributes are returned in a table which you can then examine. The contents of the style table returned by this function depend on the type of the layer that you specified. For a complete overview of all style elements that will be returned by this function, please have a look at the documentation of the [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) command which contains a list of the layer style elements and to which layer types they apply. See [SetLayerStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html).\n\nPlease note that this command always queries all attributes so it can sometimes get quite slow. If you need only some basic information about a layer, it could be faster to use [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html) instead.",
    "inputsDocs": "* `id` — identifier of the layer to examine",
    "resultsDocs": "* `t` — a table containing all style attributes for this layer",
    "example": "```\nt = GetLayerStyle(1)\nPrint(\"This layer is at position\", t.x, \":\", t.y, \"!\")\n```\n\nThe code above queries the style of layer 1 and displays its position then.",
    "platforms": ["All"],
    "insertText": "GetLayerStyle(${1:id})"
  },
  {
    "name": "GroupLayer",
    "helpId": "GroupLayer",
    "shortDescription": "add layer(s) to group",
    "version": "10.0",
    "synopsis": "GroupLayer(group$, layer1[, layer2, ...])",
    "functionDocs": "This function can be used to add one or more layers to the layer group specified by `group$`. If the layer group specified by `group$` doesn't exist yet, it will be automatically created by `GroupLayer()`. Layer groups are simply referenced by a name string that can contain any characters as long as the group's name isn't already used by a layer. The layer(s) that should be added to the group must be specified by their id in the parameters after `group$`. You can pass an unlimited number of layers to this function.\n\nOnce you have finished grouping your layers, you can then pass the group's name to most functions that deal with layers, e.g. you could show a group of layers by simply passing the name of your layer group to [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html). You could also move all layers of a layer group at once by passing the layer group to [MoveLayer()](https://www.hollywood-mal.com/docs/html/hollywood/MoveLayer_.html) etc.\n\nNote that when passing groups instead of single layers to functions of the layer library, those functions won't treat the layer group as an own entity but will simply apply the respective operation on all layers that are part of the group. For example, if you call [MoveLayer()](https://www.hollywood-mal.com/docs/html/hollywood/MoveLayer_.html) on a layer group and pass 100:100 as the new position, Hollywood won't move the group as a whole to position 100:100 but all group members individually will be moved to 100:100 so that after the call all layers that are part of the group will appear at 100:100, i.e. they all will be at the same position which might not be what you expected. If you want to move layers that are part of a group and preserve their individual position within the group, you need to call [TranslateLayer()](https://www.hollywood-mal.com/docs/html/hollywood/TranslateLayer_.html) instead because that allows moving layers relative to their current position. See [TranslateLayer](https://www.hollywood-mal.com/docs/html/hollywood/TranslateLayer_.html).\n\nLayers can also be added to a group right when they are created by passing the group's name in the `Group` tag of the [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html) accepted by all Hollywood functions that add a layer. See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nTo remove a layer from a group, use the [UngroupLayer()](https://www.hollywood-mal.com/docs/html/hollywood/UngroupLayer_.html) function. See [UngroupLayer](https://www.hollywood-mal.com/docs/html/hollywood/UngroupLayer_.html). As soon as a group doesn't have any more layers attached, it will be automatically deleted.\n\nAnother way of grouping layers is to merge them. In comparison to grouping layers, merging layers means to turn them into a single layer. One advantage of merged layers is that they are treated as a whole, for example when showing or hiding them using transition effects. Grouped layers, on the other hand, will show transition effects individually for each group member. See [MergeLayers](https://www.hollywood-mal.com/docs/html/hollywood/MergeLayers_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use `GroupLayer()`. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `group$` — name of the group to add the layer(s) to\n* `layer1` — first layer to add to the group\n* `...` — further layers to add to the group",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 100, 100, #RED, {Hidden = True})\nBox(100, 0, 100, 100, #GREEN, {Hidden = True})\nBox(200, 0, 100, 100, #BLUE, {Hidden = True})\nGroupLayer(\"mygroup\", 1, 2, 3)\nTranslateLayer(\"mygroup\", 170, 190)\nShowLayerFX(\"mygroup\", #SCROLLSOUTH)\n```\n\nThe code above creates three hidden 100x100 rectangles, groups them and then moves the group to the center of the 640x480 display and scrolls them in from the south.",
    "platforms": ["All"],
    "insertText": "GroupLayer(${1:group$}, ${2:layer1})"
  },
  {
    "name": "HideLayer",
    "helpId": "HideLayer",
    "shortDescription": "hide a layer",
    "version": "1.5",
    "synopsis": "HideLayer(id)",
    "functionDocs": "This function hides the layer or layer group specified by `id`. The layer will not be removed. It will just be hidden. You can make it visible again, by calling [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html). If you want to remove it completely, use [RemoveLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveLayer_.html) or [Undo()](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to hide",
    "example": "```\nEnableLayers()\nNPrint(\"Hello World!\")\nWaitLeftMouse\nHideLayer(1)\nWaitLeftMouse\nShowLayer(1)\n```\n\nThe code above prints \"Hello World!\" to the display, then hides this text and displays it again.",
    "platforms": ["All"],
    "insertText": "HideLayer(${1:id})"
  },
  {
    "name": "HideLayerFX",
    "helpId": "HideLayerFX",
    "shortDescription": "hide a layer with transition effects",
    "version": "1.9",
    "synopsis": "[handle] = HideLayerFX(id[, table])",
    "functionDocs": "This function is an extended version of the [HideLayer()](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html) command. It hides the layer or layer group specified by `id` and uses one of the many Hollywood transition effects. You can also specify the speed for the transition and an optional argument.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type` Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed` Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter` Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async` You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `HideLayerFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `NoBorderFade` If the layer to be hidden has a border, do not gradually fade out the border but remove it in one go at the end of the transition effect. (V5.0)\n\n- `BorderFX`: If the layer to be hidden has a border, Hollywood will only apply the transition effect to the border if the layer is a transparent layer with text or pixel graphics. For non-transparent and vector graphics layers a generic fade effect will be used instead because otherwise there would be visual glitches between the penultimate and final effect frame because of differences in the border algorithms. If you don't care about this glitch and want to force Hollywood to always apply the transition effect to the border, set this tag to `True`. To force Hollywood to always use the generic fade mode, set this tag to `False`. (V9.0)\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to hide\n* `table` — optional: table configuring the transition",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nHideLayerFX(5, {Type = #CROSSFADE}) ; new syntax\n\nOR\n\nHideLayerFX(5, #CROSSFADE)          ; old syntax\n```\n\nThe above code hides layer 5 with a nice crossfade transition.",
    "platforms": ["All"],
    "insertText": "HideLayerFX(${1:id})"
  },
  {
    "name": "InsertLayer",
    "helpId": "InsertLayer",
    "shortDescription": "insert a new layer",
    "version": "1.5",
    "synopsis": "InsertLayer(pos, type, id, x, y[, hidden])",
    "functionDocs": "This function inserts a new layer of the object type specified by `type` and the object id specified by `id` into layer position `pos`. All the following layers will be moved downwards and therefore they will get a new id. The new layer will also be displayed at the position specified by `x` and `y`. If you specify 0 as `pos`, the layer will be inserted as the last layer.\n\nThe following object types are currently supported:\n\n- `#BRUSH` Inserts the brush specified by `id` at x, y\n\n- `#TEXTOBJECT` Inserts the text object specified by `id` at x, y\n\n- `#ANIM` Inserts the anim specified by `id` at x, y (V2.0)\n\n- `#VIDEO` Inserts the video specified by `id` at x, y (V6.0)\n\nStarting with Hollywood 1.9 you can specify the optional argument `hidden`, which will insert a hidden layer which you can bring to front using [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html) or [ShowLayerFX()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayerFX_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `pos` — desired position for the layer or 0 for last layer\n* `type` — type of the object to be inserted (see list above)\n* `id` — identifier of the object to be inserted\n* `x` — x-position for the new layer\n* `y` — y-position for the new layer\n* `hidden` — optional: `True` if the layer shall be hidden (defaults to `False`) (V1.9)",
    "example": "```\nEnableLayers()\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 100, 100, #RED)\nCircle(#CENTER, #CENTER, 50, #BLUE)\nTextOut(#RIGHT, #BOTTOM, \"Hello World\")\nInsertLayer(1, #BRUSH, 1, #CENTER, #CENTER)\n```\n\nThe code above inserts brush 1 as the first layer. This means that all the other layers will be re-positioned. The red rectangle will get layer position 2 now (was layer 1), the blue circle will be layer 3 (was layer 2) and the \"Hello World\" text will be layer 4 (was layer 3).",
    "platforms": ["All"],
    "insertText": "InsertLayer(${1:pos}, ${2:type}, ${3:id}, ${4:x}, ${5:y})"
  },
  {
    "name": "LayerExists",
    "helpId": "LayerExists",
    "shortDescription": "check if specified layer exists",
    "version": "4.6",
    "synopsis": "ret = LayerExists(layer$)",
    "functionDocs": "This command simply checks whether or not the specified layer exists. Obviously, you must pass a layer name here, not a layer id as layer ids are per se existent.",
    "inputsDocs": "* `layer$` — layer name to check",
    "resultsDocs": "* `ret` — `True` if the layer exists, `False` otherwise",
    "platforms": ["All"],
    "insertText": "LayerExists(${1:layer$})"
  },
  {
    "name": "LayerGroupExists",
    "helpId": "LayerGroupExists",
    "shortDescription": "check if group exists",
    "version": "10.0",
    "synopsis": "ok = LayerGroupExists(group$)",
    "functionDocs": "This function checks if the layer group specified by `group$` exists. If it does, `True` is returned, `False` otherwise.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `group$` — name of the layer group",
    "resultsDocs": "* `ok` — `True` if the group exists, `False` if it doesn't",
    "platforms": ["All"],
    "insertText": "LayerGroupExists(${1:group$})"
  },
  {
    "name": "LayerToBack",
    "helpId": "LayerToBack",
    "shortDescription": "move layer to backmost z-position",
    "version": "5.0",
    "synopsis": "LayerToBack(layer[, swap])",
    "functionDocs": "This command moves the specified layer all the way to the background. `LayerToBack()` is a convenience function. The same could be achieved by using [SwapLayers()](https://www.hollywood-mal.com/docs/html/hollywood/SwapLayers_.html) or [SetLayerZPos()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerZPos_.html).\n\nIf the optional argument `swap` is set to `False`, the layer is brought to the back by simply moving it to the back. This is different from the default behaviour which simply swaps the positions of the back layer and the layer specified by `layer`. If `swap` is set to `False`, `layer` can also be the name of a layer group.",
    "inputsDocs": "* `layer` — layer to move to the background\n* `swap` — set this to `False` if the layers shouldn't swap positions but the specified layer should just be moved to the back (defaults to `True`) (V7.1)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "LayerToBack(${1:layer})"
  },
  {
    "name": "LayerToFront",
    "helpId": "LayerToFront",
    "shortDescription": "move layer to frontmost z-position",
    "version": "5.0",
    "synopsis": "LayerToFront(layer[, swap])",
    "functionDocs": "This command moves the specified layer all the way to the front. `LayerToFront()` is a convenience function. The same could be achieved by using [SwapLayers()](https://www.hollywood-mal.com/docs/html/hollywood/SwapLayers_.html) or [SetLayerZPos()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerZPos_.html).\n\nIf the optional argument `swap` is set to `False`, the layer is brought to the front by simply moving it to the front. This is different from the default behaviour which simply swaps the positions of the front layer and the layer specified by `layer`. If `swap` is set to `False`, `layer` can also be the name of a layer group.",
    "inputsDocs": "* `layer` — layer to move to the front\n* `swap` — set this to `False` if the layers shouldn't swap positions but the specified layer should just be moved to the front (defaults to `True`) (V7.1)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "LayerToFront(${1:layer})"
  },
  {
    "name": "MergeLayers",
    "helpId": "MergeLayers",
    "shortDescription": "merge layers into new layer",
    "version": "10.0",
    "synopsis": "MergeLayers(layer1[, layer2, ..., t])",
    "functionDocs": "This function merges the layers specified by `layer1`, `layer2`, etc. into a new layer while preserving the source layers. By default, `MergeLayers()` will automatically hide the source layers, but this behaviour can be changed by setting the `AutoHide` tag to `False` in the optional table argument. Instead of single layers, you can also pass layer groups that should be merged to this function.\n\nThe new layer that is created by `MergeLayers()` will use the special `#MERGED` layer type. Layers of type `#MERGED` can't be transformed (except by the layer scaling engine) and they'll typically contain all settings of their child layers, e.g. shadow, border, filters, transparency settings etc. rendered into the layer, although this can be changed using certain tags in the optional table argument. In comparison to layer groups created using [GroupLayer()](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html), one advantage of merged layers is that when showing them using transition effects they will be treated as a whole whereas showing layers that are part of a group created by [GroupLayer()](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html) using transition effects would apply the transitions to each group member individually which might not always look as good as when the transitions are applied to the layers as a whole. This limitation of [GroupLayer()](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html) can thus be overcome by using `MergeLayers()`.\n\nThe optional table argument `t` can contain the following tags:\n\n- `AutoHide`: Specifies whether or not the source layers should be automatically hidden by `MergeLayers()`. By default, `MergeLayers()` will automatically hide the layers that are merged into a new one. If you don't want that, set this tag to `False`. Defaults to `True`.\n\n- `MergeShadow`: Specifies whether or not any potential layer shadow should be merged into the new layer as well. This defaults to `True`. If you set this to `False`, no shadow effect from any of the source layers will be merged into the new layer so the new layer will appear without any shadow. Of course, it's possible to add a shadow to the new layer using [SetLayerShadow()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerShadow_.html) or the [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\n- `MergeBorder`: Specifies whether or not any potential layer border effect should be merged into the new layer as well. This defaults to `True`. If you set this to `False`, no border effect from any of the source layers will be merged into the new layer so the new layer will appear without any border effect. Of course, it's possible to add a border effect to the new layer using [SetLayerBorder()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerBorder_.html) or the [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\n- `MergeFilter`: Specifies whether or not any potential layer filter should be merged into the new layer as well. This defaults to `True`. If you set this to `False`, no filter from any of the source layers will be merged into the new layer so the new layer will appear without any filters. Of course, it's possible to add filters to the new layer using [SetLayerFilter()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerFilter_.html) or the [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\n- `MergeTransparency`: Specifies whether or not any potential layer transparency should be merged into the new layer as well. This defaults to `True`. If you set this to `False`, no transparency from any of the source layers will be merged into the new layer so the new layer will appear without any transparency setting. Of course, it's possible to set the transparency of the new layer using [SetLayerTransparency()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerTransparency_.html) or the [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\n- `MergeFX`: Specifies whether or not any potential layer transition effect should be merged into the new layer as well. This defaults to `True`. If you set this to `False`, no transition effect from any of the source layers will be merged into the new layer so the new layer will appear without any transition effects.\n\nFurthermore, the optional table argument also supports Hollywood's [standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).\n\nNote that merged layers aren't updated automatically when their source layers change their graphics. You need to use the [RefreshLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RefreshLayer_.html) function to force an update of a merged layer. See [RefreshLayer](https://www.hollywood-mal.com/docs/html/hollywood/RefreshLayer_.html). Also note that only visible layers will be merged. Hidden layers will be ignored by `MergeLayers()`.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use `MergeLayers()`. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `layer1` — first layer or layer group to merge\n* `...` — further layers or layer groups to merge\n* `t` — optional: table containing further options (see above)",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nSelectBGPic(1)\nBox(0, 0, 100, 100, #RED)\nBox(100, 0, 100, 100, #GREEN)\nBox(200, 0, 100, 100, #BLUE)\nMergeLayers(1, 2, 3, {Name = \"newlayer\", Hidden = True})\nMoveLayer(\"newlayer\", #CENTER, #CENTER)\nEndSelect\nShowLayerFX(\"newlayer\", #ZOOMCENTER)\n```\n\nThe code above creates three hidden 100x100 rectangles, merges them to a new layer, moves this new layer to the center and then shows the merged layer with a transition effect. Note that we use [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html) to make sure nothing is drawn before our call to [ShowLayerFX()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayerFX_.html).",
    "platforms": ["All"],
    "insertText": "MergeLayers(${1:layer1})"
  },
  {
    "name": "ModifyLayerFrames",
    "helpId": "ModifyLayerFrames",
    "shortDescription": "change number of anim layer frames",
    "version": "4.7",
    "synopsis": "ModifyLayerFrames(id, frames[, pos])",
    "functionDocs": "This function can be used to extend or shrink the frames of an anim layer. If you specify a positive value in `frames`, then the anim layer is extended by this number of frames. If you specify a negative value, the number of frames specified are removed from the anim layer.\n\nThe optional argument `pos` can be used to specify where the new frames shall be inserted or from where the frames shall be removed, respectively. If you do not specify the optional argument or set it to 0, frames are added at the end of the anim layer or removed from the end of the anim layer, respectively.\n\nThis command works only with anim layers that have their frames buffered entirely in memory. You cannot use it for anim layers that load their frames dynamically from disk.",
    "inputsDocs": "* `id` — identifier of the anim layer to modify\n* `frames` — number of frames to insert (if value is positive) or number of frames to remove (if value is negative)\n* `pos` — optional: where to insert or remove frames (defaults to 0 which means insert at/remove from the end)",
    "example": "```\nModifyLayerFrames(1, -5, 1)\n```\n\nThe code above removes the first five frames from anim layer number 1.",
    "platforms": ["All"],
    "insertText": "ModifyLayerFrames(${1:id}, ${2:frames})"
  },
  {
    "name": "MoveLayer",
    "helpId": "MoveLayer",
    "shortDescription": "move layer to a new position",
    "version": "1.9",
    "synopsis": "MoveLayer(id, xa, ya, xb, yb[, table])  \nMoveLayer(id, x, y) (V9.1)",
    "functionDocs": "This function can be used to either scroll the layer specified by `id` to a new position or simply move it to a new position without scrolling.\n\nIf you pass the `xa`, `ya`, `xb` and `yb` arguments, `MoveLayer()` will scroll the layer specified by `id` softly from the position specified by `xa` and `ya` to the position specified by `xb` and `yb`. Further configuration options are possible using the optional argument `table`. You can specify the move speed, special effect, and whether or not the move shall be asynchronous. See [MoveBrush](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html).\n\nIf you just pass the `x` and `y` arguments, `MoveLayer()` will simply move the layer to the position specified by `x` and `y`. In that case, `id` can also be the name of a layer group.\n\nFor all coordinates you can specify the special constant `#USELAYERPOSITION`. Hollywood will use the current position of the layer then.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — id or name of the layer to use\n* `xa` — source x position\n* `ya` — source y position\n* `xb` — destination x position\n* `yb` — destination y position\n* `table` — optional: further configuration for this move",
    "example": "```\nMoveLayer(5, #LEFTOUT, #CENTER, #RIGHTOUT, #CENTER)\n```\n\nScrolls layer 5 from the outside left to the outside right of the display and centers it vertically.\n\n---\n\n```\nMoveLayer(4, #USELAYERPOSITION, #USELAYERPOSITION, #LEFTOUT, #CENTER)\n```\n\nScrolls layer 4 from its current position out of the screen.\n\n---\n\n```\nMoveLayer(5, #CENTER, #CENTER)\n```\n\nMoves layer 5 to the screen center.",
    "platforms": ["All"],
    "insertText": "MoveLayer(${1:id}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb})"
  },
  {
    "name": "NextFrame",
    "helpId": "NextFrame",
    "shortDescription": "display a new frame of an anim layer",
    "version": "2.0",
    "synopsis": "NextFrame(id[, x, y, frame])",
    "functionDocs": "This function displays a new frame of an anim layer. If you omit the optional `frame` argument or set it to 0, `NextFrame()` will show the next frame of the anim layer. If you pass -1 in the `frame` argument, the last frame will be displayed. The `x` and `y` arguments can be used to move the layer to a new position while changing the frame. If you do not need them, pass `#USELAYERPOSITION` which will keep the layer where it is.\n\nStarting with Hollywood 9.0, this function can also be used with text layers that are in list mode to show the next list items. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the anim layer\n* `x` — optional: new x-position for the layer (defaults to `#USELAYERPOSITION`)\n* `y` — optional: new y-position for the layer (defaults to `#USELAYERPOSITON`)\n* `frame` — optional: which frame to show (defaults to 0 which means that the next frame shall be shown)",
    "example": "```\nEnableLayers\nInsertLayer(1, #ANIM, 1, 0, #CENTER)\nFor k = 0 To 400 Step 3\n   NextFrame(1, k, #USELAYERPOSITION)\n   Wait(5)\nNext\n```\n\nPlays the anim number 1 while moving it from x-position 0 to 400.",
    "platforms": ["All"],
    "insertText": "NextFrame(${1:id})"
  },
  {
    "name": "PauseLayer",
    "helpId": "PauseLayer",
    "shortDescription": "pause a playing video layer",
    "version": "6.0",
    "synopsis": "PauseLayer(id)",
    "functionDocs": "This function pauses the video layer specified by `id`. This video layer must be playing when you call this command. You can resume playback later by using the [ResumeLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ResumeLayer_.html) command.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer to pause",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "PauseLayer(${1:id})"
  },
  {
    "name": "PlayLayer",
    "helpId": "PlayLayer",
    "shortDescription": "play a currently stopped video layer",
    "version": "6.0",
    "synopsis": "PlayLayer(id)",
    "functionDocs": "This function starts playback of the video layer specified by `id`. You can stop playback by calling [StopLayer()](https://www.hollywood-mal.com/docs/html/hollywood/StopLayer_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer to be played",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "PlayLayer(${1:id})"
  },
  {
    "name": "RefreshLayer",
    "helpId": "RefreshLayer",
    "shortDescription": "refresh a layer",
    "version": "10.0",
    "synopsis": "RefreshLayer(id)",
    "functionDocs": "This function refreshes the layer or layer group specified by `id`. This is normally not needed because Hollywood will refresh layers automatically whenever it is needed. There is one exception, though: Due to performance reasons, merged layers created using [MergeLayers()](https://www.hollywood-mal.com/docs/html/hollywood/MergeLayers_.html) won't be refreshed automatically when the graphics of one of their source layers change. Thus, you must manually tell merged layers to refresh by calling `RefreshLayer()` on them whenever you want them to refresh their graphics and that's the reason why this function exists.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to be refreshed",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RefreshLayer(${1:id})"
  },
  {
    "name": "RemoveLayer",
    "helpId": "RemoveLayer",
    "shortDescription": "remove a layer",
    "version": "1.5",
    "synopsis": "RemoveLayer(id)",
    "functionDocs": "This function removes the layer or layer group specified by `id`. This is basically the same as the [Undo()](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html) command with the exception that this function accepts layer ids directly. With [Undo()](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html) you would have to specify a type, an id and maybe also an undo-level, now you can just specify the layer id which should be much more convenient.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer or layer group to be removed",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RemoveLayer(${1:id})"
  },
  {
    "name": "RemoveLayerFX",
    "helpId": "RemoveLayerFX",
    "shortDescription": "remove a layer with transition effects",
    "version": "3.0",
    "synopsis": "[handle] = RemoveLayerFX(id[, table])",
    "functionDocs": "This function is an extended version of the [RemoveLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveLayer_.html) command. It removes the layer or layer group specified by `id` and uses one of the many Hollywood transition effects. You can also specify the speed for the transition and an optional argument.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type` Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed` Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter` Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async` You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `RemoveLayerFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `NoBorderFade` If the layer to be removed has a border, do not gradually fade out the border but remove it in one go at the end of the transition effect. (V5.0)\n\n- `BorderFX`: If the layer to be removed has a border, Hollywood will only apply the transition effect to the border if the layer is a transparent layer with text or pixel graphics. For non-transparent and vector graphics layers a generic fade effect will be used instead because otherwise there would be visual glitches between the penultimate and final effect frame because of differences in the border algorithms. If you don't care about this glitch and want to force Hollywood to always apply the transition effect to the border, set this tag to `True`. To force Hollywood to always use the generic fade mode, set this tag to `False`. (V9.0)\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to remove\n* `table` — optional: table configuring the transition",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nRemoveLayerFX(5, #CROSSFADE)             ; old syntax\n\nOR\n\nRemoveLayerFX(5, {Type = #CROSSFADE})    ; new syntax\n```\n\nThe above code removes layer 5 with a nice crossfade transition.",
    "platforms": ["All"],
    "insertText": "RemoveLayerFX(${1:id})"
  },
  {
    "name": "RemoveLayers",
    "helpId": "RemoveLayers",
    "shortDescription": "remove all layers",
    "version": "8.0",
    "synopsis": "RemoveLayers()",
    "functionDocs": "This function removes all layers in the current background picture. When this function returns, they will no longer be visible. If you want to remove all layers but still keep their graphics on screen, use [FreeLayers()](https://www.hollywood-mal.com/docs/html/hollywood/FreeLayers_.html) instead.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RemoveLayers()"
  },
  {
    "name": "RenderLayer",
    "helpId": "RenderLayer",
    "shortDescription": "render layer to brush layer",
    "version": "10.0",
    "synopsis": "RenderLayer(id)",
    "functionDocs": "This function converts the layer specified by `id` to a brush layer. This usually means sacrificing quality because brushes are rasterized and thus cannot be scaled or transformed without losses in quality which is why this function is probably of not much use.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer to be rendered",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RenderLayer(${1:id})"
  },
  {
    "name": "ResumeLayer",
    "helpId": "ResumeLayer",
    "shortDescription": "resume a paused video layer",
    "version": "6.0",
    "synopsis": "ResumeLayer(id)",
    "functionDocs": "This function resumes the playback of the paused video layer specified by `id`. You can pause the playback of a video layer using the [PauseLayer()](https://www.hollywood-mal.com/docs/html/hollywood/PauseLayer_.html) command.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer to be resumed",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ResumeLayer(${1:id})"
  },
  {
    "name": "RotateLayer",
    "helpId": "RotateLayer",
    "shortDescription": "rotate a layer",
    "version": "4.0",
    "synopsis": "RotateLayer(id, angle[, smooth])",
    "functionDocs": "This function rotates the layer or layer group specified by `id` by the specified angle (in degrees). A positive angle rotates anti-clockwise, a negative angle rotates clockwise. Additionally, you can choose to have the rotated graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be rotated using anti-alias.\n\nIf the specified layer is a vector layer (e.g. circle, polygon, TrueType text or a rectangle) Hollywood will rotate the layer without any loss in quality because vector graphics can be freely transformed. Thus, the `smooth` argument does not have any function if the specified layer is a vector layer. If the layer uses raster graphics, however, normal raster-based rotation will be used.\n\nIn contrast to rotating brushes using [RotateBrush()](https://www.hollywood-mal.com/docs/html/hollywood/RotateBrush_.html) layers always keep their original data so there will not be any loss in quality if you rotate a layer forth by some degrees and then back by the same degrees. This is perfectly possible and does not generate any quality losses with `RotateLayer()`.",
    "inputsDocs": "* `id` — layer or layer group to rotate\n* `angle` — rotation angle in degrees\n* `smooth` — optional: whether or not anti-aliased rotation shall be used (only applicable if the layer is not a vector layer)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RotateLayer(${1:id}, ${2:angle})"
  },
  {
    "name": "ScaleLayer",
    "helpId": "ScaleLayer",
    "shortDescription": "scale a layer",
    "version": "4.0",
    "synopsis": "ScaleLayer(id, width, height[, smooth])",
    "functionDocs": "This command scales the layer or layer group specified by `id` to the specified width and height. Optionally, you can choose to have the scaled graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be scaled using anti-alias.\n\nIf the specified layer is a vector layer (e.g. circle, polygon, TrueType text or a rectangle), Hollywood will scale the layer without any loss in quality because vector graphics can be freely transformed. Thus, the `smooth` argument does not have any function if the specified layer is a vector layer. If the layer uses raster graphics, however, normal raster-based rotation will be used.\n\nIn contrast to scaling brushes using [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html) layers always keep their original data so there will not be any loss in quality if you scale a layer to (20,15) and then back to (640,480). This is perfectly possible.\n\nThe `width` and `height` arguments can also be a string containing a percent specification, e.g. \"50%\".\n\nIf you prefer to work with relative scaling factors instead of absolute pixel values, then you should use the `ScaleX` and `ScaleY` tags of the [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) function instead.",
    "inputsDocs": "* `id` — identifier of the layer to scale\n* `width` — desired new width for the layer\n* `height` — desired new height for the layer\n* `smooth` — optional: whether or not anti-aliased scaling shall be used (only applicable if the layer is not a vector layer)",
    "example": "```\nScaleLayer(1,640,480)\n```\n\nScales layer 1 to a resolution of 640x480.",
    "platforms": ["All"],
    "insertText": "ScaleLayer(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SeekLayer",
    "helpId": "SeekLayer",
    "shortDescription": "seek to a certain position in a video layer",
    "version": "6.0",
    "synopsis": "SeekLayer(id, pos)",
    "functionDocs": "You can use this function to seek to the specified position in the video layer specified by `id`. The video layer does not have to be playing. If the video layer is playing and you call `SeekLayer()`, it will immediately skip to the specified position. The position is specified in milliseconds. Thus, if you want to skip to the position 3:24, you would have to pass the value 204000 because 3 * 60 * 1000 + 24 * 1000 = 204000.\n\nPlease note that video seeking is a complex operation. There are video formats which do not have any position lookup tables so that Hollywood first has to approximate the seeking position and then do some fine- tuning and keyframe seeking so that the final position can always be a bit off from the position you specified in `SeekLayer()`. It can also happen that Hollywood will not seek directly to a keyframe so there might be artefacts from previous frames left on the screen.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer to seek\n* `pos` — new position for the video (in milliseconds)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SeekLayer(${1:id}, ${2:pos})"
  },
  {
    "name": "SelectLayer",
    "helpId": "SelectLayer",
    "shortDescription": "select layer as output device",
    "version": "4.7",
    "synopsis": "SelectLayer(id, [, mode, frame, combomode])",
    "functionDocs": "This function selects the specified layer as the current output device. This means that all graphics data that is rendered by Hollywood will be written to this layer. When [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) is called, the layer will be refreshed automatically to reflect the changes you made to it. You have to specify a layer identifier in the first argument. If that layer is an anim layer, you will also have to specify the frame you would like to select in the third argument.\n\nThe optional `mode` argument defaults to `#SELMODE_NORMAL` which means that only the color channels of the layer will be altered when you draw to it. The transparency channel of the layer (can be either a mask or an alpha channel) will never be altered. You can change this behaviour by using `#SELMODE_COMBO` in the optional `mode` argument. If you use this mode, every Hollywood graphics command that is called after `SelectLayer()` will draw into the color and transparency channel of the layer. If the layer does not have a transparency channel, `#SELMODE_COMBO` behaves the same as `#SELMODE_NORMAL`.\n\nStarting with Hollywood 5.0 you can use the optional `combomode` argument to specify how `#SELMODE_COMBO` should behave. If `combomode` is set to 0, the color and transparency information of all pixels in the source image are copied to the destination image in any case - even if the pixels are invisible. This is the default behaviour. If `combomode` is set to 1, only the visible pixels are copied to the destination image. This means that if the alpha value of a pixel in the source image is 0, i.e. invisible, it will not be copied to the destination image. Hollywood 6.0 introduces the new combomode 2. If you pass 2 in `combomode`, Hollywood will blend color channels and alpha channel of the source image into the destination image's color and alpha channels. When you draw the destination image later, it will look as if the two images had been drawn on top of each other consecutively. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes.\n\nAn alternative way to draw into the transparency channels of a layer is to do this separately using [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) or [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html). These two commands, however, will write data to the transparency channel only. They will not touch the color channel. So if you want both channels, color and transparency, to be affected, you need to use `SelectLayer()` with `mode` set to `#SELMODE_COMBO`.\n\nWhen you are finished with rendering to your layer and want to use your display as output device again, just call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html). If your layer is visible, Hollywood will refresh it automatically now to reflect the changes you made to it. It is important to take into account that your changes won't be visible before you call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nNote that you must not call any commands which modify your layer while it is selected as the output device. For example, you must not call [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) or [RemoveLayer()](https://www.hollywood-mal.com/docs/html/hollywood/RemoveLayer_.html) while it is the output device.\n\nOnly commands that output graphics directly can be used after `SelectLayer()`. You may not call animated functions like [MoveAnim()](https://www.hollywood-mal.com/docs/html/hollywood/MoveAnim_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectLayer()` is active.\n\nPlease note that if you use this command on a vector layer (for example a polygon or text layer), the layer will get rasterized automatically. This means that, effectively, the former vector layer will now be a brush layer. The difference between the two is only visible when it comes to transforming the layer: A vector layer can be freely transformed without any losses in quality. A rasterized brush layer, on the other hand, will always have losses in quality when it is transformed.",
    "inputsDocs": "* `id` — layer which shall be used as output device\n* `mode` — optional: rendering mode to use (see above); this can be either `#SELMODE_NORMAL` or `#SELMODE_COMBO`; defaults to `#SELMODE_NORMAL`\n* `frame` — optional: in case the specified layer is an anim layer, this argument specifies which frame to select (first frame=1)\n* `combomode` — optional: mode to use when `#SELMODE_COMBO` is active (see above); defaults to 0 (V5.0)",
    "example": "```\nSelectLayer(1)\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 320, 256, #RED)\nEndSelect()\n```\n\nThe code above draws a 320x256 rectangle to layer 1.",
    "platforms": ["All"],
    "insertText": "SelectLayer(${1:id}, ${2:})"
  },
  {
    "name": "SetLayerAnchor",
    "helpId": "SetLayerAnchor",
    "shortDescription": "change anchor point of layer",
    "version": "4.5",
    "synopsis": "SetLayerAnchor(id, ax, ay)",
    "functionDocs": "This function can be used to change the anchor point of a layer. The anchor point is a point inside the layer that is used as the origin for all layer transformations (scale, rotate) and also the position of a layer is always relative to the anchor point. Sometimes the anchor point is also referred to as the 'hot spot' of a layer.\n\nThe anchor point can be any point inside the layer ranging from 0.0/0.0 (top left corner of the layer) to 1.0/1.0 (bottom right corner of the layer). The center of the layer would be defined by an anchor point of 0.5/0.5.\n\nFor example, if you want to have a layer that shall be rotated around its center point, then you need to set this layer's anchor point to 0.5/ 0.5. If it shall be rotated around its top left corner, you have to use 0.0/0.0 as the anchor point. To rotate around the layer's bottom right corner, use 1.0/1.0 as the anchor point. The usual setting is to rotate around the center, so you should normally set the anchor point to 0.5/0.5.\n\nWhen using an anchor point different than 0.0/0.0, keep in mind that all position specifications will be relative to the anchor point now. This means that a position of 0:0 does not necessarily mean that the layer will appear at the top-left display corner. For example, if you have a layer with an anchor point of 1.0/1.0, moving this layer to position 0:0 (top left corner of display) would make the layer pretty much invisible because its anchor point is set to the bottom-right corner of the layer. Thus, if you move a layer with a bottom-right anchor point to position 0:0, it means that the bottom-right corner of the layer will actually appear at 0:0. This obviously means that only a single pixel of the layer will be visible. The rest will be off-screen.\n\nBy default, all layers use an anchor point of 0.0/0.0.\n\nStarting with Hollywood 10.0, this function can also operate on layer groups so you can also pass the name of a layer group to this function.",
    "inputsDocs": "* `id` — identifier of a layer\n* `ax` — x coordinate of anchor point; must be between 0.0 and 1.0\n* `ay` — y coordinate of anchor point; must be between 0.0 and 1.0",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nBox(300, 200, 300, 200, #RED)\nWaitLeftMouse\nSetLayerAnchor(1, 0.5, 0.5)\nWaitLeftMouse\nSetLayerAnchor(1, 1.0, 1.0)\nWaitLeftMouse\n```\n\nThe code above demonstrates three different anchor points: First, at 0.0/0.0, then at 0.5/0.5, finally at 1.0/1.0. You can see that the layer will move with every call to `SetLayerAnchor()`. That is because the position of a layer is always relative to its anchor point. Thus, the layer will move although its position will always be 300:200.",
    "platforms": ["All"],
    "insertText": "SetLayerAnchor(${1:id}, ${2:ax}, ${3:ay})"
  },
  {
    "name": "SetLayerBorder",
    "helpId": "SetLayerBorder",
    "shortDescription": "enable/disable border for layer",
    "version": "5.0",
    "synopsis": "SetLayerBorder(layer, enable[, color, size])",
    "functionDocs": "This command can be used to enable or disable a border effect for the specified layer or layer group depending on whether the `enable` argument is set to `True` or `False`. In the third argument you can specify the color of the border as an [ARGB color value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html). The optional `size` argument can be used to control the size of the border. The size value specifies the desired border size on each side of the layer.\n\nYou can also use the [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) function to enable/disable the border frame of a layer, or to modify the border's parameters.",
    "inputsDocs": "* `layer` — layer or layer group to use\n* `enable` — whether to enable or disable the layer border frame (`True` means enable, `False` means disable)\n* `color` — optional: color that shall be used by the border in [ARGB notation](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) (defaults to `#BLACK`)\n* `size` — optional: size of border on each side (defaults to 2)",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nBox(#CENTER, #CENTER, 320, 240, #RED)\nSetLayerBorder(1, True, #WHITE, 10)\n```\n\nThe code above draws a red box to the center of the display and then adds a 10 pixel white border frame to it.",
    "platforms": ["All"],
    "insertText": "SetLayerBorder(${1:layer}, ${2:enable})"
  },
  {
    "name": "SetLayerDepth",
    "helpId": "SetLayerDepth",
    "shortDescription": "set layer palette depth",
    "version": "9.0",
    "synopsis": "SetLayerDepth(id, depth[, t])",
    "functionDocs": "This function sets the depth of the palette of the layer specified by `id` to the depth specified in `depth`. `depth` must be a bit depth ranging from 1 (= 2 colors) to 8 (= 256 colors). See [Palette overview](https://www.hollywood-mal.com/docs/html/hollywood/PaletteOverview_.html). Note that if the specified depth is less than that of the pixel data attached to the palette, the pixel data will be remapped to match the new depth.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Frame`: If the layer is an anim layer, you can set this tag to specify the frame whose depth should be set. Frames are counted from 1. Defaults to the anim layer's current frame.\n\n- `Remap`: If this tag is set to `False`, out-of-range pens will not be remapped to existing pens but instead they will simply be set to the pen specified in the `ClipPen` tag (see below), i.e. no remapping will take place. Note that `Remap` is only effective when reducing colors. If the new depth has more pens than the old depth, `Remap` won't do anything. (V10.0)\n\n- `ClipPen`: This is only used in case the `Remap` tag is set to `False` (see above). In that case, out-of-range pens will not be remapped to existing pens but will simply be set to the pen specified in the `ClipPen` tag, i.e. no remapping will take place. Note that `ClipPen` is only effective when reducing colors. If the new depth has more pens than the old depth, `ClipPen` won't do anything. (V10.0)\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer to modify\n* `depth` — desired new palette depth (ranging from 1 to 8)\n* `t` — optional: table argument containing further options (see above)",
    "example": "```\nSetLayerDepth(1, 8)\n```\n\nThe code above changes the depth of layer 1's palette to 8 (= 256 colors).",
    "platforms": ["All"],
    "insertText": "SetLayerDepth(${1:id}, ${2:depth})"
  },
  {
    "name": "SetLayerFilter",
    "helpId": "SetLayerFilter",
    "shortDescription": "enable/disable filters for layer",
    "version": "5.0",
    "synopsis": "SetLayerFilter(layer, table)",
    "functionDocs": "This command can be used to control which filters are applied to a layer, and in what order they will be applied to the layer. You have to pass a table to this function that contains a number of subtables, each of which contains information for a single layer filter. The following tags are supported for each subtable:\n\n- `Name` Contains the name of the filter that this subtable element shall configure. This tag is mandatory and must always be specified in every subtable so that `SetLayerFilter()` knows the filter the subtable is addressing. Please see below for a list of supported filter types.\n\n- `Args` Contains an array of arguments for the filter specified in the `Name` tag. The values passed here depend on the filter specified. Some filters like `XFlip` or `Gray` do not require any arguments at all. In that case, you do not have to pass the `Args` table. Please see below to learn about the arguments required by the single filters. Also note that `SetLayerFilter()` has fallback arguments for every filter it supports. Thus, you can also leave out arguments. In that case, `SetLayerFilter()` will use its default settings for the respective filter.\n\n- `Disable` This tag can be used to enable or disable a filter. Pass `False` here to enable the filter, or `True` to disable it. This tag is optional. If it is not specified, the filter will get enabled by default.\n\n- `Priority` This tag allows you to specify a priority level for the current filter. A priority level is simply a numeric value which is then used by `SetLayerFilter()` to find out the order in which the filters should be applied. The priority level must be between 0 (= lowest priority) and 255 (= highest priority). As an example, if you assign a priority of 10 to the `Blur` filter, and a priority of 9 to the `Tint` filter, the blur filter will be applied before the tint filter. This tag will default to 0 if not specified.\n\nA list of supported layer filters follows below. Please note that the arguments must not be passed to the filter as a named table tag but sequentially in the `Args` array. I.e. for the `Modulate` filter, you would put the brightness setting in array element 0, the saturation setting in array element 1, and the hue setting in element 2. The order in which the single arguments are listed below corresponds to the order in which they are expected in the `Args` table. Here is the list now:\n\n- `\"Blur\"` This filter will apply a Gaussian blur to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the blur radius. The greater the value you specify here, the longer the blurring will take.\n\n- `\"Charcoal\"` This filter will apply a charcoal filter to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the effect radius. The greater the value you specify here, the longer the calculation will take.\n\n- `\"Contrast\"` This filter will enhance or reduce color contrast in the layer. The following arguments need to be passed:\n\n  - `Inc`: Pass `True` here to enhance the color contrast, or `False` to decrease the color contrast.\n\n  - `Repeat`: Specifies how many times the effect should be repeated. This is useful for a more pronounced effect. By default this is set to 1 which means that the effect is only applied once. If you would like to have two passes, specify 2 here, etc. Remember that the greater the number you specify here is, the longer the computation of the result will take.\n\n- `\"Edge\"` This filter will apply an edge detection filter to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the effect radius. The greater the value you specify here, the longer the calculation will take.\n\n- `\"Emboss\"` This filter will apply an emboss filter to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the effect radius. The greater the value you specify here, the longer the calculation will take.\n\n- `\"Gamma\"` This filter can be used to apply gamma correction to the layer. The following arguments need to be passed:\n\n  - `Red`: Gamma correction for red color channel.\n\n  - `Green`: Gamma correction for green color channel.\n\n  - `Blue`: Gamma correction for blue color channel.\n\n  Each value must be floating point value. A value of 1.0 means no change, a value smaller than 1.0 darkens the channel, a value greater than 1.0 lightens it. See [GammaBrush](https://www.hollywood-mal.com/docs/html/hollywood/GammaBrush_.html).\n\n- `\"Grayscale\"` This filter will map the layer to gray. There are no arguments for this filter.\n\n- `\"Invert\"` This filter will invert the colors of the layer. There are no arguments for this filter.\n\n- `\"Modulate\"` This filter can be used to modulate brightness, saturation, and hue values of a layer. The following arguments need to be passed:\n\n  - `Brightness`: Desired brightness modulation.\n\n  - `Saturation`: Desired saturation modulation.\n\n  - `Hue`: Desired hue modulation.\n\n  Each value must be floating point value. A value of 1.0 means no change, a value smaller than 1.0 reduces the brightness/saturation/hue, while a value greater than 1.0 enhances it. See [ModulateBrush](https://www.hollywood-mal.com/docs/html/hollywood/ModulateBrush_.html).\n\n- `\"Monochrome\"` This filter will apply a black and white filter to this layer. The following arguments need to be passed:\n\n  - `Dither`: Specifies whether or not dithering should be used. Pass `True` or `False` here. Dithering looks better, but is of course slower.\n\n- `\"OilPaint\"` This filter will apply an oil paint filter to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the effect radius. The greater the value you specify here, the longer the calculation will take.\n\n- `\"Pixelate\"` This filter will zoom the pixel cells of the layer to the specified size. The following arguments need to be passed:\n\n  - `CellSize`: Specifies the desired zoom size. Every pixel of the layer will be zoomed to this size, starting from the top-left corner of the layer.\n\n  See [PixelateBrush](https://www.hollywood-mal.com/docs/html/hollywood/PixelateBrush_.html).\n\n- `\"Quantize\"` This filter will reduce the number of colors in the layer. The following arguments need to be passed:\n\n  - `Colors`: Desired number of colors. This must be between 1 and 256.\n\n  - `Dither`: `True` to enable dithering, `False` to disable it.\n\n  See [QuantizeBrush](https://www.hollywood-mal.com/docs/html/hollywood/QuantizeBrush_.html). (V6.0)\n\n- `\"SepiaTone\"` Applies a sepia-tone filter to the layer. The following arguments need to be passed:\n\n  - `Level`: Desired sepia-toning level. This must be between 0 and 255, or alternatively it can be a string containing a percentage specification. The usual setting is \"80%\" (i.e. a level of about 204).\n\n  See [SepiaToneBrush](https://www.hollywood-mal.com/docs/html/hollywood/SepiaToneBrush_.html).\n\n- `\"Sharpen\"` Applies a sharpening filter to the layer. The following arguments need to be passed:\n\n  - `Radius`: Specifies the sharpen radius. The greater the value you specify here, the longer the calculation will take.\n\n- `\"Solarize\"` Applies a solarization effect to the layer. The following arguments need to be passed:\n\n  - `Level`: Desired solarization level (must be between 0 and 255).\n\n  See [SolarizeBrush](https://www.hollywood-mal.com/docs/html/hollywood/SolarizeBrush_.html).\n\n- `\"Swirl\"` Swirls the layer by the specified number of degrees. The following arguments need to be passed:\n\n  - `Degrees`: Specifies the desired swirling amount. This can be between 0 (no swirling) and 360 (full swirl).\n\n- `\"Tint\"` This filter will tint the layer with the specified color at the specified ratio. The following arguments need to be passed:\n\n  - `Color`: Specifies the tinting color in [RGB format](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).\n\n  - `Ratio`: Specifies the tinting ratio. This can be a value between 0 (= no tinting) and 255 (= full tinting), or a string containing a percentage specification (e.g. \"50%\" corresponds to a ratio of 128).\n\n- `\"WaterRipple\"` This filter will apply water ripples to the layer. The following arguments need to be passed:\n\n  - `Wavelength`: Desired wavelength for the effect.\n\n  - `Ampltiude`: Desired ripple amplitude.\n\n  - `Phase`: Desired ripple phase.\n\n  - `CX`: X center point of water ripple.\n\n  - `CY`: Y center point of water ripple.\n\n  See [WaterRippleBrush](https://www.hollywood-mal.com/docs/html/hollywood/WaterRippleBrush_.html).\n\n- `\"XFlip\"` This will mirror the layer on the x-axis. There are no arguments for this filter.\n\n- `\"YFlip\"` This will mirror the layer on the y-axis. There are no arguments for this filter.\n\nTo disable all layer filters, you can pass the special value 0 instead of a table in the second argument. `SetLayerFilter()` will then cancel all filters that are currently active on the specified layer.\n\nPlease note that this command will not reset any existing filter settings when it is called. Instead, all existing filters settings will be kept and the new settings will merely be merged with the old ones. So if you have a layer that has several filters attached and you only want to change the configuration of one of these filters, it is sufficient to just pass a subtable for this single filter to `SetLayerFilter()`. It is not necessary to pass all the other filters to `SetLayerFilter()` again.\n\nAlso note that layer filters can get quite heavy on the CPU; especially when using transition effects on a layer that has filters attached. In that case, the filters have to be recalculated for each new frame of the transition effect. Depending on the complexity of the filter, this can take some time.\n\nYou can also use the [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) command to change the configuration of one or more layer filters.\n\nStarting with Hollywood 10.0, this function can also operate on layer groups so you can also pass the name of a layer group to this function.",
    "inputsDocs": "* `layer` — layer or layer group to use\n* `table` — a table containing one or more subtables that contain a description of filters to apply to or remove from the layer; see above for more information; to remove all filters from a layer, pass 0 here instead of a table",
    "example": "```\ntable = {\n{Name = \"YFlip\"},\n{Name = \"Modulate\", Args = {1.0, 2.0, 1.0}, Priority = 10},\n{Name = \"Swirl\", Args = {128}, Priority = 9} }\nSetLayerFilter(1, table)\n```\n\nThe code above increases the saturation of layer 1 by 200%, swirls the layer by 180 degrees and then mirrors it on the y-axis.\n\n---\n\n```\nSetLayerFilter(1, {{Name = \"YFlip\", Disable = True}})\n```\n\nThe code above removes the \"YFlip\" filter from layer 1 but keeps the other two filters (modulate and swirl).",
    "platforms": ["All"],
    "insertText": "SetLayerFilter(${1:layer}, ${2:table})"
  },
  {
    "name": "SetLayerName",
    "helpId": "SetLayerName",
    "shortDescription": "assign a layer name",
    "version": "2.0",
    "synopsis": "SetLayerName(id, name$)",
    "functionDocs": "You can use this function to assign a name to the layer specified by `id`. This is very useful if you have multiple layers whose identifiers change constantly (e.g. because you frequently remove and add layers). If you give your layers names, you do not have to worry about on which position the layer currently resides. You can easily access it by just using its name. All functions which accept layer id's, will also accept names.\n\nPlease note that the name for the layer must be unique within the current background picture's layer cache. Layer names are case insensitive, i.e. \"layer1\" is the same layer as \"LAYER1\".\n\nTo find out which id a named layer currently occupies, you can use the `#ATTRLAYERID` attribute with the [GetAttribute()](https://www.hollywood-mal.com/docs/html/hollywood/GetAttribute_.html) command.\n\nIf you want to assign a name to the newest layer, simply pass 0 and Hollywood will automatically use the top layer. To remove a layer's name, pass an empty string in `name$`.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer to be named or 0 for the last layer added\n* `name$` — desired name for the layer",
    "example": "```\nEnableLayers()\nSetFillStyle(#FILLCOLOR)\n\nBox(0, 0, 100, 100, #RED)      ; create layer 1\nBox(50, 50, 100, 100, #GREEN)  ; create layer 2\n\nSetLayerName(1, \"redbox\")      ; give them names\nSetLayerName(2, \"greenbox\")    ; give them names\n\nSwapLayers(\"redbox\", \"greenbox\")  ; swap 'em! Now greenbox is layer 1\n                                  ; and redbox is layer 2!\n\nShowLayer(\"redbox\", #RIGHT, #BOTTOM)  ; move layer 2 to bottom-right\nShowLayer(\"greenbox\", #LEFT, #TOP)    ; move layer 1 to top-left\n```\n\nYou see that it is much easier to work with string names for layers instead of layer id's which are relative to the layer's position.",
    "platforms": ["All"],
    "insertText": "SetLayerName(${1:id}, ${2:name$})"
  },
  {
    "name": "SetLayerPalette",
    "helpId": "SetLayerPalette",
    "shortDescription": "change layer palette",
    "version": "9.0",
    "synopsis": "SetLayerPalette(id, palid[, t])",
    "functionDocs": "This function replaces the palette of the layer specified by `id` with the palette specified by `palid`. The optional table argument `t` allows you to specify some further options. The following tags are currently supported by the optional table argument `t`:\n\n- `Remap`: If this is set to `True`, the pixels of the layer will be remapped to match the colors of the new palette as closely as possible. By default, there will be no remapping and the actual pixel data of the layer will remain untouched. If you want remapping, set this tag to `True` but be warned that remapping all pixels will of course take much more time than just setting a new palette without remapping. Defaults to `False`.\n\n- `Dither`: If the `Remap` tag (see above) has been set to `True`, you can use the `Dither` tag to specify whether or not dithering should be used. Defaults to `True` which means dithering should be used.\n\n- `CopyCycleTable`: Palettes can have a table containing color cycling information. If you set this tag to `True`, this cycle table will be copied to the layer as well. Defaults to `False`.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer to use\n* `palid` — identifier of palette to copy to layer\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetLayerPalette(${1:id}, ${2:palid})"
  },
  {
    "name": "SetLayerPen",
    "helpId": "SetLayerPen",
    "shortDescription": "change layer palette pen",
    "version": "9.0",
    "synopsis": "SetLayerPen(id, pen, color)",
    "functionDocs": "This function sets the color of the pen specified by `pen` to the color specified by `color` in the palette of the layer specified by `id`.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer\n* `pen` — pen you want to modify (starting from 0)\n* `color` — new color for the pen, must be specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\nSetLayerPen(1, 0, #RED)\n```\n\nThe code above sets pen 0 to red in the palette of layer 1.",
    "platforms": ["All"],
    "insertText": "SetLayerPen(${1:id}, ${2:pen}, ${3:color})"
  },
  {
    "name": "SetLayerShadow",
    "helpId": "SetLayerShadow",
    "shortDescription": "enable/disable drop shadow for layer",
    "version": "5.0",
    "synopsis": "SetLayerShadow(layer, enable[, color, radius, size, dir])",
    "functionDocs": "This command can be used to enable or disable a shadow effect for the specified layer or layer group depending on whether the `enable` argument is set to `True` or `False`. In the third argument you can specify the color of the shadow. This will usually be `#BLACK` but combined with a transparency value because simple opaque black does not look too good as a shadow. You can use the [ARGB()](https://www.hollywood-mal.com/docs/html/hollywood/ARGB_.html) function to combine a transparency value and a color into an [ARGB color](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html). The optional arguments `radius` and `size` can be used to control the shadow's smoothness and size. Usually, both values are set to about the same value. Finally, the `dir` argument can be used to control the shadow's direction. This argument must be set to one of Hollywood's [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html). See [Directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html).\n\nPlease note that drop shadows can become quite heavy on the CPU because Hollywood has to recalculate them whenever the layer's contents change. Normally, this does not happen too often. There is one prominent exception, though: When you run a transition effect on a layer that has a drop shadow. In that case, Hollywood has to remake the drop shadow for every new frame of the transition effect. On slower systems this can quite possibly kill the show so that you might want to turn off drop shadows before running a transition effect on a layer.\n\nYou can also use the [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) function to enable/disable the drop shadow of a layer, or to modify the drop shadow's parameters.",
    "inputsDocs": "* `layer` — layer or layer group to use\n* `enable` — whether to enable or disable the layer drop shadow (`True` means enable, `False` means disable)\n* `color` — optional: color that shall be used by the drop shadow in[ARGB notation](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) (defaults to $80000000 which means black with 50% transparency)\n* `radius` — optional: radius for shadow smoothing (defaults to 5)\n* `size` — optional: size of shadow shift from main layer (defaults to 4)\n* `dir` — optional: light direction of drop shadow (defaults to `#SHDWSOUTHEAST`)",
    "example": "```\nEnableLayers\nSetFillStyle(#FILLCOLOR)\nBox(#CENTER, #CENTER, 320, 240, #RED)\nSetLayerShadow(1, True)\n```\n\nThe code above draws a red box to the center of the display and then adds a shadow to it.",
    "platforms": ["All"],
    "insertText": "SetLayerShadow(${1:layer}, ${2:enable})"
  },
  {
    "name": "SetLayerStyle",
    "helpId": "SetLayerStyle",
    "shortDescription": "change the style of one or more layers",
    "version": "4.0",
    "synopsis": "SetLayerStyle(id1, style1, ...)",
    "functionDocs": "This command can be used to modify nearly all attributes of one or more layers or layer groups with a single call. It is a very powerful command which can be used to realize complex animation mechanisms in a very easy and straightforward way. For each layer or layer group whose style you want to modify, you always have to pass the layer or group id followed by a table containing the attributes you want to change. You can repeat this pattern as many times as you need it.\n\nThe configuration of the style table depends on the type of layer specified. However, some style elements can be used with all layer types. These generic layer styles will be covered first. The specific layer styles dependent on layer type will be dealt with below.\n\nThe following style elements are generic and can thus be used with every layer:\n\n- `X,Y` Specifies the position for the layer. If not specified the layer will keep its current position.\n\n- `Width,Height` Can be used to scale the layer to new dimensions. This can either be a numerical value specifying a new pixel size or a string containing a percent specification (e.g. \"50%\"). See [ScaleLayer](https://www.hollywood-mal.com/docs/html/hollywood/ScaleLayer_.html).\n\n- `Rotate` This style element can be used to control layer rotation. You have to pass a value in degrees here. A positive value means anti-clockwise rotation, negative values rotate in clockwise direction. See [RotateLayer](https://www.hollywood-mal.com/docs/html/hollywood/RotateLayer_.html)..\n\n- `SmoothScale` Specifies whether or not smooth scaling and rotation shall be used on this layer. This is only applicable for non-vector layers and of course it only makes sense when the layer is scaled or rotated.\n\n- `Transparency` Use this style element to modify the transparency setting of a layer. This can be either a value ranging from 0 (= no transparency) to 255 (= full transparency) or a string containing a percent specification (e.g. \"50%\" which means half transparency). See [SetLayerTransparency](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerTransparency_.html).\n\n- `Tint` Use this style element to modify the tint setting of a layer. This can be either a value ranging from 0 (= no tinting) to 255 (= opaque tinting) or a string containing a percent specification (e.g. \"50%\" which means half tinting). If this is set to non zero, the layer will be tinted with the color specified in `TintColor` at the specified level. See [SetLayerTint](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerTint_.html).\n\n- `TintColor` Specifies the color to use for tinting. Can only be used in union with the `Tint` style element.\n\n- `Hidden` You can use this style element to show or hide the specified layer. Set it to `True` to hide the layer or to `False` to show it. See [HideLayer](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html).\n\n- `Type` This style element allows you to change the layer type. Please note that if you change the type of a layer, you will most likely need to provide further information to `SetLayerStyle()`. For instance, if you choose to convert a `#ELLIPSE` layer into a `#BRUSH` layer, it is mandatory that you also specify the `ID` style element to tell Hollywood which brush shall replace the ellipse layer. Hollywood will try to inherit general style elements like color, position, size from the previous layer type, but for certain type conversions you need to specify additional elements. If `Type` is specified, only style elements that are supported by the newly set type will be handled. (V4.5)\n\n- `ClipRegion` Use this style to change the clipping region of this layer. Every layer can have its private clip region. See [SetClipRegion](https://www.hollywood-mal.com/docs/html/hollywood/SetClipRegion_.html).\n\n- `ScaleX, ScaleY` This is an alternative way of scaling the layer. You have to pass a floating point value here that indicates a scaling factor. For example, 0.5 means half the size, 2.0 means twice the size. This is especially convenient if you would like to keep the proportions of the layer that you want to scale. If you use the same factor for `ScaleX` and `ScaleY`, the proportions of the layer will remain intact. Please note that `ScaleX` / `ScaleY` and `Width` / `Height` are mutually exclusive. You must not mix both groups. Either use `ScaleX` / `ScaleY` or stick to `Width` / `Height`. (V4.5)\n\n- `Transform` This tag allows you to apply a 2x2 transformation matrix to this layer. Transformation matrices are useful if you want to apply scaling and rotation at the same time, or if you want to mirror a layer. You have to pass a table to `Transform`. The table must contain the four constituents of a 2x2 transformation matrix in the following order: `sx`, `rx`, `ry`, `sy`. See [TransformBrush](https://www.hollywood-mal.com/docs/html/hollywood/TransformBrush_.html). Please note that the `Transform` tag is mutually exclusive with the following tags: `Width` / `Height` / `ScaleX` / `ScaleY` / `Rotate`. You must not combine it with any of these tags. (V4.5)\n\n- `AnchorX, AnchorY` You can use these two tags to change the anchor point of this layer. The anchor point can be any point between 0.0/ 0.0 (top left corner of the layer) and 1.0/1.0 (bottom right corner of the layer). The center of the layer would be defined by an anchor point of 0.5/0.5. All transformations (scaling, rotation etc.) will be applied relative to the anchor point. Also, the position of a layer is always relative to its anchor point. See [SetLayerAnchor](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerAnchor_.html). (V4.5)\n\n- `NoClipTransform` This tag can be used to disable automatic clip region transformation. By default, when you transform a layer, its clip region will be transformed in the same vein. To forbid this behaviour, set `NoClipTransform` to `True`.\n\n- `TextureX, TextureY` These tags only work with graphics primitives that are filled using `#FILLTEXTURE` style. If that is the case, you can use these tags to control the start offset inside the texture brush. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). (V4.6)\n\n- `Z` This tag can be used to change the z-position of this layer. The z-position of a layer is its position in the hierarchy of layers. The first (i.e. backmost layer) has a z-position of 1, the last (i.e. frontmost) layer's z-position is equal to the number of layers currently present. You need to pass the new desired z-position for the specified layer in this tag. The layer will then assume exactly this z-position, existing layers that are on or after this z-position will be shifted down. To move a layer all the way to the front (i.e. highest z-position), you can pass the special value 0; to move a layer all the way to the back, specify 1. See [SetLayerZPos](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerZPos_.html). (V4.7)\n\n- `TranslateX, TranslateY` These two can be used to translate a layer by a specified delta x and delta y offset. A layer translation means moving the layer relative by the specified delta offsets relative to its current position. Thus, a translation of (1,1) would move the layer one pixel to the right, and one pixel to the bottom. See [TranslateLayer](https://www.hollywood-mal.com/docs/html/hollywood/TranslateLayer_.html). Please note: These two tags and the `X` / `Y` tags are mutually exclusive. You cannot use them together. (V4.7)\n\n- `Shadow` This tag can be used to turn the drop shadow of a layer on and off. If you set this tag to `True`, the drop shadow will be turned on, else it will be turned off. If you are turning it on, you can configure the look of the shadow using the `ShadowDir`, `ShadowSize`, `ShadowColor`, and `ShadowRadius` tags. See below for more information. See [SetLayerShadow](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerShadow_.html). (V5.0)\n\n- `ShadowDir` Specifies the direction of the shadow for this layer. This must be one of Hollywood's [directional constants](https://www.hollywood-mal.com/docs/html/hollywood/PrgDirectionCst_.html). This tag is only handled when the shadow is currently turned on. (V5.0)\n\n- `ShadowColor` Specifies the color of the shadow for this layer. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the shadow is currently turned on. (V5.0)\n\n- `ShadowPen` Specifies the pen to use for drawing the layer's shadow when palette is `#PALETTEMODE_PEN`. See [SetShadowPen](https://www.hollywood-mal.com/docs/html/hollywood/SetShadowPen_.html). (V9.0)\n\n- `ShadowSize` Specifies the size of the shadow for this layer. This tag is only handled when the shadow is currently turned on. (V5.0)\n\n- `ShadowRadius` Specifies the shadow radius for this layer. This tag is only handled when the shadow is currently turned on. (V5.0)\n\n- `Border` This tag can be used to turn the border frame of a layer on and off. If you set this tag to `True`, the border frame will be turned on, else it will be turned off. If you are turning it on, you can configure the look of the border using the `BorderSize` and `BorderColor` tags. See below for more information. See [SetLayerBorder](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerBorder_.html). (V5.0)\n\n- `BorderColor` Specifies the color of the border for this layer. This must be an [ARGB value](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html) that can contain a transparency setting. This tag is only handled when the border is currently turned on. (V5.0)\n\n- `BorderPen` Specifies the pen to use for drawing the layer's border when palette mode is `#PALETTEMODE_PEN`. See [SetBorderPen](https://www.hollywood-mal.com/docs/html/hollywood/SetBorderPen_.html). (V9.0)\n\n- `BorderSize` Specifies the size of the border for this layer. This tag is only handled when the border is currently turned on. (V5.0)\n\n- `Filters` This tag can be used to apply filters to a layer, remove filters from a layer, or modify the parameters of already applied filters. You have to pass a table to this tag that describes the desired configuration of the single filters. See [SetLayerFilter](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerFilter_.html). (V5.0)\n\n- `ClearFilters` This tag can be used to remove all filters from a layer. Simply specify `True` here and `SetLayerStyle()` will remove all filters that are currently active from this layer.\n\n- `PaletteMode` Specifies the palette mode to use for the layer when Hollywood is in palette mode. This must be one of the palette modes supported by [SetPaletteMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html). See [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html). (V9.0)\n\n- `DitherMode` Specifies the dither mode to use for the layer when Hollywood is in palette mode. This must be one of the dither modes supported by [SetDitherMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetDitherMode_.html). See [SetDitherMode](https://www.hollywood-mal.com/docs/html/hollywood/SetDitherMode_.html). (V9.0)\n\n- `IgnoreAnchor` If this tag is set to `True`, Hollywood will ignore the layer's anchor point when changing its position or style. This means that the anchor point will be treated as 0/0. This can be useful e.g. if you'd like to change the text of a layer whose anchor point is not 0/0. In such cases changing the text would also re-position the layer. This can be prevented by setting `IgnoreAnchor` to `True`. `IgnoreAnchor` can also be useful in case you want to position layers, whose anchor point is not 0/0, relative to their top-left corner. (V9.1)\n\n- `Refresh` Force a layer refresh. This is only useful for merged layers created by [MergeLayers()](https://www.hollywood-mal.com/docs/html/hollywood/MergeLayers_.html) because they don't refresh automatically when the graphics of one or more of its source layers are changed. See [MergeLayers](https://www.hollywood-mal.com/docs/html/hollywood/MergeLayers_.html). (V10.0)\n\nThe following style elements are dependent on a specific layer type: \n\n`#ANIM` layers can use the following elements:\n\n- `ID` This table element can be used to assign a new animation to the specified layer. The old animation will then be replaced with the animation specified in `ID`.\n\n- `Frame` You can use this style element to display a specific frame of the animation that sits on this layer. Frames are counted from 1. You can pass the special value 0 to display the next frame in the animation. See [NextFrame](https://www.hollywood-mal.com/docs/html/hollywood/NextFrame_.html).\n\n\n\n`#BRUSH`, `#BRUSHPART` and `#BGPICPART` layers recognize the following elements:\n\n- `ID` This table element can be used to assign a new brush/bgpic to the specified layer. The old brush/bgpic will then be replaced with the new one specified by `ID`. This is useful for example for a slideshow in which a layer shall display a new picture every `n` seconds.\n\n- `PartX, PartY, PartWidth, PartHeight` These four elements allow you to configure the visible portion of the brush or bgpic. `PartX` and `PartY` specify the x and y coordinates inside the brush/bgpic and `PartWidth` and `PartHeight` specifies the size of the tile that shall be visible. This is useful for displaying only a part of a brush or bgpic. For more information please read the notes on [DisplayBrushPart()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushPart_.html) and [DisplayBGPicPart()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBGPicPart_.html). Please note that these elements are not restricted to layer types `#BRUSHPART` and `#BGPICPART` only but they can also be used with layers of type `#BRUSH`. If you use one of the `PartXXX` elements on `#BRUSH` layer, the layer will automatically be changed into a `#BRUSHPART` layer.\n\n\n\nThe following elements are generic for layer types `#ARC`, `#BOX`, `#CIRCLE`, `#ELLIPSE`, `#POLYGON`, and `#VECTORPATH`:\n\n- `Color` Specifies the color of the layer in [ARGB notation](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html).\n\n- `DrawPen`: When palette mode is `#PALETTEMODE_PEN`, `DrawPen` specifies the pen that should be used to draw this layer. See [SetDrawPen](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html). (V9.0)\n\n- `FormStyle` This allows you to change the form style of the layer. You can pass one or more styles here. If you pass multiple form styles, you need to use the bitwise Or operator (|). See [SetFormStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html). If you want to remove a form style from a layer, use the `FormStyleClear` element. Note: As of Hollywood 5.0 the only reasonable style to set using this tag is `#ANTIALIAS` because the shadow and border settings are now better controlled using their separate tags (see above).\n\n- `FormStyleClear` All form styles which you set in this element will be removed from the layer. Multiple form styles have to be separated by the bitwise Or operator (|). This is the counterpart to the `FormStyle` element. Note: As of Hollywood 5.0 the only reasonable style to unset using this tag is `#ANTIALIAS` because the shadow and border settings are now better controlled using their separate tags (see above).\n\n- `FillStyle` You can use this style element to change the filling style for this layer. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\n- `GradientStyle` Specifies the style of the gradient if filling style is set to `#FILLGRADIENT`. This can be `#LINEAR`, `#RADIAL`, or `#CONICAL`.\n\n- `GradientAngle` Specifies the orientation of the gradient if filling style is set to `#FILLGRADIENT`. The angle is expressed in degrees. Only possible for `#LINEAR` and `#CONICAL` gradients.\n\n- `GradientStartColor, GradientEndColor` Use these two to configure the colors of the gradient if filling style is set to `#FILLGRADIENT`.\n\n- `GradientCenterX, GradientCenterX` Sets the center point for gradients of type `#RADIAL` or `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBalance` This tag controls the balance point for gradients of type `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBorder` This tag controls the border size for gradients of type `#RADIAL`. Must be a floating point value between 0.0 and and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientColors` This tag can be used to create a gradient between more than two colors. This has to be set to a table that contains sequences of alternating color and stop values. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). If this tag is used, the `GradientStartColor` and `GradientEndColor` tags are ignored. (V5.0)\n\n- `OutlineThickness` If filling style is set to `#FILLNONE` this value can be used to configure the thickness of the outline. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html).\n\n- `TextureBrush` If filling style is set to `#FILLTEXTURE` you can change the currently used texture with this style element. Simply pass the identifier of a brush in this style element to switch to a new texture.\n\n\n\nIn addition to the elements above, layers of type `#ARC` accept the following style elements:\n\n- `RadiusA, RadiusB` These two values specify the x and y radii of the partial ellipse.\n\n- `StartAngle, EndAngle` These two values specify the start and end angles of the partial ellipse. See [Arc](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html).\n\n- `Clockwise` Specifies whether or not elliptic arc shall be drawn in clockwise direction. See [Arc](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html). (V4.5)\n\n\n\nLayers of type `#BOX` accept the following additional style elements:\n\n- `SizeX, SizeY` You can use these two values to change the dimensions of the rectangle. `SizeX` specifies the rectangle width and `SizeY` specifies its height.\n\n- `RoundLevel` Specifies the rounding levels for the four corners of the rectangle. A value of 0 means no rounding. A value of 100 means completely round corners. See [Box](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html).\n\n- `CornerA, CornerB, CornerC, CornerD` These four tags allow you to fine-tune the corner rounding of the rectangle. You can specify a rounding level (0 to 100) for every corner of the rectangle thus allowing you to create a rectangle where not all corners are rounded, or where the different corners use different rounding levels. These tags will override any setting specified in the `RoundLevel` tag. (V5.0)\n\n\n\nLayers of type `#CIRCLE` accept the following additional style elements:\n\n- `Radius` Specifies the radius of the circle. See [Circle](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html).\n\n\n\nLayers of type `#ELLIPSE` accept the following additional style elements:\n\n- `RadiusA, RadiusB` These two values specify the x and y radii of the ellipse. See [Ellipse](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html).\n\n\n\nLayers of type `#LINE` accept the following additional style elements:\n\n- `Thickness` Specifies the thickness of the line. See [Line](https://www.hollywood-mal.com/docs/html/hollywood/Line_.html).\n\n- `X1,Y1,X2,Y2` Use these tags to change the line orientation. Please note that these tags are mutually exclusive with the generic `X` / `Y` tags. If you use those tags, you must not use these tags and vice versa. (V4.6)\n\n- `Arrowhead` This tag allows you to turn the line into an arrow. It can be set to one of the following tags:\n\n  - `#ARROWHEAD_NONE` No arrowhead. This is the default mode.\n\n  - `#ARROWHEAD_SINGLE` Add arrowhead to end of line.\n\n  - `#ARROWHEAD_DOUBLE` Add arrowhead to start and end of line.\n\n  (V9.1)\n\n\n\nLayers of type `#POLYGON` accept the following additional style elements:\n\n- `Vertices` This style element can be used to change the look of the polygon by passing a new set of vertices to it. You have to set this style element to a table of vertices containing a sequence of x and y coordinates where both coordinates define one vertex. It uses the same format as with the [Polygon()](https://www.hollywood-mal.com/docs/html/hollywood/Polygon_.html) command except that you do not have to specify the number of vertices in the table. `SetLayerStyle()` will determine this automatically.\n\n\n\n`#PRINT` and `#TEXTOUT` layers recognize the following style elements:\n\n- `Color` Specifies the color of the text in [ARGB notation](https://www.hollywood-mal.com/docs/html/hollywood/ARGBInfo_.html).\n\n- `DrawPen`: When palette mode is `#PALETTEMODE_PEN`, `DrawPen` specifies the pen that should be used to draw the text. See [SetDrawPen](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html). (V9.0)\n\n- `FontStyle` This allows you to change the font style of the layer. You can pass one or more styles here. If you pass multiple font styles, you need to use the bitwise Or operator (|). See [SetFontStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html). If you want to remove a font style from a layer, use the `FontStyleClear` element. Note: As of Hollywood 5.0 this tag should no longer be used to set shadow and border styles. For these styles, you should better use their new separate tags (see above).\n\n- `FontStyleClear` All font styles which you set in this element will be removed from the layer. Multiple font styles have to be separated by the bitwise Or operator (|). This is the counterpart to the `FontStyle` element. Note: As of Hollywood 5.0 this tag should no longer be used to unset shadow and border styles. For these styles, you should better use their new separate tags (see above).\n\n- `Font` You can use this style element to change the font of the text layer. See [SetFont](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html). Alternatively, you can also specify the new font by setting the `ID` tag (see below).\n\n- `FontSize` You can use this style element to change the font size of the specified text layer. See [SetFont](https://www.hollywood-mal.com/docs/html/hollywood/SetFont_.html).\n\n- `ID` You can use this style element to change the font of the text layer. Just set this tag to the ID of the new font and the font will be changed. See [UseFont](https://www.hollywood-mal.com/docs/html/hollywood/UseFont_.html). Alternatively, you can also specify the new font by name by setting the `Font` tag (see above). (V10.0)\n\n- `Text` This style element allows you to change the contents of the text layer. You can replace the whole old contents of the layer with some new text.\n\n- `Align` Allows you to change the text alignment after a newline characters. Possible values are `#LEFT`, `#RIGHT`, `#CENTER`, and `#JUSTIFIED`. The default alignment is `#CENTER`.\n\n- `LeftMargin, RightMargin` Allows you to change the margin settings of the current text layer. `LeftMargin` is only used for layers of type `#PRINT` but `RightMargin` can also be used for text objects and `#TEXTOUT` layers. See [SetMargins](https://www.hollywood-mal.com/docs/html/hollywood/SetMargins_.html).\n\n- `CursorX, CursorY` Allows you to change the cursor position of this layer. This is only possible with layers of type `#PRINT`. Also note that if you specify `CursorX` / `CursorY` you must not specify `X` / `Y`. `CursorX` / `CursorY` and `X` / `Y` are mutually exclusive and hence must not be used together. (V4.5)\n\n- `Tabs` Allows you to modify the tabulator positions for this layer. This is only possible with layers of type `#PRINT`. `Tabs` takes a table of tabulator positions. See [AddTab](https://www.hollywood-mal.com/docs/html/hollywood/AddTab_.html). (V4.5)\n\n- `Encoding` Allows you to change the character encoding of this text layer. See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V4.7)\n\n- `Linespacing`: Allows you to adjust the space between lines. You can set this to a positive or negative value. A positive value will increase the space between lines, a negative value will decrease it. (V9.0)\n\n- `Charspacing`: Allows you to adjust the space between characters. You can set this to a positive or negative value. A positive value will increase the space between characters, a negative value will decrease it. (V10.0)\n\n- `Tabs`: Allows you to modify the tab stops for this layer. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `ListMode`: Allows you to enable or disable list mode for this text layer. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `DefListBullet`: Use this tag to set the default bullet to use when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `ListBullet`: Use this tag to specify a custom set of bullets to use when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `DefListIndent`: This tag can be used to specify the number of spaces to use for indenting list items when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `ListIndent`: Use this tag to specify a custom set of indentation levels to use when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `DefListOffset`: When the text layer is in list mode and uses a numbered bullet type you can use this tag to specify a starting offset for the numbering. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `ListOffset`: When the text layer is in list mode and uses a numbered bullet type you can use this tag to specify a custom set of starting offsets for the individual list numbering. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `DefListSpacing`: This tag can be used to specify the line spacing between the list items when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.1)\n\n- `ListSpacing`: Use this tag to specify a custom set of line spacings to use when the text layer is in list mode. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.1)\n\n- `Frame`: When the text layer is in list mode, you can use this tag to display a specific frame of the list. Frames are counted from 1. To show the next frame, you can pass the special value 0 to `Frame`. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `FrameMode`: When the text layer is in list mode, you can use this tag configure the frame mode that the list should use. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `BulletColor`: When the text layer is in list mode, you can use this tag to change the bullet color. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `BulletPen`: When the text layer is in list mode, you can use this tag to change the bullet pen. See [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html). (V9.0)\n\n- `Wordwrap`: This tag can be used to set a wordwrapping width for the text layer. Whenever a word exceeds the specified width, it will be wrapped to the next line. Set `Wordwrap` to 0 to disable wordwrapping. (V9.0)\n\n  \n\n\n\nLayers of type `#TEXTOBJECT` accept the following additional style elements:\n\n- `ID` This style element can be used to associate a new text object with this layer. Just pass the identifier of the desired text object here and it will replace the current text object of this layer. (V4.5)\n\n\n\nLayers of type `#VECTORPATH` accept the following additional style elements:\n\n- `ID` This style element can be used to associate a new vector path object with this layer. Just pass the identifier of the desired vector path object here and it will replace the current path of this layer. (V5.0)\n\n- `LineJoin` Allows you to change the line join style of this layer. See [SetLineJoin](https://www.hollywood-mal.com/docs/html/hollywood/SetLineJoin_.html). (V5.0)\n\n- `LineCap` Allows you to change the line cap style of this layer. See [SetLineCap](https://www.hollywood-mal.com/docs/html/hollywood/SetLineCap_.html). (V5.0)\n\n- `FillRule` Allows you to change the fill rule style of this layer. See [SetFillRule](https://www.hollywood-mal.com/docs/html/hollywood/SetFillRule_.html). (V5.0)\n\n- `Dashes` This style element can be used to change the dash pattern for outline vector drawing. You have to pass a table here that contains a dash pattern in the same format as described in the documentation of the [SetDash()](https://www.hollywood-mal.com/docs/html/hollywood/SetDash_.html) command. When passing the `Dashes` tag, you should also pass the `DashOffset` tag (see below) to define the starting offset of the dash pattern. (V5.0)\n\n- `DashOffset` This tag can be used to modify the starting offset of the dash pattern of this layer. This tag is usually specified together with the `Dashes` tag (see above). See [SetDash](https://www.hollywood-mal.com/docs/html/hollywood/SetDash_.html). (V5.0)\n\n- `VectorEngine`: This tag can be used to set the vectorgraphics renderer that should be used to draw this layer. See [SetVectorEngine](https://www.hollywood-mal.com/docs/html/hollywood/SetVectorEngine_.html). (V6.0)\n\n\n\n`#VIDEO` layers recognize the following elements:\n\n- `ID` This tag can only be queried by using [GetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/GetLayerStyle_.html). It contains the identifier of the video that has been assigned to this layer. You cannot currently assign a new video object to a layer using `SetLayerStyle()`. (V6.0)\n\n- `PartX, PartY, PartWidth, PartHeight` These four elements allow you to configure the visible portion of the video layer. `PartX` and `PartY` specify the x and y coordinates inside the video and `PartWidth` and `PartHeight` specifies the size of the tile that shall be visible. This is useful for displaying only a part of a video. (V6.0)",
    "inputsDocs": "* `id1` — identifier of the layer or layer group whose style you want to change\n* `style1` — table containing one or more style elements from the lists above\n* `...` — optional: you can repeat the id/style sequence as often as you need so you can modify the styles of many layers with just a single call",
    "example": "```\nSetLayerStyle(1, {x = #LEFT, y = #TOP}, 4, {x = #CENTER, y = #CENTER},\n5, {x = #RIGHT, y = #BOTTOM}, \"mylayer\", {x = 100, y = 100})\n```\n\nThe call above changes the position of several layers. Layer 1 is moved to the top left corner, layer 4 to the center, layer 5 to the bottom right corner, and layer \"mylayer\" is moved to 100:100.\n\n---\n\n```\nBox(0, 0, 100, 100, #BLUE)\nWaitLeftMouse\nSetLayerStyle(1, {Color = #RED})\n```\n\nThe code above draws a blue box on the screen, waits for the left mouse button and then changes the color of the box to red.\n\n---\n\n```\nSetLayerStyle(1, {Frame = 0})\n```\n\nThe code above displays the next frame of layer 1 (which must be of type `#ANIM`).\n\n---\n\n```\nPolygon(#CENTER, #CENTER, {0, 0, 319, 0, 319, 159, 0, 159}, 4, #RED)\nWaitLeftMouse\nSetLayerStyle(1, {Vertices = {0, 159, 160, 0, 319, 159}, Color = #YELLOW})\n```\n\nThe code above draws a red rectangular polygon, waits for left mouse and then changes the rectangular polygon into a yellow triangular polygon.\n\n---\n\n```\nBox(0, 0, 100, 100, #RED)\nWaitLeftMouse\nSetLayerStyle(1, {Type = #BRUSH, ID = 1})\n```\n\nThe code above draws a red box on the screen, waits for the left mouse button and then replaces the red rectangle by brush number 1. The layer type is changed from `#BOX` to `#BRUSH`.",
    "platforms": ["All"],
    "insertText": "SetLayerStyle(${1:id1}, ${2:style1})"
  },
  {
    "name": "SetLayerTint",
    "helpId": "SetLayerTint",
    "shortDescription": "set layer tinting",
    "version": "2.0",
    "synopsis": "SetLayerTint(id, tintcolor, tintlevel)",
    "functionDocs": "This function can be used to tint a layer or layer group with a specified color at a given level. This is useful if you want to lighten the layer or layer group (use [#WHITE](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) as tintcolor) or darken it (use [#BLACK](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) as tintcolor). Of course you can also use other colors. Level ranges from 0 to 255 where 0 means no tinting (layer default setting) and 255 means full tinting which will make the layer appear fully in the specified color.\n\nStarting with Hollywood 2.0, tintlevel can also be a string containing a percent specification, e.g. \"50%\".\n\nStarting with Hollywood 5.0, this function will simply install a filter of type `Tint` in the specified layer. See [SetLayerFilter](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerFilter_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to use\n* `tintcolor` — [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) to use for tinting\n* `tintlevel` — tint level to apply (0 to 255 or percent specification)",
    "example": "```\nEnableLayers()\nDisplayBrush(1, #CENTER, #CENTER)\nSetLayerTint(1, #BLACK, 128)\n```\n\nThe code above darkens layer 1 (= brush 1) with ratio 50% (= 128).",
    "platforms": ["All"],
    "insertText": "SetLayerTint(${1:id}, ${2:tintcolor}, ${3:tintlevel})"
  },
  {
    "name": "SetLayerTransparency",
    "helpId": "SetLayerTransparency",
    "shortDescription": "set transparency of a layer",
    "version": "1.5",
    "synopsis": "SetLayerTransparency(id, level)",
    "functionDocs": "This function can be used to set the transpareny level of a layer or layer group. The transparency level must be between 0 and 255, where 0 means no transparency (layer default setting) and 255 is full transparency which means that you will not see the layer any more (in that case it is of course more efficient to just hide the layer using [HideLayer()](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html). Please note that this is just the other way round from [SetAlphaIntensity()](https://www.hollywood-mal.com/docs/html/hollywood/SetAlphaIntensity_.html) where 255 means no transparency and 0 means full transparency.\n\nStarting with Hollywood 2.0, level can also be a string containing a percent specification, e.g. \"50%\".\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to use\n* `level` — transparency level to apply (0 to 255 or percent specification)",
    "example": "```\nEnableLayers()\n\n; do not display the text, just add the layer\nSelectBGPic(1)\nTextOut(#RIGHT, #BOTTOM, \"Hello World\")\nEndSelect\n\n; now it will be displayed!\nSetLayerTransparency(1, 128)\n```\n\nThe code above creates layer 1 (text \"Hello World\") and makes it appear with a transparency of 50% (= 128).",
    "platforms": ["All"],
    "insertText": "SetLayerTransparency(${1:id}, ${2:level})"
  },
  {
    "name": "SetLayerTransparentPen",
    "helpId": "SetLayerTransparentPen",
    "shortDescription": "set transparent pen of layer palette",
    "version": "9.0",
    "synopsis": "SetLayerTransparentPen(id, pen)",
    "functionDocs": "This function sets the transparent pen of the palette of the layer specified by `id` to the pen specified in `pen`. Pens are counted from 0.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of layer to use\n* `pen` — desired transparent pen (starting from 0)",
    "example": "```\nSetLayerTransparentPen(1, 4)\n```\n\nThe code makes pen 4 in the palette of layer 1 transparent.",
    "platforms": ["All"],
    "insertText": "SetLayerTransparentPen(${1:id}, ${2:pen})"
  },
  {
    "name": "SetLayerVolume",
    "helpId": "SetLayerVolume",
    "shortDescription": "modify volume of a video layer",
    "version": "6.0",
    "synopsis": "SetLayerVolume(id, volume)",
    "functionDocs": "This function modifies the volume of the video layer specified by `id`. If the video layer is currently playing, the volume will be modified on-the-fly which can be used for sound fades etc. The `volume` argument can also be a string containing a percent specification, e.g. \"50%\".\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer\n* `volume` — new volume for the video (range: 0=mute until 64=full volume or percent specification)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetLayerVolume(${1:id}, ${2:volume})"
  },
  {
    "name": "SetLayerZPos",
    "helpId": "SetLayerZPos",
    "shortDescription": "change the z-position of a layer",
    "version": "4.6",
    "synopsis": "SetLayerZPos(layer, zpos)",
    "functionDocs": "This command can be used to change a layer's z-position. The z-position of the layer is its position in the hierarchy of layers. The first (i.e. backmost) layer has a z-position of 1, the last (i.e. frontmost) layer's z-position is equal to the number of layers currently present. You need to pass the new desired z-position for the specified layer to this function. The layer will then assume exactly this z-position, existing layers that are on or after this z-position will be shifted down. To move a layer all the way to the front (i.e. highest z-position), you can pass the special value 0 for the `zpos` argument. To move a layer all the way to the back, specify 1 in the `zpos` argument.\n\nYou can also pass a layer name in the `zpos` argument. In that case, the layer specified in the first argument will assume the z-position of the layer in the second argument.",
    "inputsDocs": "* `layer` — layer whose z position shall be changed\n* `zpos` — new z position for the layer or 0 to move the layer to the highest z position",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetLayerZPos(${1:layer}, ${2:zpos})"
  },
  {
    "name": "ShowLayer",
    "helpId": "ShowLayer",
    "shortDescription": "show or move a layer",
    "version": "1.5",
    "synopsis": "ShowLayer(id[, x, y])",
    "functionDocs": "This function shows the hidden layer or layer group specified by `id`. You can hide layers and layer groups by calling [HideLayer()](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).\n\nStarting with Hollywood 2.0 there are two optional arguments `x` and `y`. You can use these two arguments to re-position the specified layer. So you can move a layer to a new position using this function. Both arguments default to `#USELAYERPOSITION` which means that the layer will not be moved if you do not specify these arguments.",
    "inputsDocs": "* `id` — identifier of the layer or layer group to show\n* `x` — optional: new x-position for the layer (defaults to `#USELAYERPOSITION`)\n* `y` — optional: new y-position for the layer (defaults to `#USELAYERPOSITION`)",
    "example": "See [HideLayer](https://www.hollywood-mal.com/docs/html/hollywood/HideLayer_.html)",
    "platforms": ["All"],
    "insertText": "ShowLayer(${1:id})"
  },
  {
    "name": "ShowLayerFX",
    "helpId": "ShowLayerFX",
    "shortDescription": "display a hidden layer with transition effects",
    "version": "1.9",
    "synopsis": "[handle] = ShowLayerFX(id[, table])",
    "functionDocs": "This function is an extended version of the [ShowLayer()](https://www.hollywood-mal.com/docs/html/hollywood/ShowLayer_.html) command. It shows the hidden layer or layer group specified by `id` using one of the many transition effects supported by Hollywood. You can also specify the speed for the transition and an optional argument.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type` Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed` Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter` Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async` You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `ShowLayerFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `NoBorderFade` If the layer to be shown has a border, do not gradually fade in the border but display it in one go at the end of the transition effect. (V5.0)\n\n- `BorderFX`: If the layer to be shown has a border, Hollywood will only apply the transition effect to the border if the layer is a transparent layer with text or pixel graphics. For non-transparent and vector graphics layers a generic fade effect will be used instead because otherwise there would be visual glitches between the penultimate and final effect frame because of differences in the border algorithms. If you don't care about this glitch and want to force Hollywood to always apply the transition effect to the border, set this tag to `True`. To force Hollywood to always use the generic fade mode, set this tag to `False`. (V9.0)\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to show\n* `table` — optional: table configuring the transition effects",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nShowLayerFX(5, #CROSSFADE)              ; old syntax\n\nOR\n\nShowLayerFX(5, {Type = #CROSSFADE})     ; new syntax\n```\n\nThe above code shows layer 5 with a nice crossfade transition.",
    "platforms": ["All"],
    "insertText": "ShowLayerFX(${1:id})"
  },
  {
    "name": "StopLayer",
    "helpId": "StopLayer",
    "shortDescription": "stop a currently playing video layer",
    "version": "6.0",
    "synopsis": "StopLayer(id)",
    "functionDocs": "This function stops the video layer specified by `id`. You can restart playback by calling [PlayLayer()](https://www.hollywood-mal.com/docs/html/hollywood/PlayLayer_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `id` — identifier or name of the video layer to be stopped",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "StopLayer(${1:id})"
  },
  {
    "name": "SwapLayers",
    "helpId": "SwapLayers",
    "shortDescription": "swap two layers",
    "version": "1.5",
    "synopsis": "SwapLayers(a, b)",
    "functionDocs": "This function swaps the positions of the layer id's a and b. This can be very useful if you need to re-position your layers.\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `a` — identifier or name of layer 1\n* `b` — identifier or name of layer 2",
    "example": "```\nEnableLayers()\nSetFillStyle(#FILLCOLOR)\nBox(0, 0, 150, 150, #RED)\nBox(0, 0, 100, 100, #GREEN)\nWaitLeftMouse\nSwapLayers(1, 2)\n```\n\nThe code above draws a red and a green filled box and then swaps layers which means that the smaller green box is suddenly not visible any more. Before the swapping, the red box was layer 1 and the green box layer 2. After the swapping, the green box is layer 1 and the red box is layer 2.",
    "platforms": ["All"],
    "insertText": "SwapLayers(${1:a}, ${2:b})"
  },
  {
    "name": "TransformLayer",
    "helpId": "TransformLayer",
    "shortDescription": "apply affine transformation to a layer",
    "version": "4.5",
    "synopsis": "TransformLayer(id, sx, rx, ry, sy[, smooth])",
    "functionDocs": "This function can be used to apply affine transformation to a layer or layer group. You have to pass a 2x2 transformation matrix to this function that will define how each point in the layer will be transformed. This function is useful if you want to apply rotation and scaling at the same time. The optional argument `smooth` can be set to `True` if Hollywood should use interpolation during the transformation. This yields results that look better but interpolation is quite slow.\n\nIf the specified layer is a vector layer (e.g. circle, polygon, TrueType text or a rectangle) Hollywood will be able to transform the layer without any loss in quality because vector graphics can be freely transformed. Thus, the `smooth` argument does not have any function if the specified layer is a vector layer. If the layer uses raster graphics, however, normal raster-based rotation will be used.\n\nIn contrast to transforming brushes using [TransformBrush()](https://www.hollywood-mal.com/docs/html/hollywood/TransformBrush_.html) layers always keep their original data so there will not be any loss in quality if you transform a layer to (20,15) and then back to (640,480). This is perfectly possible.\n\nSee [TransformBrush](https://www.hollywood-mal.com/docs/html/hollywood/TransformBrush_.html).",
    "inputsDocs": "* `id` — identifier of the layer or layer group to transform\n* `sx` — scale x factor; must never be 0\n* `rx` — rotate x factor\n* `ry` — rotate y factor\n* `sy` — scale y factor; must never be 0\n* `smooth` — optional: whether or not affine transformation should use interpolation",
    "example": "```\nangle = Rad(45)    ; convert degrees to radians\nTransformLayer(1, Cos(angle), Sin(angle), -Sin(angle), Cos(angle))\n```\n\nThe code above rotates layer number 1 by 45 degrees using a 2x2 transformation matrix.",
    "platforms": ["All"],
    "insertText": "TransformLayer(${1:id}, ${2:sx}, ${3:rx}, ${4:ry}, ${5:sy})"
  },
  {
    "name": "TranslateLayer",
    "helpId": "TranslateLayer",
    "shortDescription": "translate a layer",
    "version": "4.7",
    "synopsis": "TranslateLayer(id, dx, dy)",
    "functionDocs": "This command will translate a layer or layer group by the delta offsets specified by `dx` and `dy`. A translation means that the layer is moved relative to its current position by the specified offset. Thus, a translation of (100,-100) would move the layer 100 pixels towards the right and 100 pixels towards the top. A translation of (0,0) would not move the layer at all. Translations are very useful for moving layers independent of its current position.\n\nAlternatively, you can also use the `TranslateX` and `TranslateY` tags of the powerful [SetLayerStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetLayerStyle_.html) command.",
    "inputsDocs": "* `id` — identifier of the layer or layer group to translate\n* `dx` — delta x offset (0 means no x translation)\n* `dy` — delta y offset (0 means no y translation)",
    "example": "```\nTranslateLayer(1, -50, -50)\n```\n\nThe code above moves the first layer 50 pixels in top-left direction.",
    "platforms": ["All"],
    "insertText": "TranslateLayer(${1:id}, ${2:dx}, ${3:dy})"
  },
  {
    "name": "Undo",
    "helpId": "Undo",
    "shortDescription": "undo a graphics operation",
    "version": "1.0",
    "synopsis": "Undo(type[, id, level, quiet])",
    "functionDocs": "This function undoes the graphics operation specified by `type` and optionally `id`. You need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) in order to use this function. Hollywood keeps an internal buffer of all graphics operations it performs, e.g. displaying brush 2. If you want to remove brush 2 now from the display, just call `Undo(#BRUSH,2)`. The following types are possible:\n\n- `#ANIM` Remove anim specified by `id` from the display\n\n- `#ARC` Remove arc drawn with [Arc()](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html)\n\n- `#BGPICPART` Remove graphics displayed with [DisplayBGPicPart()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBGPicPart_.html)\n\n- `#BOX` Remove rectangle drawn with [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html)\n\n- `#BRUSH` Remove brush specified by `id` from the display\n\n- `#BRUSHPART` Remove graphics displayed with [DisplayBrushPart()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushPart_.html)\n\n- `#CIRCLE` Remove circle drawn with [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html)\n\n- `#ELLIPSE` Remove ellipse drawn with [Ellipse()](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html)\n\n- `#LINE` Remove line drawn with [Line()](https://www.hollywood-mal.com/docs/html/hollywood/Line_.html)\n\n- `#MERGED`: Remove merged layer created by [MergeLayers()](https://www.hollywood-mal.com/docs/html/hollywood/MergeLayers_.html).\n\n- `#PLOT` Remove a pixel displayed with [Plot()](https://www.hollywood-mal.com/docs/html/hollywood/Plot_.html)\n\n- `#POLYGON` Remove polygon drawn with [Polygon()](https://www.hollywood-mal.com/docs/html/hollywood/Polygon_.html)\n\n- `#PRINT` Remove text printed with [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html) or [NPrint()](https://www.hollywood-mal.com/docs/html/hollywood/NPrint_.html)\n\n- `#TEXTOBJECT` Remove text object specified by `id` from the display\n\n- `#TEXTOUT` Undo the last [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) command; id is not required\n\n- `#VECTORPATH` Undo the last [DrawPath()](https://www.hollywood-mal.com/docs/html/hollywood/DrawPath_.html) command; id is not required\n\n- `#VIDEO` Remove video specified by `id` from the display\n\nThe optional argument `id` is only required for types which use an identifier (`#ANIM`, `#BGPICPART`, `#BRUSH`, `#BRUSHPART`, `#TEXTOBJECT`, `#VIDEO`). The other types do not require the `id` argument. Please set `id` to 0 for the commands.\n\nThe `level` argument specifies the undo level to use. The argument is optional and defaults to 1. Undo level defines on which level the object to undo is. For example, if you display brush 3 four times on the display and now you want to remove the first one of all brushes 3, you will have to specify a level of 4. To remove the last one you have to set undo level to 1, which is also the default. Therefore if `level` is not explicitly specified or set to 1, Hollywood will undo the object last displayed of the specified type.\n\nThe `quiet` argument is also optional. If you set it to `True`, Hollywood will only remove the specified object from it is internal object lists but will leave it on the display. If set to `False`, Hollywood will also remove it from the screen.",
    "inputsDocs": "* `type` — one of the type constants (see list above)\n* `id` — optional: only required for types which require an associated id (defaults to 0)\n* `level` — optional: undo level (defaults to 1)\n* `quiet` — optional: `True` if object shall only be removed internally but not from the display (defaults to `False`)",
    "example": "```\nEnableLayers()\nDisplayBrush(1, #CENTER, #CENTER)\nWaitLeftMouse\nUndo(#BRUSH, 1)\n```\n\nThe above code displays brush 1 in the center of the display, waits for a mouse click and then removes it.\n\n---\n\n```\nEnableLayers()\nPrint(\"Hello \")\nPrint(\"This \")\nPrint(\"Is \")\nPrint(\"An \")\nPrint(\"Undo \")\nPrint(\"Test!\")\nWaitLeftMouse\nUndo(#PRINT, 0, 6)\nUndo(#PRINT, 0, 5)\nUndo(#PRINT, 0, 4)\n```\n\nThe above code prints \"Hello This Is An Undo Test!\" on the display, waits for a mouse click and then removes the texts \"Hello\", \"This\" and \"Is\" by using the optional level argument of the `Undo()` command.",
    "platforms": ["All"],
    "insertText": "Undo(${1:type})"
  },
  {
    "name": "UndoFX",
    "helpId": "UndoFX",
    "shortDescription": "undo a graphics operation with transition fx",
    "version": "1.0",
    "synopsis": "[handle] = UndoFX(type, id[, table])",
    "functionDocs": "This function is like the [Undo()](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html) command but it uses a transition effect to undo the operation. See [Undo](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html).\n\nRemember to have layers turned on when using this command!\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type` Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed` Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter` Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async` You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `UndoFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `UndoLevel` Specifies the undo level for this operation. See [Undo](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html).\n\n- `NoBorderFade` If the layer to be removed has a border, do not gradually fade out the border but remove it in one go at the end of the transition effect. (V5.0)\n\n- `BorderFX`: If the layer to be removed has a border, Hollywood will only apply the transition effect to the border if the layer is a transparent layer with text or pixel graphics. For non-transparent and vector graphics layers a generic fade effect will be used instead because otherwise there would be visual glitches between the penultimate and final effect frame because of differences in the border algorithms. If you don't care about this glitch and want to force Hollywood to always apply the transition effect to the border, set this tag to `True`. To force Hollywood to always use the generic fade mode, set this tag to `False`. (V9.0)",
    "inputsDocs": "* `type` — one of the type constants (See [Undo](https://www.hollywood-mal.com/docs/html/hollywood/Undo_.html).)\n* `id` — identifier of the object\n* `table` — optional: transition effect configuration",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "platforms": ["All"],
    "insertText": "UndoFX(${1:type}, ${2:id})"
  },
  {
    "name": "UngroupLayer",
    "helpId": "UngroupLayer",
    "shortDescription": "remove layer(s) from group",
    "version": "10.0",
    "synopsis": "UngroupLayer(layer1[, layer2, ...])",
    "functionDocs": "This function removes the specified layer(s) from their layer group. The layers you pass to this function don't have to be part of the same group. They are ungrouped from whatever group they belong to. You can pass as many layers as you want to this function. Note that as soon as a group doesn't have any more layers attached, it will be automatically deleted.\n\nTo add layers to a group, use the [GroupLayer()](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html) function. See [GroupLayer](https://www.hollywood-mal.com/docs/html/hollywood/GroupLayer_.html).\n\nYou need to [enable layers](https://www.hollywood-mal.com/docs/html/hollywood/EnableLayers_.html) before you can use this function. See [Layers introduction](https://www.hollywood-mal.com/docs/html/hollywood/LayersIntroduction_.html).",
    "inputsDocs": "* `layer1` — first layer to ungroup\n* `...` — further layers to ungroup",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "UngroupLayer(${1:layer1})"
  }
]
