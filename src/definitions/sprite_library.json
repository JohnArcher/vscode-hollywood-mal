[
  {
    "name": "CopySprite",
    "helpId": "CopySprite",
    "shortDescription": "clone a sprite",
    "version": "2.0",
    "synopsis": "[id] = CopySprite(source, dest)",
    "functionDocs": "This function clones the sprite specified by `source` and creates a copy of it as sprite `dest`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `dest` argument, this function will choose an identifier for the new sprite automatically and return it to you. The new sprite is independent from the old sprite so you could free the source sprite after it has been cloned.\n\nIf you just want to have a new sprite with the same graphics as your old sprite, you should use [CreateSprite()](https://www.hollywood-mal.com/docs/html/hollywood/CreateSprite_.html) instead; it can create sprite links which are very memory-friendly, i.e. they consume very little memory and thus should be preferred to `CopySprite()` whenever possible.",
    "inputsDocs": "* `source` — source sprite id\n* `dest` — id for the sprite to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)",
    "resultsDocs": "* `id` — optional: identifier of the cloned sprite; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 2 (see above)",
    "platforms": ["All"],
    "insertText": "CopySprite(${1:source}, ${2:dest})"
  },
  {
    "name": "CreateSprite",
    "helpId": "CreateSprite",
    "shortDescription": "create a sprite",
    "version": "2.0",
    "synopsis": "[id] = CreateSprite(id, type, ...)  \n[id] = CreateSprite(id, #ANIM, source_id)  \n[id] = CreateSprite(id, #BRUSH, source_id[, width, height, frames, fr_per_row, sourcex, sourcey])  \n[id] = CreateSprite(id, #SPRITE, source_id1, source_id2, ...)  \n[id] = CreateSprite(id, #TEXTOBJECT, source_id)",
    "functionDocs": "This function creates a new sprite from the specified source. The sprite source can be an animation, a brush, a sprite or a text object. The new sprite will be stored under the specified `id`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for the new sprite automatically and return it to you. The arguments of `CreateSprite()` depend on what source type you specify.\n\nIf type is `#ANIM`, simply pass the identifier of the animation object to use in argument 3.\n\nIf type is `#BRUSH`, you have to specify the identifier of the source brush in argument 3. You can also make `CreateSprite()` extract several frames out of a brush. If you want that, you will have to pass at least the arguments `width`, `height` and `frames`. `Width` and `height` define the dimensions for the sprite to be created and `frames` specifies how many frames `CreateSprite()` shall read from the source brush. If the frames are aligned in multiple rows in the source brush, you will also have to pass the argument `fr_per_row` to tell `CreateSprite()` how many frames there are in every row. Finally, you can tell `CreateSprite()` where in the brush it should start scanning by specifying the arguments `sourcex` and `sourcey` (they both default to 0). `CreateSprite()` will then start off at position `sourcex` and `sourcey` and read `frames` number of images with the dimensions of `width` by `height` from the brush specified in `source_id`. After it has read `fr_per_row` images, it will advance to the next row. If you specify only three arguments, `CreateSprite()` will simply convert the brush specified in `source_id` to a sprite.\n\nIf type is `#SPRITE`, `CreateSprite()` will create a new sprite from an unlimited number of source sprites. You can specify as many source sprites as you want. Of course, each of the source sprites can also have multiple frames. When using `#SPRITE`, `CreateSprite()` will never copy the graphics data of the specified source sprites. For performance reasons, the source sprites will only be referenced and thus your new sprite will depend on them. By using only references to existing sprites, `CreateSprite()` executes very fast and with very low memory footprint. This is very convenient if you want to create various different animation sequences from always the same source sprites. Please note though that because sprites created using `#SPRITE` source type depend of their sub sprites, they will automatically be freed if one of the sub sprites is freed. So you should not free the sub sprites before you are done with the newly created sprite.\n\nIf type is `#TEXTOBJECT`, `CreateSprite()` will create a sprite from the specified text object. You only have to pass the identifier of the source text object.",
    "inputsDocs": "* `id` — identifier for the new sprite or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `type` — type of source object\n* `...` — further arguments depend on the type specified (see above)",
    "resultsDocs": "* `id` — optional: identifier of the new sprite; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "platforms": ["All"],
    "insertText": "CreateSprite(${1:id}, ${2:type})"
  },
  {
    "name": "DisplaySprite",
    "helpId": "DisplaySprite",
    "shortDescription": "display a sprite",
    "version": "2.0",
    "synopsis": "DisplaySprite(id, x, y[, frame])",
    "functionDocs": "This function displays the sprite specified in id at the specified position. If the sprite is already on the screen, it will be moved to the new position. The optional argument can be used to specify which frame shall be displayed. If it is omitted, `DisplaySprite()` will display the next frame of the sprite (if the sprite has multiple frames).",
    "inputsDocs": "* `id` — identifier of the sprite to display\n* `x` — desired x-position\n* `y` — desired y-position\n* `frame` — optional: frame to display (defaults to 0 which means show the next frame of the sprite)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "DisplaySprite(${1:id}, ${2:x}, ${3:y})"
  },
  {
    "name": "FlipSprite",
    "helpId": "FlipSprite",
    "shortDescription": "flip a sprite",
    "version": "2.0",
    "synopsis": "FlipSprite(id, xflip)",
    "functionDocs": "This function flips (mirrors) the sprite specified by `id`. If xflip is set to `True`, the sprite will be flipped in x-direction otherwise it will be flipped in y-direction.\n\nThis function can only be used on sprites that are not referenced by any other sprites. It also cannot be used on sprite links created using [CreateSprite()](https://www.hollywood-mal.com/docs/html/hollywood/CreateSprite_.html) with source type set to `#SPRITE`.",
    "inputsDocs": "* `id` — sprite to flip\n* `xflip` — `True` for horizontal (x) flip, `False` for vertical (y) flip",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FlipSprite(${1:id}, ${2:xflip})"
  },
  {
    "name": "FreeSprite",
    "helpId": "FreeSprite",
    "shortDescription": "free a sprite",
    "version": "2.0",
    "synopsis": "FreeSprite(id)",
    "functionDocs": "This function frees the memory occupied by sprite `id`. To reduce memory consumption, you should free sprites when you do not need them any longer.\n\nIf the sprite is still on the screen and you call `FreeSprite()`, it will be removed before it is freed.",
    "inputsDocs": "* `id` — identifier of the sprite to be freed",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeSprite(${1:id})"
  },
  {
    "name": "LoadSprite",
    "helpId": "LoadSprite",
    "shortDescription": "load a sprite",
    "version": "2.0",
    "synopsis": "[id] = LoadSprite(id, filename$[, args])",
    "functionDocs": "This function loads the sprite specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadSprite()` will automatically choose an identifier and return it.\n\nSupported image formats are PNG, JPEG, BMP, IFF ILBM, and some more depending on the platform Hollywood is running on. Starting with Hollywood 4.5, `LoadSprite()` can also open animation formats (IFF ANIM, GIF ANIM, uncompressed AVIs or AVIs using Motion JPEG compression) and convert these animations into a sprite directly.\n\nThe optional argument `args` accepts a table which can contain further options for the loading operation. The following fields can be set in the args table:\n\n- `Transparency`: Here you can specify a color that shall appear transparent in the sprite. The color you specify here will be masked out then.\n\n- `LoadAlpha`: Set this field to `True` if the image contains an alpha channel that shall be loaded.\n\n- `X, Y, Width, Height, Frames, FPR`: This lot of fields can be used to fine-tune the loading operation. You can use these fields to make `LoadSprite()` create a sprite with multiple frames from a single picture. `Width` and `Height` define the dimensions for the sprite and `Frames` specifies how many frames `LoadSprite()` shall read from the source image. If the frames are aligned in multiple rows in the source image, you will also have to pass the argument `FPR` (stands for frames per row) to tell `LoadSprite()` how many frames there are in each row. Finally, you can tell `LoadSprite()` where in the image it should start scanning by specifying the fields `X` and `Y` (they both default to 0). `LoadSprite()` will then start off at position `X` and `Y` and read `Frames` number of images with the dimensions of `Width` by `Height` from the picture specified by `filename$`. After it has read `FPR` number of images, it will advance to the next row. All of these fields can only be used if you specify an image file in `filename$`. If you specify an anim file, they are ignored.\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this sprite. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the sprite will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based sprite. If you want to load the alphachannel of a sprite, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the sprite as a palette sprite. This means that you can get and modify the sprite's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette sprites also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. This tag defaults to `False`. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the file (if the file format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. A sprite cannot have a mask and an alpha channel!\n\nThis command is also available from the preprocessor: Use [@SPRITE](https://www.hollywood-mal.com/docs/html/hollywood/atSPRITE_.html) to preload sprites!",
    "inputsDocs": "* `id` — identifier for the sprite or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `args` — optional: table that specifies further options for the loading operation",
    "resultsDocs": "* `id` — optional: identifier of the sprite; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadSprite(1, \"MySprite.png\", {Transparency = #RED})\n```\n\nThis loads \"MySprite.png\" as sprite 1 with the color red being transparent.\n\n---\n\n```\nLoadSprite(1, \"PlayerSprites.png\", {Width = 32, Height = 32,\n     Frames = 16, FPR = 8, Transparency = #BLACK})\n```\n\nThe code above creates sprite 1 from the file \"PlayerSprites.png\". Sprite 1 will be of the dimensions 32x32 and will contain 16 different frames. The single frames are aligned with 8 frames per row in the image \"PlayerSprites.png\". Thus, `LoadSprite()` needs to scan two rows to read the full 16 frames.",
    "platforms": ["All"],
    "insertText": "LoadSprite(${1:id}, ${2:filename$})"
  },
  {
    "name": "MoveSprite",
    "helpId": "MoveSprite",
    "shortDescription": "move a sprite from a to b",
    "version": "2.0",
    "synopsis": "MoveSprite(id, xa, ya, xb, yb[, table])",
    "functionDocs": "This function moves (scrolls) the sprite specified by `id` softly from the location specified by xa,ya to the location specified by xb,yb.\n\nFurther configuration options are possible using the optional argument table. You can specify the move speed, special effect, and whether or not the move shall be asynchronous. See [MoveBrush](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html). Besides the table elements mentioned in the [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) documentation, `MoveSprite()` accepts one additional table element named `AnimSpeed`: The anim speed value defines after how many draws the frame number should be increased; therefore a higher number means a lower playback speed of the animation.",
    "inputsDocs": "* `id` — identifier of the sprite to use\n* `xa` — source x position\n* `ya` — source y position\n* `xb` — destination x position\n* `yb` — destination y position\n* `table` — optional: further configuration options",
    "example": "```\nMoveSprite(1, 100, 50, 0, 50, {Speed = 5, AnimSpeed = 4})\n```\n\nMoves the sprite 1 from 100:50 to 0:50 with move speed 5 and anim playback speed 4.",
    "platforms": ["All"],
    "insertText": "MoveSprite(${1:id}, ${2:xa}, ${3:ya}, ${4:xb}, ${5:yb})"
  },
  {
    "name": "RemoveSprite",
    "helpId": "RemoveSprite",
    "shortDescription": "remove a sprite from the display",
    "version": "2.0",
    "synopsis": "RemoveSprite(id)",
    "functionDocs": "This function removes the sprite specified by `id` from the display. Note that the sprite will not be freed, so you can display it again at any time you like.",
    "inputsDocs": "* `id` — identifier of the sprite to remove",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RemoveSprite(${1:id})"
  },
  {
    "name": "RemoveSprites",
    "helpId": "RemoveSprites",
    "shortDescription": "remove all sprites from the display",
    "version": "2.0",
    "synopsis": "RemoveSprites([keep])",
    "functionDocs": "This function will remove all sprites from the display. If you set the optional argument `keep` to `True`, the sprites are still removed but will additionally be rendered as normal graphics to the display. This means that you could now paint them over with other graphics (e.g. a \"Game Over\" brush).\n\nIf `keep` is set to `True`, you will not see that this command does anything. That impression is, however, wrong. The sprites are indeed removed but you do not see a difference because they are immediately rendered as normal graphics to the display, so that you can paint them over.",
    "inputsDocs": "* `keep` — optional: `True` if the sprites shall be kept as normal graphics (defaults to `False`)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "RemoveSprites()"
  },
  {
    "name": "ScaleSprite",
    "helpId": "ScaleSprite",
    "shortDescription": "scale a sprite",
    "version": "2.0",
    "synopsis": "ScaleSprite(id, width, height)",
    "functionDocs": "This command scales the sprite specified by `id` to the specified width and height.\n\nThis function can only be used on sprites that are not referenced by any other sprites. It also cannot be used on sprite links created using [CreateSprite()](https://www.hollywood-mal.com/docs/html/hollywood/CreateSprite_.html) with source type set to `#SPRITE`.\n\nPlease note: You should always do scale operations with the original sprite. For instance, if you scale sprite 1 to 12x8 and then scale it back to 640x480, you will get a messed image. Therefore you should always keep the original brush and scale only copies of it.\n\nYou can also pass `#KEEPASPRAT` as either `width` or `height`. Hollywood will calculate the size then automatically by taking the aspect-ratio of the sprite into account.\n\nAlternatively, `width` and `height` can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — identifier of the sprite to scale\n* `width` — desired new width for the sprite\n* `height` — desired new height for the sprite",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ScaleSprite(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SetSpriteZPos",
    "helpId": "SetSpriteZPos",
    "shortDescription": "change the z-position of a layer",
    "version": "7.0",
    "synopsis": "SetSpriteZPos(id, zpos)",
    "functionDocs": "This command can be used to change a sprite's z-position. The z-position of a sprite is its position in the hierarchy of sprites. The first (i.e. backmost) sprite has a z-position of 1, the last (i.e. frontmost) sprite's z-position is equal to the number of sprites currently present. You need to pass the new desired z-position for the specified sprite to this function. The sprite will then assume exactly this z-position, existing sprites that are on or after this z-position will be shifted down. To move a sprite all the way to the front (i.e. highest z-position), you can pass the special value 0 for the `zpos` argument. To move a sprite all the way to the back, specify 1 in the `zpos` argument.",
    "inputsDocs": "* `id` — identifier of the sprite whose z position shall be changed\n* `zpos` — new z position for the sprite or 0 to move the sprite to the highest z position",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetSpriteZPos(${1:id}, ${2:zpos})"
  }
]
