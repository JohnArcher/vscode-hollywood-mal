[
  {
    "name": "BrushToBGPic",
    "helpId": "BrushToBGPic",
    "shortDescription": "convert a brush to a background picture",
    "version": "1.0",
    "synopsis": "BrushToBGPic(brushid, bgpicid)",
    "functionDocs": "This function makes a copy of the brush specified by `brushid` and converts it to a new background picture that has the identifier `bgpicid`. Everything will be cloned so the background picture is independent of the brush (you could free the brush after this operation for example and the background picture would still be usable!).",
    "inputsDocs": "* `brushid` — brush to clone\n* `bgpicid` — id for the new background picture",
    "example": "```\nBrushToBGPic(1,2)\nDisplayBGPic(2)\n```\n\nThe above code copies the brush 1 to background picture 2 and displays it then.",
    "platforms": ["All"],
    "insertText": "BrushToBGPic(${1:brushid}, ${2:bgpicid})"
  },
  {
    "name": "CopyBGPic",
    "helpId": "CopyBGPic",
    "shortDescription": "clone a background picture",
    "version": "4.0",
    "synopsis": "[id] = CopyBGPic(source, dest)",
    "functionDocs": "This function clones the background picture specified by `source` and creates a copy of it as background picture `dest`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `dest` argument, this function will choose an identifier for this background picture automatically and return it to you. The new background picture is independent from the old one so you could free the source background picture after it has been cloned.\n\nPlease note that only the plain graphics data of the background picture will be cloned. `CopyBGPic()` will not clone any layers, sprites, or buttons attached to the background picture.",
    "inputsDocs": "* `source` — source background picture id\n* `dest` — identifier of the new BGPic or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)",
    "resultsDocs": "* `id` — optional: identifier of the BGPic; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 2 (see above)",
    "example": "```\nCopyBGPic(1, 10)\nFreeBGPic(1)\n```\n\nThe above code creates a new background picture 10 which contains the same graphics data as background picture 1. Then it frees background picture 1 because it is no longer needed.",
    "platforms": ["All"],
    "insertText": "CopyBGPic(${1:source}, ${2:dest})"
  },
  {
    "name": "CreateBGPic",
    "helpId": "CreateBGPic",
    "shortDescription": "create a blank background picture",
    "version": "1.5",
    "synopsis": "[id] = CreateBGPic(id, width, height[[, color], table])",
    "functionDocs": "This function creates a new background picture with the specified width and height and initializes it to the specified color. If no color is specified, the background picture is initialized to black. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, `CreateBGPic()` will choose an identifier for this background picture automatically and return it to you.\n\nStarting with Hollywood 9.0, there is an optional table argument that allows you to specify further options. The following table tags are currently supported:\n\n- `Palette`: If this tag is set to the identifier of a palette, Hollywood will create a palette background picture for you. Palettes can be created using functions like [CreatePalette()](https://www.hollywood-mal.com/docs/html/hollywood/CreatePalette_.html) or [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html). Alternatively, you can also set this tag to one of Hollywood's inbuilt palettes, e.g. `#PALETTE_AGA`. See [SetStandardPalette](https://www.hollywood-mal.com/docs/html/hollywood/SetStandardPalette_.html).\n\n- `FillPen`: If the `Palette` tag is set (see above), you can use this tag to set the pen that should be used for filling the background picture's background. Note that the `color` parameter that is passed to `CreateBGPic()` is ignored if `Palette` is `True`. That's why this tag is here to allow you to specify a pen that will be used when initializing the background picture's pixels. Defaults to 0.\n\n- `TransparentPen`: If `Palette` is set to `True`, this tag can be used to specify a pen that should be made transparent in the new background picture. Defaults to `#NOPEN` which means that there should be no transparent pen.",
    "inputsDocs": "* `id` — id for the new background picture\n* `width` — width for the background picture\n* `height` — height for the background picture\n* `color` — optional: [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) for background (defaults to `#BLACK`)\n* `table` — optional: table containing further options (see above) (V9.0)",
    "resultsDocs": "* `id` — optional: identifier of the BGPic; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateBGPic(2, 640, 480)\n```\n\nThe above code creates a new black BGPic with the id 2 and the dimension of 640x480.",
    "platforms": ["All"],
    "insertText": "CreateBGPic(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "CreateGradientBGPic",
    "helpId": "CreateGradientBGPic",
    "shortDescription": "create a new background picture with a gradient",
    "version": "2.0",
    "synopsis": "[id] = CreateGradientBGPic(id, type, startcolor, endcolor[, width, height, angle, table])",
    "functionDocs": "This function can be used to create a new background picture with a gradient on it. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for this background picture automatically and return it to you. `type` specifies the type of the gradient you want to use. The following gradient types are currently available: `#LINEAR`, `#RADIAL`, and `#CONICAL`. If `width` and `height` are omitted, the dimensions will be set to the same as the current display's dimensions. The `angle` parameter allows you to specify a rotation angle (in degrees) for the gradient. The angle argument is only supported by gradients of type `#LINEAR` and `#CONICAL`. Radial gradients cannot be rotated.\n\nThe optional table argument can be used to specify advanced options. The following tags are currently recognized:\n\n- `CenterX, CenterY`: These two tags can be used to specify the center point of the gradient. As linear gradients do not have a center point, these two tags are only handled when you use gradients of type `#RADIAL` or `#CONICAL`. The center point must be specified as a floating point value that is between 0.0 (left/top corner) and 1.0 (right/bottom corner). If not specified, both tags default to 0.5 which means that the center point of the gradient is in the center of the image. (V5.0)\n\n- `Border`: This tag can be used to set the border size for gradients of type `#RADIAL`. For the other gradient types this tag is ignored. The border size of the radial gradient must be a floating point value between 0.0 and 1.0. Defaults to 0.0 which means no border. (V5.0)\n\n- `Balance`: This tag can be used to set the balance point for gradients of type `#CONICAL`. For the other gradient types this tag is ignored. The balance point of the conical gradient must be floating point value between 0.0 and 1.0. Defaults to 0.5. Note that this is only used when creating a two-color gradient. When creating a multi-color gradient using the `Colors` table, `Balance` is ignored because the `Colors` table allows you to individually balance the colors in the gradient using color stops. (V5.0)\n\n- `Colors`: This tag allows you to create gradients that contain multiple colors. This tag must be set to a table that contains a sequence of alternating color and stop values. The colors must be specified in [RGB format](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). The stop value is a floating point value between 0.0 and 1.0 and defines the position where the corresponding color should be merged into the gradient. A position of 0.0 means the start position of the gradient, and a position of 1.0 means the end position. Please note that the stop positions must be sorted in ascending order, i.e. starting from 0.0 to 1.0. If you specify this tag, the colors specified in the `startcolor` and `endcolor` arguments are ignored, and Hollywood will only use the colors specified in this tag. (V5.0)",
    "inputsDocs": "* `id` — id for the new background picture or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `type` — type of the gradient; see above for available types\n* `startcolor` — [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) defining the start color\n* `endcolor` — [RGB value](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) defining the end color\n* `width` — optional: desired width for the background picture (default: current display width)\n* `height` — optional: desired height for the background picture (default: current display height)\n* `angle` — optional: rotation angle for the gradient (default: 0)\n* `table` — optional: table argument specifying further options; see above for a description of available options",
    "resultsDocs": "* `id` — optional: identifier of the BGPic; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateGradientBGPic(2, #LINEAR, #BLACK, #BLUE)\nDisplayBGPic(2)\n```\n\nCreates a top to bottom gradient as background picture 2 with a color fade from black to blue and displays it.\n\n---\n\n```\nCreateGradientBGPic(2, #LINEAR, 0, 0, 640, 480, 0, {Colors = {#RED, 0,\n    #BLUE, 0.25, #GREEN, 0.5, #YELLOW, 0.75, #BLACK, 1}})\nDisplayBGPic(2)\n```\n\nThe code above creates a gradient containing multiple color stops. This gradient tries to replicate the look of the famous Amiga copper bars.",
    "platforms": ["All"],
    "insertText": "CreateGradientBGPic(${1:id}, ${2:type}, ${3:startcolor}, ${4:endcolor})"
  },
  {
    "name": "CreateTexturedBGPic",
    "helpId": "CreateTexturedBGPic",
    "shortDescription": "create a new background picture textured with a brush",
    "version": "1.0",
    "synopsis": "[id] = CreateTexturedBGPic(id, brushid[, width, height, x, y])",
    "functionDocs": "This function will create a new background picture for you and it will texture it with the brush specified by `brushid`. If you specify [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, this function will choose an identifier for this background picture automatically and return it to you. If `width` and `height` are omitted, the dimensions will be the same as the current display.\n\nThe optional `x` and `y` parameters are new in Hollywood 4.6. They allow you to specify an offset into the texture brush. Texturing will then start from this offset in the brush. The default for these arguments is 0/0 which means start at the top-left corner inside the texture brush.",
    "inputsDocs": "* `id` — id for the new background picture or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto ID select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `brushid` — identifier of the brush to be used as the texture\n* `width` — optional: desired width for the background picture (default: current display width)\n* `height` — optional: desired height for the background picture (default: current display height)\n* `x` — optional: start x offset in the texture brush (V4.6)\n* `y` — optional: start y offset in the texture brush (V4.6)",
    "resultsDocs": "* `id` — optional: identifier of the BGPic; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreateTexturedBGPic(2,1)\nDisplayBGPic(2)\n```\n\nCreates a background picture that will be textured with brush 1 and displays it.",
    "platforms": ["All"],
    "insertText": "CreateTexturedBGPic(${1:id}, ${2:brushid})"
  },
  {
    "name": "DisplayBGPic",
    "helpId": "DisplayBGPic",
    "shortDescription": "change the background picture",
    "version": "1.0",
    "synopsis": "DisplayBGPic(id[, args])",
    "functionDocs": "This function changes the background picture to the one specified by `id`. If the dimensions of this picture differ from the current one, the display size will be adjusted.\n\nNew in Hollywood 4.0: You can pass a table in the optional second argument to specify further options. Currently, the table can contain the following fields:\n\n- `X`: Specifies the new x position for the display. If you want the display to keep its current x position, specify the special constant `#KEEPPOSITION`. Defaults to `#CENTER`.\n\n- `Y`: Specifies the new y position for the display. If you want the display to keep its current y position, specify the special constant `#KEEPPOSITION`. Defaults to `#CENTER`.",
    "inputsDocs": "* `id` — identifier of the background picture to display\n* `args` — optional: specifies further configuration options (V4.0)",
    "example": "```\nDisplayBGPic(2)\n```\n\nDisplays background picture 2 and adjusts the window size if necessary.\n\n---\n\n```\nDisplayBGPic(2, {X = #RIGHT, Y = #BOTTOM})\n```\n\nDisplays background picture at the bottom-right of the current desktop.",
    "platforms": ["All"],
    "insertText": "DisplayBGPic(${1:id})"
  },
  {
    "name": "DisplayBGPicPart",
    "helpId": "DisplayBGPicPart",
    "shortDescription": "display a part of a background picture",
    "version": "1.0",
    "synopsis": "DisplayBGPicPart(id, x, y, width, height[, dx, dy, table])",
    "functionDocs": "This function displays a tile of the background picture specified by `id` on the screen. The tile is defined by `x`, `y` and its `width` and `height`.\n\nIf layers are enabled, this command will add a new layer of the type `#BGPICPART` to the layer stack.\n\nAs of Hollywood 4.0, this command uses a new syntax, although the old syntax is still supported for compatibility reasons. New scripts should use the new syntax, though. The new syntax accepts a table as the last argument which allows you to specify several further options:\n\n- `Layers`: If you set this to `True`, the layers (in case layers are enabled) or the foreground graphics (in case layers are disabled) of the background picture are drawn, too. This is useful if you want to create an exact copy of a background picture in a brush, for example. Please note that if layers are disabled, you can use this argument only if `id` specifies the identifier of the current background picture because Hollywood does not keep the entire foreground contents of all background pictures if layers are disabled.\n\nFurthermore, the optional table argument can also contain one or more of the [standard tags for all drawing commands](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html). See [Standard drawing tags](https://www.hollywood-mal.com/docs/html/hollywood/StandardDrawTags_.html).",
    "inputsDocs": "* `id` — identifier of the background picture to use as source\n* `x` — left corner\n* `y` — top corner\n* `width` — width of the tile\n* `height` — height of the tile\n* `dx` — optional: destination x-position for the tile (defaults to x) (V1.5)\n* `dy` — optional: destination y-position for the tile (defaults to y) (V1.5)\n* `table` — optional: further configuration table",
    "example": "```\nDisplayBGPicPart(2,0,0,100,100)\n```\n\nDisplay the first 100 pixels and rows from background picture 2 on the screen at position 0:0.\n\n---\n\n```\nwidth = GetAttribute(#DISPLAY, 0, #ATTRWIDTH)\nheight = GetAttribute(#DISPLAY, 0, #ATTRHEIGHT)\nid = GetAttribute(#DISPLAY, 0, #ATTRBGPIC)\nCreateBrush(1, width, height)\nSelectBrush(1)\nDisplayBGPicPart(id, 0, 0, width, height, 0, 0, {Layers = TRUE})\nEndSelect\n```\n\nThis code makes a copy of the current display contents in brush 1.",
    "platforms": ["All"],
    "insertText": "DisplayBGPicPart(${1:id}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
  },
  {
    "name": "DisplayBGPicPartFX",
    "helpId": "DisplayBGPicPartFX",
    "shortDescription": "display a part of a background picture with transition",
    "version": "1.0",
    "synopsis": "[handle] = DisplayBGPicPartFX(id, x, y, width, height[, table])",
    "functionDocs": "This is an extended version of the [DisplayBGPicPart()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBGPicPart_.html) command. It does the same but displays the part with a transition effect.\n\nIf layers are enabled, this command will add a new layer of the type `#BGPICPART` to the layer stack.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type`: Specifies the desired effect for the transition. See [DisplayTransitionFX](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). (defaults to `#RANDOMEFFECT`)\n\n- `Speed`: Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter`: Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async`: You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `DisplayBGPicPartFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `DX`: Destination x position for the tile. (defaults to the x specified as parameter 2)\n\n- `DY`: Destination y position for the tile. (defaults to the y specified as parameter 3)\n\n- `Layers`: Specify `True` here if the layers of the background picture shall also be displayed (requires enabled layers). (defaults to `False`)",
    "inputsDocs": "* `id` — identifier of the background picture to use as source\n* `x` — left corner\n* `y` — top corner\n* `width` — width of the tile\n* `height` — height of the tile\n* `table` — optional: transition effect configuration",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nDisplayBGPicPartFX(2, 0, 0, 100, 100, #HSTRIPES32, 10)   ; old syntax\n\nOR\n\nDisplayBGPicPartFX(2, 0, 0, 100, 100, {Type = #HSTRIPES32,\n     Speed = 10})  ; new syntax\n```\n\nDisplay the first 100 pixels and rows from background picture 2 on the screen with the transition effect `#HSTRIPES32` at speed 10.",
    "platforms": ["All"],
    "insertText": "DisplayBGPicPartFX(${1:id}, ${2:x}, ${3:y}, ${4:width}, ${5:height})"
  },
  {
    "name": "DisplayTransitionFX",
    "helpId": "DisplayTransitionFX",
    "shortDescription": "change the background picture using a transition effect",
    "version": "1.0",
    "synopsis": "[handle] = DisplayTransitionFX(id[, table])",
    "functionDocs": "This function displays a new background picture with the specified transition effect. A list of all available effects is appended below. You also have to specify the speed of the transition which can be either one of the special speed constants (`#SLOWSPEED`, `#NORMALSPEED`, `#FASTSPEED`) or a custom fine-tuned numeric value. The rule of thumb for the speed parameter: the higher the value the faster the transition will run.\n\nFor the best effect, the new background picture should have the same dimensions as the old. If this is not the case, the old background picture will be scaled to the size of the new one.\n\nNote that transparent BGPics cannot be displayed using a transition effect. It is also not possible to display a non-transparent BGPic with transition effect if the current BGPic is a transparent one. For this function to work, two conditions must be met: The current BGPic as well as the new BGPic must both be non-transparent.\n\nStarting with Hollywood 4.0 this function uses a new syntax with just a single table as an optional argument. The old syntax is still supported for compatibility reasons. The optional table argument can be used to configure the transition effect. The following options are possible:\n\n- `Type`: Specifies the desired effect for the transition. See the list below for possible effects. (defaults to `#RANDOMEFFECT`)\n\n- `Speed`: Specifies the desired speed for the transition. The higher the value you specify here, the faster the effect will be displayed. (defaults to `#NORMALSPEED`)\n\n- `Parameter`: Some transition effects accept an additional parameter. This can be specified here. (defaults to `#RANDOMPARAMETER`)\n\n- `Async`: You can use this field to create an asynchronous draw object for this transition. If you pass `True` here `DisplayTransitionFX()` will exit immediately, returning a handle to an asynchronous draw object which you can then draw using AsyncDrawFrame(). See [AsyncDrawFrame](https://www.hollywood-mal.com/docs/html/hollywood/AsyncDrawFrame_.html).\n\n- `X`: Specifies the new x position for the display. If you want the display to keep its current x position, specify the special constant `#KEEPPOSITION`. Defaults to `#CENTER`.\n\n- `Y`: Specifies the new y position for the display. If you want the display to keep its current y position, specify the special constant `#KEEPPOSITION`. Defaults to `#CENTER`.\n\nThe following effects are currently available:\n\n- Horizontal stripes: `#HSTRIPES2`, `#HSTRIPES4`, `#HSTRIPES16`, `#HSTRIPES32`\n- Vertical stripes: `#VSTRIPES2`, `#VSTRIPES8`, `#VSTRIPES16`, `#VSTRIPES32`\n- Fast horizontal blinds: `#HBLINDS8`, `#HBLINDS16`, `#HBLINDS32`, `#HBLINDS64`, `#HBLINDS128`\n- Fast vertical blinds: `#VBLINDS8`, `#VBLINDS16`, `#VBLINDS32`, `#VBLINDS64`, `#VBLINDS128`\n- Horizontal curtain: `#HOPENCURTAIN`, `#HCLOSECURTAIN`\n- Vertical curtain: `#VOPENCURTAIN`, `#VCLOSECURTAIN`\n- Horizontal lines: `#HLINES`, `#HLINES2`\n- Vertical lines: `#VLINES`, `#VLINES2`\n- Reveal: `#REVEALLEFT`, `#REVEALRIGHT`, `#REVEALTOP`, `#REVEALBOTTOM`\n- Bars: `#BARS`\n- Quarters: `#QUARTERS`\n- Crossfade: `#CROSSFADE`\n- Fade: `#FADE`; optional argument specifies color to use\n- Blend: `#BLEND`; optional argument specifies color to use for blending\n\nStarting with Hollywood 1.5 there are some new effects:\n\n- Rectangle zoom in: `#RECTCENTER`, `#RECTNORTH`, `#RECTNORTHEAST`, `#RECTEAST`, `#RECTSOUTHEAST`, `#RECTSOUTH`, `#RECTSOUTHWEST`, `#RECTWEST`, `#RECTNORTHWEST`\n- Rectangle zoom out: `#RECTBACKCENTER`, `#RECTBACKNORTH`, `#RECTBACKNORTHEAST`, `#RECTBACKEAST`, `#RECTBACKSOUTHEAST`, `#RECTBACKSOUTH`, `#RECTBACKSOUTHWEST`, `#RECTBACKWEST`, `#RECTBACKNORTHWEST`\n- Scroll in: `#SCROLLLEFT`, `#SCROLLRIGHT`, `#SCROLLTOP`, `#SCROLLBOTTOM` (optional argument specifies a special effect to apply to the scroll process, you can use the same effects here like in [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html))\n- Stretch image in: `#STRETCHLEFT`, `#STRETCHRIGHT`, `#STRETCHTOP`, `#STRETCHBOTTOM`, `#HSTRETCHCENTER`, `#VSTRETCHCENTER`\n- Zoom image in: `#ZOOMCENTER`, `#ZOOMNORTH`, `#ZOOMNORTHEAST`, `#ZOOMEAST`, `#ZOOMSOUTHEAST`, `#ZOOMSOUTH`, `#ZOOMSOUTHWEST`, `#ZOOMWEST`, `#ZOOMNORTHWEST`\n- Flow: `#HFLOWTOP`, `#HFLOWBOTTOM`, `#VFLOWLEFT`, `#VFLOWRIGHT`\n- Gates: `#HOPENGATE`, `#HCLOSEGATE`, `#VOPENGATE`, `#VCLOSEGATE` (B)\n- Pushes: `#PUSHLEFT`, `#PUSHRIGHT`, `#PUSHTOP`, `#PUSHBOTTOM` (B)\n- Puzzle: `#PUZZLE`\n- Diagonal: `#DIAGONAL`\n- Roll on: `#ROLLTOP`\n- Wallpaper: `#WALLPAPERTOP`\n- General vertical stripes: `#VSTRIPES`; optional argument specifies the number of stripes to display\n- General horizontal stripes: `#HSTRIPES`; optional argument specifies the number of stripes to display\n\nStarting with Hollywood 1.9 there are a number of new effects:\n\n- Scroll image in: `#SCROLLNORTHEAST`, `#SCROLLSOUTHEAST`, `#SCROLLSOUTHWEST`, `#SCROLLNORTHWEST` (optional argument specifies a special effect to apply to the scroll process, you can use the same effects here like in [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html))\n- Reveal clock wise: `#CLOCKWIPE`\n- Star zoom in: `#STAR`\n- Strange pushes: `#HSTRANGEPUSH`, `#VSTRANGEPUSH` (B)\n- Slide projector: `#SLIDELEFT`, `#SLIDERIGHT`, `#SLIDETOP`, `#SLIDEBOTTOM` (B)\n- Spiral reveal: `#SPIRAL`\n- Swiss cross effect: `#SWISS`\n- Quad rectangles: `#QUADRECT`\n- Split effects: `#HSPLIT`, `#VSPLIT`\n- Up'n'down: `#UPNDOWN`\n- Register card effect: `#CARDTOP`, `#CARDBOTTOM` (B)\n- Sun zoom in: `#SUN`\n- Water ripples: `#WATER1`, `#WATER2`, `#WATER3`, `#WATER4` (!)\n- Strudel effect: `#STRUDEL` (!)\n- Dissolve picture: `#DISSOLVE`\n- Zoom to pixels: `#PIXELZOOM1`\n- Zoom to pixels 2: `#PIXELZOOM2` (B)\n- Large zoom effects: `#ZOOMIN`, `#ZOOMOUT` (B)\n- Crush effects: `#CRUSHLEFT`, `#CRUSHRIGHT`, `#CRUSHTOP`, `#CRUSHBOTTOM` (B)\n- Flip coins: `#VFLIPCOIN`, `#VLOWFLIPCOIN`, `#HFLIPCOIN`, `#HLOWFLIPCOIN` (B)\n- Turn down picture effect: `#TURNDOWNTOP`, `#TURNDOWNBOTTOM`, `#TURNDOWNLEFT`, `#TURNDOWNRIGHT` (B)\n- Type writer effect: `#TYPEWRITER` (T)  [no longer supported since V3.1]\n- Wallpaper: `#WALLPAPERLEFT` (!)\n- Roll on: `#ROLLLEFT`\n\nIf you choose `#RANDOMEFFECT`, Hollywood will randomly choose any effect from all possible effects. Very useful when doing slideshows. When using the 68k version of Hollywood, `#RANDOMEFFECT` will not choose any high-end effects automatically.\n\nLegend:\n\n- (B): effect can only be used with background pictures\n\n- (O): effect can only be used with objects (brushes, layers etc. - but not background pictures!)\n\n- (T): effect can only be used with text objects\n\n- (!): high-end effects which means that it needs a lot of cpu power to run smoothly. You can run them on 68k, but it is no fun at all because they will take like 4 minutes for a transition or so. You should only use \"!\"-effects on PPC systems, e.g. MorphOS or WarpOS.",
    "inputsDocs": "* `id` — identifier of the background picture to display\n* `table` — optional: transition effect configuration",
    "resultsDocs": "* `handle` — optional: handle to an asynchronous draw object; will only be returned if `Async` has been set to `True` (see above)",
    "example": "```\nDisplayTransitionFX(2, #HSTRIPES32, 10)   ; old syntax\n\nOR\n\nDisplayTransitionFX(2, {Type = #HSTRIPES32, Speed = 10})  ; new syntax\n```\n\nDisplay background picture 2 using the `#HSTRIPES32` effect and speed 10.",
    "platforms": ["All"],
    "insertText": "DisplayTransitionFX(${1:id})"
  },
  {
    "name": "FreeBGPic",
    "helpId": "FreeBGPic",
    "shortDescription": "free a background picture",
    "version": "1.0",
    "synopsis": "FreeBGPic(id)",
    "functionDocs": "This function frees the memory of the background picture specified by `id`. To reduce memory consumption, you should free background picture when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the background picture",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreeBGPic(${1:id})"
  },
  {
    "name": "LoadBGPic",
    "helpId": "LoadBGPic",
    "shortDescription": "load a background picture",
    "version": "1.0",
    "synopsis": "[id] = LoadBGPic(id, filename$[, table])",
    "functionDocs": "This function loads the picture specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadBGPic()` will automatically choose an identifier and return it.\n\nImage formats that are supported on all platforms are PNG, JPEG, BMP, IFF ILBM, GIF, and image formats you have a plugin for. Depending on the platform Hollywood is running on, more image formats might be supported. For example, on Amiga compatible systems Hollywood will be able to open all image formats you have datatypes for as well. On Windows, `LoadBGPic()` can also load image formats supported by the Windows Imaging Component.\n\nStarting with Hollywood 5.0, this function can also load vector formats like SVG if you have an appropriate plugin installed. Using a vector image as a BGPic has the advantage that when the size of the display changes (e.g. because the user is resizing the window), the BGPic can be adapted to the new size without any losses in quality because vector BGPics can be infinitely scaled without any sacrifices in quality. See [Vector BGPics](https://www.hollywood-mal.com/docs/html/hollywood/VectorBGPicNote_.html).\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Transparency`: This field can be used to specify a color in [RGB](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) notation that shall appear transparent in the BGPic.\n\n- `LoadAlpha`: Set this field to `True` if the alpha channel of the image shall be loaded, too. Please note that not all pictures have an alpha channel and that not all picture formats are capable of storing alpha channel information. It is suggested that you use the PNG format if you need alpha channel data. This tag defaults to `False`. (V4.5)\n\n- `FillStyle`: This tag allows you to define a background fill style for this BGPic. This fill style is only used when the BGPic has transparent areas, i.e. when you use either the `Transparency` or the `LoadAlpha` tags, or when loading an image in a format that always contains an alpha channel. `FillStyle` is useful especially in the latter case because some formats always return an alpha channel but most of the time you will not want to use this alpha channel when loading such an image into a background picture. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). (V5.0)\n\n- `FillColor`: If the `FillStyle` tag was set to `#FILLCOLOR`, you can use this tag to define the RGB color that shall be used for backfilling. (V5.0)\n\n- `TextureBrush`: If the `FillStyle` tag was set to `#FILLTEXTURE`, you can use this tag to specify the identifier of the brush that shall be used for texturing. (V5.0)\n\n- `TextureX, TextureY`: These tags control the start offset inside the texture brush and are only supported if `FillStyle` was set to `#FILLTEXTURE`. See [SetFillStyle](https://www.hollywood-mal.com/docs/html/hollywood/SetFillStyle_.html). (V5.0)\n\n- `GradientStyle`: If the `FillStyle` tag was set to `#FILLGRADIENT`, you can use this tag to specify the gradient type to use. This can be `#LINEAR`, `#RADIAL`, or `#CONICAL`. (V5.0)\n\n- `GradientAngle`: Specifies the orientation of the gradient if filling style is set to `#FILLGRADIENT`. The angle is expressed in degrees. Only possible for `#LINEAR` and `#CONICAL` gradients. (V5.0)\n\n- `GradientStartColor, GradientEndColor`: Use these two to configure the colors of the gradient if filling style is set to `#FILLGRADIENT`. (V5.0)\n\n- `GradientCenterX, GradientCenterX`: Sets the center point for gradients of type `#RADIAL` or `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBalance`: This tag controls the balance point for gradients of type `#CONICAL`. Must be a floating point value between 0.0 and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientBorder`: This tag controls the border size for gradients of type `#RADIAL`. Must be a floating point value between 0.0 and and 1.0. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). (V5.0)\n\n- `GradientColors`: This tag can be used to create a gradient between more than two colors. This has to be set to a table that contains sequences of alternating color and stop values. See [CreateGradientBGPic](https://www.hollywood-mal.com/docs/html/hollywood/CreateGradientBGPic_.html). If this tag is used, the `GradientStartColor` and `GradientEndColor` tags are ignored. (V5.0)\n\n- `ScaleWidth, ScaleHeight`: These fields can be used to load a scaled version of the image. If the image driver supports scaled loading, this will give you some significant speed-up for example in case you just want to load a thumbnail-sized version of a large image. If the image driver does not support scaled loading, the full image will be loaded first before it is scaled. This is not much faster than manually scaling the image after loading. You can pass an absolute pixel value or a string containing a percent specification here. (V5.3)\n\n- `SmoothScale`: If `ScaleWidth` or `ScaleHeight` is set, you can use this item to specify whether or not Hollywood shall use anti-aliased scaling. Defaults to `False` which means no anti-aliasing. Note that anti-aliased scaling is much slower than normal scaling. (V5.3)\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this BGPic. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V6.0)\n\n- `LoadTransparency`: If this tag is set to `True`, the monochrome transparency of the image will be loaded. Please note that this tag is specifically designed for monochrome transparency channels, i.e. a transparent pen in a palette-based image. If you want to load the alphachannel of an image, set the `LoadAlpha` tag to `True`. This tag defaults to `False`. (V6.0)\n\n- `LoadPalette`: If this tag is set to `True`, Hollywood will load the BGPic as a palette BGPic. This means that you can get and modify the BGPic's palette which is useful for certain effects like color cycling. You can also make pens transparent using the `TransparentPen` tag (see below) or the `LoadTransparency` tag (see above). Palette BGPics also have the advantage of requiring less memory because 1 pixel just needs 1 byte of memory instead of 4 bytes for 32-bit images. Note that if you set the `LoadPalette` tag to `True`, your display will become a palette display as soon as the BGPic is shown. Palette displays behave differently than normal true colour displays and there are some things to be considered when using them. See [Palette displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). This tag defaults to `False`. (V9.0)\n\n- `FillPen`: If the `LoadPalette` tag has been set to `True` (see above) and there is a transparent pen in the image, you can use the `FillPen` tag to specify the filling color for all transparent areas in the image. This is the palette equivalent to the `FillColor` tag which is only used for non-palette images. (V9.0)\n\n- `TransparentPen`: If the `LoadPalette` tag has been set to `True` (see above), the `TransparentPen` tag can be used to define a pen that should be made transparent. Pens are counted from 0. Alternatively, you can also set the `LoadTransparency` tag to `True` to force Hollywood to use the transparent pen that is stored in the image file (if the image format supports the storage of transparent pens). This tag defaults to `#NOPEN`. (V9.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nIf you use `Transparency`, `LoadTransparency` or `LoadAlpha` your display will automatically adopt the transparency settings of the BGPic when it is shown. In other words, if you want to have a display with transparency simply load a transparent BGPic and display it.\n\nPlease note that the `Transparency`, `LoadTransparency` and `LoadAlpha` fields are mutually exclusive. A BGPic can only have one transparency setting!\n\nThis command is also available from the preprocessor: Use [@BGPIC](https://www.hollywood-mal.com/docs/html/hollywood/atBGPIC_.html) to preload background pictures!",
    "inputsDocs": "* `id` — identifier for the background picture or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id select](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: further configuration options for loading operation",
    "resultsDocs": "* `id` — optional: identifier of the background picture; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadBGPic(2, \"MyBG.iff\", {Transparency = $00FF00})\n```\n\nThis loads \"MyBG.iff\" as background picture 2 with the color green as transparency mask.",
    "platforms": ["All"],
    "insertText": "LoadBGPic(${1:id}, ${2:filename$})"
  },
  {
    "name": "ScaleBGPic",
    "helpId": "ScaleBGPic",
    "shortDescription": "scale a background picture",
    "version": "1.5",
    "synopsis": "ScaleBGPic(id, width, height[, smooth])",
    "functionDocs": "This function scales the background picture specified by `id` to the specified width and height. You cannot use this function with the background picture that is currently displayed. If you want to change the size of this picture, you will have to change the display size using [ChangeDisplaySize()](https://www.hollywood-mal.com/docs/html/hollywood/ChangeDisplaySize_.html).\n\nHollywood keeps the original picture of every background picture so that you do not have to do that. Every scaling done with `ScaleBGPic()` is made with the original picture and not with a scaled versions (in contrast to [ScaleBrush()](https://www.hollywood-mal.com/docs/html/hollywood/ScaleBrush_.html)). The original picture will only be deleted if you modify the background picture's contents using [SelectBGPic()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBGPic_.html).\n\nNew in V2.0: You can pass `#KEEPASPRAT` as either `width` or `height`. Hollywood will calculate the size then automatically by taking the aspect-ratio of the background picture into account.\n\nStarting with Hollywood 2.0, `width` and `height` can also be a string containing a percent specification, e.g. \"50%\".\n\nStarting with Hollywood 2.5 you can choose to have the scaled graphics interpolated by passing `True` in the `smooth` argument. The graphics will then be scaled using anti-alias.",
    "inputsDocs": "* `id` — background picture to scale\n* `width` — new width for the background picture\n* `height` — new height for the background picture\n* `smooth` — optional: whether or not anti-aliased scaling shall be used (V2.5)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ScaleBGPic(${1:id}, ${2:width}, ${3:height})"
  },
  {
    "name": "SelectBGPic",
    "helpId": "SelectBGPic",
    "shortDescription": "select a background picture as output device",
    "version": "1.5",
    "synopsis": "SelectBGPic(id[, mode, combomode])",
    "functionDocs": "This function selects the BGPic specified by `id` as the current output device. This command be used in various different modes. The usual mode to use `SelectBGPic()` is layers mode (`#SELMODE_LAYERS`) which is also the default mode. Layers mode means that all graphics data that are output by Hollywood will be added as layers to this background picture. Therefore you will have to enable layers before using this command in layers mode. Your background picture will never be modified in layers mode, it will just get more and more layers.\n\nAlternatively, you can use the `#SELMODE_NORMAL` or `#SELMODE_COMBO` modes. These modes will modify your BGPic's data. They can only be used on BGPics that are currently not associated with a display. `#SELMODE_NORMAL` means that only the color channels of the BGPic will be altered when you draw to it. The transparency channel of the BGPic (can be either a mask or an alpha channel) will never be altered. You can change this behaviour by using `#SELMODE_COMBO` in the optional `mode` argument. If you use this mode, every Hollywood graphics command that is called after `SelectBGPic()` will draw into the color and transparency channel of the BGPic. If the BGPic does not have a transparency channel, `#SELMODE_COMBO` behaves the same as `#SELMODE_NORMAL`.\n\nStarting with Hollywood 5.0 you can use the optional `combomode` argument to specify how `#SELMODE_COMBO` should behave. If `combomode` is set to 0, the color and transparency information of all pixels in the source image are copied to the destination image in any case - even if the pixels are invisible. This is the default behaviour. If `combomode` is set to 1, only the visible pixels are copied to the destination image. This means that if the alpha value of a pixel in the source image is 0, i.e. invisible, it will not be copied to the destination image. Hollywood 6.0 introduces the new combomode 2. If you pass 2 in `combomode`, Hollywood will blend color channels and alpha channel of the source image into the destination image's color and alpha channels. When you draw the destination image later, it will look as if the two images had been drawn on top of each other consecutively. Please note that the `combomode` argument is only supported together with `#SELMODE_COMBO`. It doesn't have any effect when used with the other modes.\n\nNote that when you use `#SELMODE_NORMAL` or `#SELMODE_COMBO`, the original graphics of the BGPic are modified. You will always be drawing to the original graphics of the BGPic. Imagine that you have a 640x480 BGPic that is currently scaled to 800x600 because you called [ChangeDisplaySize()](https://www.hollywood-mal.com/docs/html/hollywood/ChangeDisplaySize_.html). If you call `SelectBGPic()` with `#SELMODE_NORMAL` or `#SELMODE_COMBO` now on this BGPic, you will actually be drawing to the 640x480 picture. The 800x600 picture will be updated when [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) is called. On [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html), Hollywood will scale the original graphics to the current output size of the BGPic, but your initial drawing will always occur on the original BGPic.\n\nAn alternative way to draw into the transparency channels of a BGPic is to do this separately using [SelectMask()](https://www.hollywood-mal.com/docs/html/hollywood/SelectMask_.html) or [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html). These two commands, however, will write data to the transparency channel only. They will not touch the color channel. So if you want both channels, color and transparency, to be affected, you need to use `SelectBGPic()` with `mode` set to `#SELMODE_COMBO`.\n\nWhen you are finished with rendering to your BGPic and want your display to become the output device again, just call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html).\n\nOnly commands that output graphics directly can be used after `SelectBGPic()`. You may not call animated functions like [MoveBrush()](https://www.hollywood-mal.com/docs/html/hollywood/MoveBrush_.html) or [DisplayBrushFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayBrushFX_.html) while `SelectBGPic()` is active.\n\nWhen `mode` is set to `#SELMODE_LAYERS`, `SelectBGPic()` can also come handy when you want to make multiple changes to the layers of the current BGPic without causing a refresh after each change. For example, you may want to insert 100 new layers at once. This would be pretty slow if you did it in the conventional way because Hollywood would refresh the display a hundred times. To avoid this, you can simply call `SelectBGPic()` and insert the 100 layers and Hollywood will not refresh the display before you call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html). Inside a `SelectBGPic()`-[EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) block, you can do as many changes as you like. They will not be drawn before [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) is called. See below for an example.",
    "inputsDocs": "* `id` — background picture which shall be used as output device\n* `mode` — optional: rendering mode to use (see above); this can be either `#SELMODE_LAYERS`, `#SELMODE_NORMAL` or `#SELMODE_COMBO`; defaults to `#SELMODE_LAYERS` (V4.5)\n* `combomode` — optional: mode to use when `#SELMODE_COMBO` is active (see above); defaults to 0 (V5.0)",
    "example": "```\nEnableLayers()\nSelectBGPic(2)\nTextOut(#CENTER, #CENTER, \"Hello World\")\nBox(0, 0, 100, 100, #RED)\nBox(#RIGHT, #BOTTOM, 100, 100, #BLUE)\nEndSelect()\nDisplayBGPic(2)\n```\n\nThe above code selects background picture 2 as the current output device and adds three layers to it (one text and two rectangles). After that, the display is selected as the output device and then background picture 2 is displayed with its three layers.\n\n---\n\n```\nSetFillStyle(#FILLCOLOR)\nEnableLayers\nSelectBGPic(1)    ; we assume that 1 is our current BGPic\n; add 100 random layers\nFor Local k = 1 To 100\n   Box(Rnd(540), Rnd(380), 100, 100, RGB(Rnd(255), Rnd(255), Rnd(255)))\nNext\nEndSelect       ; now the 100 layers are drawn in one go!\n```\n\nThis code illustrates the case discussed above. You need to make lots of changes and you want to defer drawing for performance reasons. In our case, we want to add 100 layers to the current BGPic. So we encapsulate this code by a `SelectBGPic()`-EndSelect block. Hollywood will silently add the 100 layers and will draw them in one go when EndSelect() is called. This is much faster than adding them without `SelectBGPic()` because in that case every call to Box() would cause a refresh.",
    "platforms": ["All"],
    "insertText": "SelectBGPic(${1:id})"
  }
]
