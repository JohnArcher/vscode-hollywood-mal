[
  {
    "name": "ContrastPalette",
    "helpId": "ContrastPalette",
    "shortDescription": "enhance or reduce palette contrast",
    "version": "9.0",
    "synopsis": "ContrastPalette(id, inc[, repeat])",
    "functionDocs": "This command can be used to enhance or reduce the color contrast in the specified palette. If the `inc` argument is set to `True`, the contrast is enhanced. If it is set to `False`, the contrast is reduced. The optional argument `repeat` can be used to apply the effect to the palette multiple times. This is useful if you want to create sharper contrasts.",
    "inputsDocs": "* `id` — palette to modify\n* `inc` — `True` to increase contrast, `False` to decrease contrast\n* `repeat` — optional: specifies how many times the contrast operation should be repeated (defaults to 1 which means run the effect just once)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ContrastPalette(${1:id}, ${2:inc})"
  },
  {
    "name": "CopyPalette",
    "helpId": "CopyPalette",
    "shortDescription": "clone a palette",
    "version": "9.0",
    "synopsis": "[id] = CopyPalette(source, dest)",
    "functionDocs": "This function clones the palette specified by `source` and creates a copy of it as palette `dest`. The new palette is independent from the old palette so you can free the source palette after it has been cloned.\n\nIf you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as `dest`, `CopyPalette()` will return a handle to the new palette to you. Otherwise the new palette will use the identifier specified in `dest`.",
    "inputsDocs": "* `source` — source palette id\n* `dest` — identifier of the palette to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)",
    "resultsDocs": "* `id` — optional: handle to the new palette; will only be returned if you specified [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `dest`",
    "example": "```\nCopyPalette(1, 10)\nFreePalette(1)\n```\n\nThe above code creates a new palette 10 which contains the same color data as palette 1. Then it frees palette 1 because it is no longer needed.",
    "platforms": ["All"],
    "insertText": "CopyPalette(${1:source}, ${2:dest})"
  },
  {
    "name": "CopyPens",
    "helpId": "CopyPens",
    "shortDescription": "copy pens from one palette to another",
    "version": "9.0",
    "synopsis": "CopyPens(srcid, dstid, srcidx, n[, dstidx])",
    "functionDocs": "This function will copy `n` pens from the palette specified by `srcid` to the palette specified by `dstid`. The pens will be read from index `srcidx` in the source palette and they will be copied to the index `dstidx` in the destination palette. If `dstidx` is omitted, the index specified in `srcidx` will be used as the destination index.\n\nNote that it is allowed to use the same palette identifier for `srcid` and `dstid`. In that case, pens inside a single palette object can be moved around. Overlapping pens are also supported.",
    "inputsDocs": "* `srcid` — source palette\n* `dstid` — destination palette; can be the same as the source\n* `srcidx` — index of the first pen to be copied (starts from 0)\n* `n` — number of pens to copy\n* `dstidx` — optional: index to copy pens to in the destination palette; defaults to `srcidx`",
    "example": "```\nCopyPens(1, 2, 0, 32)\n```\n\nThe code above copies the first 32 pens from palette 1 to palette 2.",
    "platforms": ["All"],
    "insertText": "CopyPens(${1:srcid}, ${2:dstid}, ${3:srcidx}, ${4:n})"
  },
  {
    "name": "CreatePalette",
    "helpId": "CreatePalette",
    "shortDescription": "create new palette",
    "version": "9.0",
    "synopsis": "[id] = CreatePalette(id[, data, t])",
    "functionDocs": "This function creates a new palette and assigns the identifier `id` to it. The `data` argument may either be a table containing a number of colors that should be used to initialize the palette's pens or you may set `data` to one of Hollywood's predefined palette types. See below for all predefined palette types supported by Hollywood. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in the `id` argument, `CreatePalette()` will automatically choose an identifier for the new palette and return it to you.\n\nThe following predefined palette types are supported by Hollywood:\n\n- `#PALETTE_MONOCHROME`: Two color, black and white palette.\n\n- `#PALETTE_GRAY4`: 4 color grayscale palette.\n\n- `#PALETTE_GRAY8`: 8 color grayscale palette.\n\n- `#PALETTE_GRAY16`: 16 color grayscale palette.\n\n- `#PALETTE_GRAY32`: 32 color grayscale palette.\n\n- `#PALETTE_GRAY64`: 64 color grayscale palette.\n\n- `#PALETTE_GRAY128`: 128 color grayscale palette.\n\n- `#PALETTE_GRAY256`: 256 color grayscale palette.\n\n- `#PALETTE_CGA`: Standard CGA palette (16 colors).\n\n- `#PALETTE_OCS`: Standard OCS palette (32 colors).\n\n- `#PALETTE_EGA`: Standard EGA palette (64 colors).\n\n- `#PALETTE_AGA`: Standard AGA palette (256 colors).\n\n- `#PALETTE_WORKBENCH`: Standard classic Amiga Workbench palette (256 colors).\n\n- `#PALETTE_MACINTOSH`: Standard classic Macintosh palette (256 colors).\n\n- `#PALETTE_WINDOWS`: Standard classic Windows palette (256 colors).\n\n- `#PALETTE_DEFAULT`: Same as `#PALETTE_AGA`. If you omit the `data` argument, `CreatePalette()` will initialize the new palette using the pens from `#PALETTE_DEFAULT`.\n\nIf you pass a table of colors in the `data` argument, make sure that all colors are passed as [RGB values](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html). Note that the table can also be a sparse array with only the pens initialized that you actually need. Pens that aren't in the `data` table will be initialized to black. See below for an example.\n\nThe optional table argument `t` can be used to specify further options. The following options are currently recognized:\n\n- `Depth`: The desired depth for the palette. This must be between 1 (= 2 colors) and 8 (= 256 colors). The default is 8. If `Depth` specifies more colors than you pass in the table in the `data` parameter, the remaining colors will be initialized to black. This tag is only used if you pass a table in the `data` argument. If you pass a predefined palette type in `data`, the predefined palette type's depth overrides the depth specified here.\n\n- `TransparentPen`: This tag can be used to specify the pen that shall be transparent in the palette. This defaults to `#NOPEN` which means that no pen shall be made transparent.\n\n- `Cycle`: This tag can be used to define several ranges of colors that can be cycled. When set, you must pass a table of subtables to `Cycle`, each subtable describing a configuration of a color cycling effect. Each subtable supports the following tags:\n\n  - `Low`: The pen index that marks that start of the color range.\n\n  - `High`: The pen index that marks the end of the color range.\n\n  - `Rate`: The desired speed of the color cycling effect. A value of 16384 indicates 60 frames per second. All other speeds scale linearly from this base, e.g. a value of 8192 indicates 30 frames per second, and so on.\n\n  - `Reverse`: If this tag is set to `True`, the colors should be cycled in reverse. Defaults to `False`.\n\n  - `Active`: If this tag is set to `False`, the color range will be marked as inactive. Defaults to `True`.",
    "inputsDocs": "* `id` — id for the new palette or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `data` — optional: either one of the predefined palette types (see above) or a table containing an array of colors (defaults to `#PALETTE_DEFAULT`)\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the palette; will only be returned if you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nCreatePalette(1, {#RED, #GREEN, #BLUE}, {Depth = 2})\n```\n\nThe code above creates a palette with four colors initialized to red, green, blue and black.\n\n---\n\n```\nCreatePalette(1, {[0] = #RED, [127] = #BLUE, [255] = #GREEN})\n```\n\nThe code above creates a new palette with 256 colors and initializes pen 0 to red, pen 127 to blue, and the last pen to green. All other pens will be initialized to black.\n\n---\n\n```\nCreatePalette(1)\n```\n\nCreates a new palette and initializes its colors to those of `#PALETTE_DEFAULT`.\n\n---\n\n```\nCreatePalette(1, #PALETTE_CGA)\n```\n\nCreates a new palette using the CGA colors.",
    "platforms": ["All"],
    "insertText": "CreatePalette(${1:id})"
  },
  {
    "name": "CyclePalette",
    "helpId": "CyclePalette",
    "shortDescription": "cycle palette colors",
    "version": "9.0",
    "synopsis": "CyclePalette(id, start, end[, repeat])",
    "functionDocs": "This function cycles the palette colors between the pen specified by `start` and the pen specified by `end`. If `end` is greater than `start`, all pens starting at the index `start` will be shifted to the right and wrap at the pen specified by `end`. If `start` is greater than `end`, pens will be cycled in reverse, i.e. they will be shifted to the left, wrapping at the pen index specified by `start`. The `repeat` argument can be used to specify how many times the cycling should be repeated. This defaults to 1 which means that colors should only be cycled once.",
    "inputsDocs": "* `id` — identifier of the palette whose pens should be cycled\n* `start` — start pen of cycling range\n* `end` — end pen of cycling range\n* `repeat` — optional: number of times to repeat cycling (defaults to 1)",
    "example": "```\n@DISPLAY {Palette = #PALETTE_CGA}\nSetFont(#SANS, 96)\nSetPaletteMode(#PALETTEMODE_PEN)\nt$ = \"Hollywood\"\nFor Local k = 0 To StrLen(t$) - 1\n    SetDrawPen(k + 2)\n    Print(MidStr(t$, k, 1))\nNext\nExtractPalette(1, #BGPIC, 1)\nStartTimer(1)\nRepeat\n    CyclePalette(1, 2, 10)\n    SetPalette(1)\n    WaitTimer(1, 80)\nForever\n```\n\nThe code above prints the individual of characters of the string \"Hollywood\" in different colors and then cycles their colors.",
    "platforms": ["All"],
    "insertText": "CyclePalette(${1:id}, ${2:start}, ${3:end})"
  },
  {
    "name": "ExtractPalette",
    "helpId": "ExtractPalette",
    "shortDescription": "extract palette from object",
    "version": "9.0",
    "synopsis": "[id] = ExtractPalette(id, srctype, srcid[, frame])",
    "functionDocs": "This function extracts the palette from the object specified by `srctype` and `srcid`, creates a new palette and assigns the identifier `id` to that new palette. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as `id`, `ExtractPalette()` will return a handle to the new palette to you. Otherwise the new palette will use the identifier specified in `id`.\n\nThe following object types can be passed in `srctype`:\n\n- `#ANIM`: Extract palette from an anim frame. If you set `srctype` to `#ANIM`, you also need to pass the anim frame whose palette should be extracted in the `frame` parameter. Frames are counted from 1, which is also the default value for `frame`.\n\n- `#BGPIC`: Extract palette from a BGPic.\n\n- `#BRUSH`: Extract palette from a brush.\n\n- `#FONT`: Extract palette from a color font.\n\n- `#SPRITE`: Extract palette from a sprite frame. If you set `srctype` to `#SPRITE`, you also need to pass the sprite frame whose palette should be extracted in the `frame` parameter. Frames are counted from 1, which is also the default value for `frame`.",
    "inputsDocs": "* `id` — identifier of the palette to be created or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `srctype` — object type to use as source (see above)\n* `srcid` — id of source object to use\n* `frame` — optional: number of frame to use if object type is `#ANIM` or `#SPRITE` (defaults to 1)",
    "resultsDocs": "* `id` — optional: handle to the new palette; will only be returned if you specified [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`",
    "example": "```\nExtractPalette(1, #BRUSH, 10)\n```\n\nThe code above extracts the palette from brush 10 and stores it as palette object 1.",
    "platforms": ["All"],
    "insertText": "ExtractPalette(${1:id}, ${2:srctype}, ${3:srcid})"
  },
  {
    "name": "FreePalette",
    "helpId": "FreePalette",
    "shortDescription": "free a palette",
    "version": "9.0",
    "synopsis": "FreePalette(id)",
    "functionDocs": "This function frees the palette specified by `id`. To reduce memory consumption, you should free palettes when you do not need them any longer.",
    "inputsDocs": "* `id` — identifier of the palette to free",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "FreePalette(${1:id})"
  },
  {
    "name": "GammaPalette",
    "helpId": "GammaPalette",
    "shortDescription": "correct gamma values of palette",
    "version": "9.0",
    "synopsis": "GammaPalette(id, red, green, blue)",
    "functionDocs": "This function can be used to gamma correct the color channels of the specified palette. For each color channel, you have to pass a floating point value that specifies the desired gamma correction. A value of 1.0 means no change, a value smaller than 1.0 darkens the channel, a value greater than 1.0 lightens the channel.",
    "inputsDocs": "* `id` — palette to gamma correct\n* `red` — gamma correction for red channel\n* `green` — gamma correction for green channel\n* `blue` — gamma correction for blue channel",
    "example": "```\nGammaPalette(1, 1.5, 1.0, 0.5)\n```\n\nThe code above lightens the red channel and darkens the blue channel, while leaving the green color channel untouched.",
    "platforms": ["All"],
    "insertText": "GammaPalette(${1:id}, ${2:red}, ${3:green}, ${4:blue})"
  },
  {
    "name": "GetBestPen",
    "helpId": "GetBestPen",
    "shortDescription": "get best pen for color",
    "version": "9.0",
    "synopsis": "pen = GetBestPen(id, color)",
    "functionDocs": "This command searches for a pen in the palette specified by `id` whose color is the closest match to the color specified in the `color` argument and returns that pen. The `color` argument must be an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).",
    "inputsDocs": "* `id` — identifier of palette\n* `color` — [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) to find closest matching pen for",
    "resultsDocs": "* `pen` — pen that is the closest match for the specified color",
    "example": "```\nSetDrawPen(GetBestPen(1, #RED))\n```\n\nThe code above sets the pen that most closely resembles red as the drawing pen.",
    "platforms": ["All"],
    "insertText": "GetBestPen(${1:id}, ${2:color})"
  },
  {
    "name": "GetFreePen",
    "helpId": "GetFreePen",
    "shortDescription": "find unused pen",
    "version": "10.0",
    "synopsis": "pen = GetFreePen([t])",
    "functionDocs": "This function tries to find an unused pen in the currently active palette image and returns it. If all pens are used, -1 will be returned. By default, this function scans the palette pixel data of the current display so it will only work if the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). If you don't want `GetFreePen()` to use the current display, you can select the active palette image using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command but keep in mind that you need to select a palette object that has pixel data attached, e.g. a palette brush or a palette BGPic. Just selecting a palette object won't work because free pens can obviously only be determined if there's pixel data.\n\nYou can also use the optional table argument `t` to specify the source palette object. The table argument supports exactly the same arguments as the optional table argument of [GetPen()](https://www.hollywood-mal.com/docs/html/hollywood/GetPen_.html). See [GetPen](https://www.hollywood-mal.com/docs/html/hollywood/GetPen_.html).",
    "inputsDocs": "* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "* `pen` — unused pen index or -1 if all pens are in use",
    "platforms": ["All"],
    "insertText": "GetFreePen()"
  },
  {
    "name": "GetPalettePen",
    "helpId": "GetPalettePen",
    "shortDescription": "get pen color from palette",
    "version": "9.0",
    "synopsis": "color = GetPalettePen(id, pen)",
    "functionDocs": "This function gets the color of the pen specified by `pen` from the palette specified by `id`. The color will be returned as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html).",
    "inputsDocs": "* `id` — identifier of palette to use\n* `pen` — pen you want to get (starting from 0)",
    "resultsDocs": "* `color` — color of the pen, specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\ncolor = GetPalettePen(1, 0)\n```\n\nThe code gets the color of the first pen in palette 1.",
    "platforms": ["All"],
    "insertText": "GetPalettePen(${1:id}, ${2:pen})"
  },
  {
    "name": "GetPen",
    "helpId": "GetPen",
    "shortDescription": "get pen color",
    "version": "9.0",
    "synopsis": "color = GetPen(pen[, t])",
    "functionDocs": "This function gets the color of the pen specified by `pen` from the currently active palette. By default, the current display's palette is the active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). A palette can be made the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, you can also use `GetPen()` to get the pen color from a different palette object. To do so, you need to pass the optional table argument `t` to SetPen() and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object whose palette you want to query. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose palette you want to query. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose palette you want to query. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose palette you want to query. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.",
    "inputsDocs": "* `pen` — pen you want to get (starting from 0)\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "* `color` — color of the pen, specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\n@DISPLAY {Palette = #PALETTE_MONOCHROME}\ncolor0 = GetPen(0)\ncolor1 = GetPen(1)\n```\n\nThe code above creates a monochrome palette display and queries the colors of the first two pens. `color0` will be black and `color1` will be white.\n\n---\n\n```\ncolor = GetPen(4, {Type = #BRUSH, ID = 2})\n```\n\nThe code gets the color of pen 4 in brush 2.",
    "platforms": ["All"],
    "insertText": "GetPen(${1:pen})"
  },
  {
    "name": "InvertPalette",
    "helpId": "InvertPalette",
    "shortDescription": "invert palette colors",
    "version": "9.0",
    "synopsis": "InvertPalette(id)",
    "functionDocs": "This function inverts all colors in the palette specified by `id`, which means that all colors will be replaced with their complements (white will become black, blue will become yellow etc.).",
    "inputsDocs": "* `id` — palette to invert",
    "example": "```\nInvertPalette(1)\n```\n\nThe code above inverts the colors of palette 1.",
    "platforms": ["All"],
    "insertText": "InvertPalette(${1:id})"
  },
  {
    "name": "LoadPalette",
    "helpId": "LoadPalette",
    "shortDescription": "load a palette",
    "version": "9.0",
    "synopsis": "[id] = LoadPalette(id, filename$[, table])",
    "functionDocs": "This function loads the palette specified by `filename$` into memory and assigns the identifier `id` to it. If you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) in `id`, `LoadPalette()` will automatically choose an identifier and return it.\n\nThe palette specified in `filename$` can either be in the IFF ILBM palette format, as established by Deluxe Paint, or, alternatively, `filename$` can also be a normal image file that contains a palette. In that case, `LoadPalette()` will simply extract the palette from the image file.\n\nThe third argument is optional. It is a table that can be used to set further options for the loading operation. The following fields of the table can be used:\n\n- `Loader`: This tag allows you to specify one or more format loaders that should be asked to load this palette. This must be set to a string containing the name(s) of one or more loader(s). Defaults to the loader set using [SetDefaultLoader()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultLoader_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked to open the specified file. This must be set to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html).\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nThis command is also available from the preprocessor: Use [@PALETTE](https://www.hollywood-mal.com/docs/html/hollywood/atPALETTE_.html) to preload palettes.",
    "inputsDocs": "* `id` — identifier for the palette or [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) for [auto id selection](https://www.hollywood-mal.com/docs/html/hollywood/AutoIDSelect_.html)\n* `filename$` — file to load\n* `table` — optional: further options (see above)",
    "resultsDocs": "* `id` — optional: identifier of the palette; will only be returned when you pass [Nil](https://www.hollywood-mal.com/docs/html/hollywood/PrgTypeNil_.html) as argument 1 (see above)",
    "example": "```\nLoadPalette(1, \"DPaint32.pal\")\n```\n\nThis loads \"DPaint32.pal\" as palette 1.",
    "platforms": ["All"],
    "insertText": "LoadPalette(${1:id}, ${2:filename$})"
  },
  {
    "name": "ModulatePalette",
    "helpId": "ModulatePalette",
    "shortDescription": "change brightness, saturation, and hue of palette",
    "version": "9.0",
    "synopsis": "ModulatePalette(id, brightness, saturation, hue)",
    "functionDocs": "This function can be used to change the brightness, saturation, and hue settings of the colors in a palette. For each setting, you need to pass a floating point value that describes the desired change. A value of 1.0 means no change, a value smaller than 1.0 reduces the brightness/saturation/hue, while a value greater than 1.0 enhances it.",
    "inputsDocs": "* `id` — palette to modulate\n* `brightness` — desired brightness correction\n* `saturation` — desired saturation correction\n* `hue` — desired hue correction",
    "example": "```\nModulatePalette(1, 1.0, 2.0, 1.0)\n```\n\nThe code above increases the saturation while leaving brightness and hue untouched. The result is a palette with emphasized colors, just like in a cartoon.",
    "platforms": ["All"],
    "insertText": "ModulatePalette(${1:id}, ${2:brightness}, ${3:saturation}, ${4:hue})"
  },
  {
    "name": "PaletteToGray",
    "helpId": "PaletteToGray",
    "shortDescription": "convert palette to gray",
    "version": "9.0",
    "synopsis": "PaletteToGray(id)",
    "functionDocs": "This function converts all colors in the palette specified by `id` to gray.",
    "inputsDocs": "* `id` — identifier of the palette to convert",
    "example": "```\nPaletteToGray(1)\n```\n\nConvert all colors in palette 1 to gray.",
    "platforms": ["All"],
    "insertText": "PaletteToGray(${1:id})"
  },
  {
    "name": "ReadPen",
    "helpId": "ReadPen",
    "shortDescription": "read pen from palette object",
    "version": "9.0",
    "synopsis": "pen = ReadPen(x, y[, t])",
    "functionDocs": "This function reads the pen at the position specified by `x` and `y` from the currently active palette object. By default, the current display is the active palette object but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). You can set the active palette object using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, you can also use `ReadPen()` to read a pen from a different palette object. To do so, you need to pass the optional table argument `t` to `ReadPen()` and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object from whose pixel data you want to read the pen. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose pixel data should be used. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette object selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose pixel data should be used. The default is the identifier of the currently active palette object set using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose pixel data should be used. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.",
    "inputsDocs": "* `x` — x position to read from\n* `y` — y position to read from\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "* `pen` — pen at the specified position",
    "example": "```\n@DISPLAY {Palette = #PALETTE_MONOCHROME}\npen = ReadPen(0, 0)\n```\n\nThe code above reads the pen in the top-left corner of the display. This will be 0 because by default, the display background will be filled using pen 0.\n\n---\n\n```\npen = ReadPen(0, 0, {Type = #BRUSH, ID = 2})\n```\n\nThe code reads the pen in the top-left corner in brush 2.",
    "platforms": ["All"],
    "insertText": "ReadPen(${1:x}, ${2:y})"
  },
  {
    "name": "SavePalette",
    "helpId": "SavePalette",
    "shortDescription": "save palette to a file",
    "version": "9.0",
    "synopsis": "SavePalette(id, f$[, t])",
    "functionDocs": "This function saves the palette specified by `id` to the file specified by `f$`. The palette will be saved in the IFF ILBM palette format, as established by Deluxe Paint.\n\nStarting with Hollywood 10.0, `SavePalette()` accepts an optional table argument that allows you to pass additional arguments to the function. The following tags are currently supported by the optional table argument:\n\n- `Adapter`: This tag allows you to specify one or more file adapters that should be asked if they want to save the specified file. If you use this tag, you must set it to a string containing the name(s) of one or more adapter(s). Defaults to the adapter set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). See [Loaders and adapters](https://www.hollywood-mal.com/docs/html/hollywood/LoaderAdapterInfo_.html). (V10.0)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to loaders and adapters. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\nTo load a palette back into Hollywood, use the [LoadPalette()](https://www.hollywood-mal.com/docs/html/hollywood/LoadPalette_.html) function or the [@PALETTE](https://www.hollywood-mal.com/docs/html/hollywood/atPALETTE_.html) preprocessor command.",
    "inputsDocs": "* `id` — identifier of the palette to save\n* `f$` — destination file\n* `t` — optional: table containing further options (see above) (V10.0)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SavePalette(${1:id}, ${2:f$})"
  },
  {
    "name": "SelectPalette",
    "helpId": "SelectPalette",
    "shortDescription": "set active palette object",
    "version": "9.0",
    "synopsis": "SelectPalette(type, id)",
    "functionDocs": "This function can be used to set the palette object that should be used by functions like [SetPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetPen_.html), [GetPen()](https://www.hollywood-mal.com/docs/html/hollywood/GetPen_.html) and [SetPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SetPalette_.html) by default. The palette that is used by those functions by default is also called the active palette.\n\nYou have to pass the type and identifier of the object whose palette should be made the active one. The following object types can be passed to the `type` argument:\n\n```\n#ANIM\n#BGPIC\n#BRUSH\n#DISPLAY\n#LAYER\n#PALETTE\n#SPRITE\n```\n\nNote that `SelectPalette()` will neither check if the object passed to it exists nor if it has a palette. For performance reasons, all this won't be verified until you call a function which actually tries to access the currently active palette. Thus, it is also possible to make a palette active which doesn't exist yet.\n\nBy default, the current display's palette is the active one. If the current display doesn't have a palette and you call a function that tries to access it, an error will occur. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html).\n\nNote that [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) must never be called for `SelectPalette()`. Do not confuse `SelectPalette()` with functions like [SelectBrush()](https://www.hollywood-mal.com/docs/html/hollywood/SelectBrush_.html) or [SelectAlphaChannel()](https://www.hollywood-mal.com/docs/html/hollywood/SelectAlphaChannel_.html) which require you to call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) when you're done with them. This must not be done for `SelectPalette()` as it just sets the default palette for functions like [SetPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetPen_.html) so you must never call [EndSelect()](https://www.hollywood-mal.com/docs/html/hollywood/EndSelect_.html) for `SelectPalette()`.",
    "inputsDocs": "* `type` — type of object whose palette should be made active\n* `id` — identifier of object whose palette should be made active",
    "example": "```\nSelectPalette(#BRUSH, 1)\n```\n\nThe code above makes the palette of brush 1 the active one.",
    "platforms": ["All"],
    "insertText": "SelectPalette(${1:type}, ${2:id})"
  },
  {
    "name": "SetBorderPen",
    "helpId": "SetBorderPen",
    "shortDescription": "set border pen",
    "version": "9.0",
    "synopsis": "SetBorderPen(pen)",
    "functionDocs": "This function sets the pen specified by `pen` to the pen that will be used for drawing borders when the palette mode is `#PALETTEMODE_PEN` and the current output device is a palette one. The palette mode can be set using [SetPaletteMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).\n\nWhen the palette mode has been set to `#PALETTEMODE_PEN`, all Hollywood commands that draw a border won't use the border color that has been set using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html), [SetFontStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html) or a `BorderColor` tag but they will use the pen that has been set as the border pen using this function.\n\nSee [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).",
    "inputsDocs": "* `pen` — pen to use for drawing borders",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetBorderPen(${1:pen})"
  },
  {
    "name": "SetBulletPen",
    "helpId": "SetBulletPen",
    "shortDescription": "set bullet pen",
    "version": "9.0",
    "synopsis": "SetBulletPen(pen)",
    "functionDocs": "If the Hollywood display is currently in palette mode, this function allows you to set the pen to be used for drawing bullets when using [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) in list mode. By default, bullets are drawn using the current draw pen set using [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html). If you want them to be drawn with a different pen, you can use this function to do so.\n\nSee [TextOut](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html).",
    "inputsDocs": "* `pen` — pen to draw bullets with (starting from 0)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetBulletPen(${1:pen})"
  },
  {
    "name": "SetCycleTable",
    "helpId": "SetCycleTable",
    "shortDescription": "set color cycling table",
    "version": "9.0",
    "synopsis": "SetCycleTable(cycle[, t])",
    "functionDocs": "This function sets the color cycling table of the currently active palette to the one specified in `cycle`. You must pass a table of subtables in `cycle`, each subtable describing a configuration of a color cycling effect. Each subtable supports the following tags:\n\n- `Low`: The pen index that marks that start of the color range.\n\n- `High`: The pen index that marks the end of the color range.\n\n- `Rate`: The desired speed of the color cycling effect. A value of 16384 indicates 60 frames per second. All other speeds scale linearly from this base, e.g. a value of 8192 indicates 30 frames per second, and so on.\n\n- `Reverse`: If this tag is set to `True`, the colors should be cycled in reverse. Defaults to `False`.\n\n- `Active`: If this tag is set to `False`, the color range will be marked as inactive. Defaults to `True`.\n\nBy default, `SetCycleTable()` will copy the color cycling table to the current display's palette which is the default active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). You can select a different palette as the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, the specified color cycling table can also be set to a different palette object. To do so, you need to pass the optional table argument to SetCyclingTable() and specify the `Type` and `ID` tags.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object whose color cycling table you want to set. This can be one of the following object types:\n\n  ```\n  #BGPIC\n  #BRUSH\n  #PALETTE\n  ```\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose cycle table you want to set. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).",
    "inputsDocs": "* `cycle` — table containing color cycling ranges (see above)\n* `t` — optional: table for specifying further options (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetCycleTable(${1:cycle})"
  },
  {
    "name": "SetDepth",
    "helpId": "SetDepth",
    "shortDescription": "set palette depth",
    "version": "9.0",
    "synopsis": "SetDepth(depth[, t])",
    "functionDocs": "This function sets the depth of the currently active palette to the one specified in `depth`. `depth` must be a bit depth ranging from 1 (= 2 colors) to 8 (= 256 colors). See [Palette overview](https://www.hollywood-mal.com/docs/html/hollywood/PaletteOverview_.html). Note that if the specified depth is less than that of the pixel data attached to the palette, the pixel data will be remapped to match the new depth.\n\nBy default, the current display's palette is the active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). A palette can be made the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, the specified depth can also be set to a different palette object. To do so, you need to pass the optional table argument to `SetDepth()` and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object whose depth you want to set. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose depth you want to modify. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose depth you want to set. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose depth should be set. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.\n\n- `Remap`: If this tag is set to `False`, out-of-range pens will not be remapped to existing pens but instead they will simply be set to the pen specified in the `ClipPen` tag (see below), i.e. no remapping will take place. Note that `Remap` is only effective when reducing colors. If the new depth has more pens than the old depth, `Remap` won't do anything. (V10.0)\n\n- `ClipPen`: This is only used in case the `Remap` tag is set to `False` (see above). In that case, out-of-range pens will not be remapped to existing pens but will simply be set to the pen specified in the `ClipPen` tag, i.e. no remapping will take place. Note that `ClipPen` is only effective when reducing colors. If the new depth has more pens than the old depth, `ClipPen` won't do anything. (V10.0)",
    "inputsDocs": "* `depth` — desired new palette depth (ranging from 1 to 8)\n* `t` — optional: table for specifying further options (see above)",
    "example": "```\nSetDepth(4, {Type = #BRUSH, ID = 2})\n```\n\nThe code above sets the palette depth of brush 2 to 4 (= 16 colors).",
    "platforms": ["All"],
    "insertText": "SetDepth(${1:depth})"
  },
  {
    "name": "SetDitherMode",
    "helpId": "SetDitherMode",
    "shortDescription": "set dither mode",
    "version": "9.0",
    "synopsis": "SetDitherMode(mode)",
    "functionDocs": "When palette mode is set to `#PALETTEMODE_REMAP`, which is also the default, you can use this command to configure the dithering mode to use. The desired dithering mode has to be passed in the `mode` argument. Dithering can increase the quality of the remapped graphics but it is slower than remapping graphics without dithering.\n\nThe following dithering modes are currently available:\n\n- `#DITHERMODE_NONE`: No dithering. This is the default dithering mode.\n\n- `#DITHERMODE_FLOYDSTEINBERG`: Use Floyd-Steinberg dithering.\n\nSee [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).",
    "inputsDocs": "* `mode` — desired dithering mode (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetDitherMode(${1:mode})"
  },
  {
    "name": "SetDrawPen",
    "helpId": "SetDrawPen",
    "shortDescription": "set draw pen",
    "version": "9.0",
    "synopsis": "SetDrawPen(pen)",
    "functionDocs": "This function sets the pen specified by `pen` to the pen that will be used for drawing to palette output devices when the palette mode is `#PALETTEMODE_PEN`. The palette mode can be set using [SetPaletteMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html). See [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).\n\nWhen the palette mode has been set to `#PALETTEMODE_PEN`, the following functions will use the pen set using `SetDrawPen()` instead of the color that is passed to them:\n\n- [Arc()](https://www.hollywood-mal.com/docs/html/hollywood/Arc_.html)\n- [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html)\n- [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html)\n- [Cls()](https://www.hollywood-mal.com/docs/html/hollywood/Cls_.html)\n- [CreateTextObject()](https://www.hollywood-mal.com/docs/html/hollywood/CreateTextObject_.html)\n- [DrawPath()](https://www.hollywood-mal.com/docs/html/hollywood/DrawPath_.html)\n- [Ellipse()](https://www.hollywood-mal.com/docs/html/hollywood/Ellipse_.html)\n- [Line()](https://www.hollywood-mal.com/docs/html/hollywood/Line_.html)\n- [Plot()](https://www.hollywood-mal.com/docs/html/hollywood/Plot_.html)\n- [Polygon()](https://www.hollywood-mal.com/docs/html/hollywood/Polygon_.html)\n- [Print()](https://www.hollywood-mal.com/docs/html/hollywood/Print_.html)\n- [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html)\n\nNote that in case the palette mode is `#PALETTEMODE_PEN`, any shadow or border effect also won't be drawn in the color that was set using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html), [SetFontStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html) or `ShadowColor` or `BorderColor` tags. Instead, shadow and border will be drawn using the pen set via [SetShadowPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetShadowPen_.html) and [SetBorderPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetBorderPen_.html), respectively.",
    "inputsDocs": "* `pen` — desired drawing pen; pens start at 0",
    "example": "```\n@DISPLAY {Palette = #PALETTE_DEFAULT}\nSetFillStyle(#FILLCOLOR)\nSetPaletteMode(#PALETTEMODE_PEN)\nSetDrawPen(10)\nBox(#CENTER, #CENTER, 320, 240)\n```\n\nThe code above will create a palette mode display and then draw a filled rectangle to the center of the screen using palette pen 10.",
    "platforms": ["All"],
    "insertText": "SetDrawPen(${1:pen})"
  },
  {
    "name": "SetGradientPalette",
    "helpId": "SetGradientPalette",
    "shortDescription": "create color gradient in palette",
    "version": "9.0",
    "synopsis": "SetGradientPalette(id, startcolor, endcolor)",
    "functionDocs": "This function creates a color gradient in the palette specified by `id`. The first pen will be initialized to the color specified in `startcolor` and the last pen will be initialized to the color specified in `endcolor`. All pens between the first and the last pen will be filled with intermediary colors so that the result will be a smooth gradient between `startcolor` and `firstcolor`. Obviously, the more colors the palette has, the smoother the resulting gradient will be so it's recommended to set the palette depth to 8 (= 256 colors) for the best result.",
    "inputsDocs": "* `id` — identifier of palette to use\n* `startcolor` — start color of the gradient\n* `endcolor` — end color of the gradient",
    "example": "```\n@DISPLAY {Palette = #PALETTE_DEFAULT, Height = 512}\nCreatePalette(1)\nSetGradientPalette(1, #BLACK, #BLUE)\nSetPaletteMode(#PALETTEMODE_PEN)\nSetPalette(1)\nSetFillStyle(#FILLCOLOR)\nFor Local y = 0 To 255\n    SetDrawPen(y)\n    Box(0, y * 2, 640, 2)\nNext\n```\n\nThe code above creates gradient between black and blue in palette 1 and draws it.",
    "platforms": ["All"],
    "insertText": "SetGradientPalette(${1:id}, ${2:startcolor}, ${3:endcolor})"
  },
  {
    "name": "SetPalette",
    "helpId": "SetPalette",
    "shortDescription": "change palette",
    "version": "9.0",
    "synopsis": "SetPalette(id[, t])",
    "functionDocs": "This function replaces all pens in the currently active palette with the pens from palette specified by `id`. By default, the current display's palette is the active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). A palette can be made the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, the palette specified by `id` can also be copied to other objects. To do so, you need to pass the optional table argument to `SetPalette()` and set the destination object type in the `Type` table tag and the object's identifier in the `ID` table tag. For example, to assign palette 1 to brush 2, do the following:\n\n```\nSetPalette(1, {Type = #BRUSH, ID = 2})\n```\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object you want to copy the palette to. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose palette you want to modify. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object you want to copy the palette to. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the palette is to be copied to an animation, sprite, or anim layer, you need to set this tag to specify the frame the palette should be copied to. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.\n\n- `Remap`: If this is set to `True`, the colors of the target object will be remapped to match the colors in the source palette as closely as possible. By default, there will be no remapping and the actual pixel data of the target object will remain untouched. If you want remapping, set this tag to `True` but be warned that remapping all pixels will of course take much more time than just setting a new palette without remapping. Defaults to `False`.\n\n- `Dither`: If the `Remap` tag (see above) has been set to `True`, you can use the `Dither` tag to specify whether or not dithering should be used. Defaults to `True` which means dithering should be used.\n\n- `CopyCycleTable`: Palettes can have a table containing color cycling information. If you set this tag to `True`, this cycle table will be copied to the target object as well. Defaults to `False`.",
    "inputsDocs": "* `id` — id of the palette to set\n* `t` — optional: table for specifying further options (see above)",
    "example": "```\n@DISPLAY {Palette = #PALETTE_MONOCHROME}\nSetFillStyle(#FILLCOLOR)\nSetPaletteMode(#PALETTEMODE_PEN)\nSetDrawPen(1)\nBox(#CENTER, #CENTER, 320, 240)\nWaitLeftMouse\nCreatePalette(1, {#WHITE, #BLACK}, {Depth = 1})\nSetPalette(1)\n```\n\nThe code above creates a monochrome palette display with a black background and white rectangle in the center. After a mouse-click the colors of the background and the white rectangle will be reversed by setting a new palette which uses white instead of black in pen 0 and black instead of white in pen 1.",
    "platforms": ["All"],
    "insertText": "SetPalette(${1:id})"
  },
  {
    "name": "SetPaletteDepth",
    "helpId": "SetPaletteDepth",
    "shortDescription": "set palette depth",
    "version": "9.0",
    "synopsis": "SetPaletteDepth(id, depth)",
    "functionDocs": "This function sets the depth of the palette specified by `id` to the depth specified in `depth`. `depth` must be a bit depth ranging from 1 (= 2 colors) to 8 (= 256 colors). See [Palette overview](https://www.hollywood-mal.com/docs/html/hollywood/PaletteOverview_.html).",
    "inputsDocs": "* `id` — identifier of palette to modify\n* `depth` — desired new palette depth (ranging from 1 to 8)",
    "example": "```\nSetPaletteDepth(1, 8)\n```\n\nThe code above changes the depth of palette 1 to 8 (= 256 colors).",
    "platforms": ["All"],
    "insertText": "SetPaletteDepth(${1:id}, ${2:depth})"
  },
  {
    "name": "SetPaletteMode",
    "helpId": "SetPaletteMode",
    "shortDescription": "set palette drawing mode",
    "version": "9.0",
    "synopsis": "SetPaletteMode(mode)",
    "functionDocs": "This function sets the palette drawing mode to the mode specified in the `mode` argument. This mode will be used whenever the output device is palette-based, for example a palette mode display or a palette brush.\n\nThe following modes are currently supported:\n\n- `#PALETTEMODE_REMAP`: All graphics that are drawn will be remapped to the output device's palette. This is the default palette mode but be warned that this can become very slow because Hollywood has to find the closest pen match for every single pixel it draws. To get the best drawing performance in palette mode, you should use `#PALETTEMODE_PEN` instead (see below). The way graphics data is remapped to a a palette output device can be configured by calling [SetDitherMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetDitherMode_.html). This allows you to enable or disable dithering and you can also specify the dithering algorithm to use. Note that when using `#PALETTEMODE_REMAP` single-color drawing functions like [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html), [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html) or [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) won't draw using the drawing pen set via [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html) but using the RGB color that is passed to the function.\n\n- `#PALETTEMODE_PEN`: When using `#PALETTEMODE_PEN`, all palette graphics will be copied to the output device without any pixel remapping. This is very fast but of course, it requires the palette of the graphics object that should be drawn and the palette of the output device to be the same or the result will have messed up colors. So if you use `#PALETTEMODE_PEN`, you should make sure that all your graphics objects share the same palette. Furthermore, when `#PALETTEMODE_PEN` is active, all single-color drawing functions like [Box()](https://www.hollywood-mal.com/docs/html/hollywood/Box_.html), [Circle()](https://www.hollywood-mal.com/docs/html/hollywood/Circle_.html) and [TextOut()](https://www.hollywood-mal.com/docs/html/hollywood/TextOut_.html) won't draw in the RGB color that you pass to them but they will all use the drawing pen set using [SetDrawPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetDrawPen_.html).\n\n  The same is true for the shadow and border color: When palette mode is set to `#PALETTEMODE_PEN`, all graphics functions that support shadows and borders won't use the color specified in [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html), [SetFontStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html) or in standard draw tags like `ShadowColor` but they will use the pens that were specified using functions like [SetShadowPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetShadowPen_.html), [SetBorderPen()](https://www.hollywood-mal.com/docs/html/hollywood/SetBorderPen_.html) or draw tags like `ShadowPen` and `BorderPen`.\n\n  Furthermore, antialiasing of text and graphics primitives will be disabled when `#PALETTEMODE_PEN` is active because in most cases palettes don't have enough colors for satisfactorily anti-aliasing edges.\n\n  Note, however, that even if `#PALETTEMODE_PEN` is active, RGB graphics, of course, still have to be remapped because it's obviously impossible to draw RGB graphics to a palette output device without remapping the RGB colors to palette pens. Thus, drawing 32-bit true color graphics to palette output devices should be avoided because it will always be slow because remapping needs to be done for those graphics and there is no way around this.\n\nThe default drawing mode is `#PALETTEMODE_REMAP` but it is recommended to use `#PALETTEMODE_PEN` for performance reasons. See [Palette displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html).",
    "inputsDocs": "* `mode` — desired palette drawing mode (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetPaletteMode(${1:mode})"
  },
  {
    "name": "SetPalettePen",
    "helpId": "SetPalettePen",
    "shortDescription": "change palette pen",
    "version": "9.0",
    "synopsis": "SetPalettePen(id, pen, color)",
    "functionDocs": "This function sets the color of the pen specified by `pen` to the color specified by `color` in the palette specified by `id`.",
    "inputsDocs": "* `id` — identifier of palette\n* `pen` — pen you want to modify (starting from 0)\n* `color` — new color for the pen, must be specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)",
    "example": "```\nSetPalettePen(1, 0, #RED)\n```\n\nThe code above sets pen 0 to red in palette 1.",
    "platforms": ["All"],
    "insertText": "SetPalettePen(${1:id}, ${2:pen}, ${3:color})"
  },
  {
    "name": "SetPaletteTransparentPen",
    "helpId": "SetPaletteTransparentPen",
    "shortDescription": "set transparent pen of palette",
    "version": "9.0",
    "synopsis": "SetPaletteTransparentPen(id, pen)",
    "functionDocs": "This function sets the transparent pen of the palette specified by `id` to the pen specified in `pen`. Pens are counted from 0.",
    "inputsDocs": "* `id` — identifier of palette to use\n* `pen` — desired transparent pen (starting from 0)",
    "example": "```\nSetPaletteTransparentPen(1, 4)\n```\n\nThe code makes pen 4 in palette 1 transparent.",
    "platforms": ["All"],
    "insertText": "SetPaletteTransparentPen(${1:id}, ${2:pen})"
  },
  {
    "name": "SetPen",
    "helpId": "SetPen",
    "shortDescription": "change pen color",
    "version": "9.0",
    "synopsis": "SetPen(pen, color[, t])",
    "functionDocs": "This function sets the color of the pen specified by `pen` to the color specified by `color`. The change will be done in the currently active palette. By default, the current display's palette is the active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). A palette can be made the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, you can also make `SetPen()` change pens in a different palette object. To do so, you need to pass the optional table argument `t` to `SetPen()` and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object whose pen you want to modify. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose pen you want to modify. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose pen you want to modify. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose pen you want to modify. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.",
    "inputsDocs": "* `pen` — pen you want to modify (starting from 0)\n* `color` — new color for the pen, must be specified as an [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html)\n* `t` — optional: table for specifying further options (see above)",
    "example": "```\n@DISPLAY {Palette = #PALETTE_MONOCHROME}\nSetFillStyle(#FILLCOLOR)\nSetPaletteMode(#PALETTEMODE_PEN)\nSetDrawPen(1)\nBox(#CENTER, #CENTER, 320, 240)\nWaitLeftMouse\nSetPen(0, #WHITE)\nSetPen(1, #BLACK)\n```\n\nThe code above creates a monochrome palette display with a black background and white rectangle in the center. After a mouse-click the colors of the background and the white rectangle will be reversed by setting pen 0 to white and pen 1 to black.\n\n---\n\n```\nSetPen(4, #RED, {Type = #BRUSH, ID = 2})\n```\n\nThe code changes pen 4 in brush 2 to red.",
    "platforms": ["All"],
    "insertText": "SetPen(${1:pen}, ${2:color})"
  },
  {
    "name": "SetShadowPen",
    "helpId": "SetShadowPen",
    "shortDescription": "set shadow pen",
    "version": "9.0",
    "synopsis": "SetShadowPen(pen)",
    "functionDocs": "This function sets the pen specified by `pen` to the pen that will be used for drawing shadows when the palette mode is `#PALETTEMODE_PEN` and the current output device is a palette one. The palette mode can be set using [SetPaletteMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).\n\nWhen the palette mode has been set to `#PALETTEMODE_PEN`, all Hollywood commands that draw a shadow won't use the shadow color that has been set using [SetFormStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFormStyle_.html), [SetFontStyle()](https://www.hollywood-mal.com/docs/html/hollywood/SetFontStyle_.html) or a `ShadowColor` tag but they will use the pen that has been set as the shadow pen using this function.\n\nSee [SetPaletteMode](https://www.hollywood-mal.com/docs/html/hollywood/SetPaletteMode_.html).",
    "inputsDocs": "* `pen` — pen to use for drawing shadows",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetShadowPen(${1:pen})"
  },
  {
    "name": "SetStandardPalette",
    "helpId": "SetStandardPalette",
    "shortDescription": "copy colors from standard palette",
    "version": "9.0",
    "synopsis": "SetStandardPalette(id, type)",
    "functionDocs": "This function can be used to copy the colors from the standard palette specified by `type` to the palette specified by `id`. Note that this might change the depth of the palette specified by `id` because the standard palette's depth is copied to the palette specified by `id` as well.\n\nThe following standard palettes are currently available:\n\n- `#PALETTE_MONOCHROME`: Two color, black and white palette.\n\n- `#PALETTE_GRAY4`: 4 color grayscale palette.\n\n- `#PALETTE_GRAY8`: 8 color grayscale palette.\n\n- `#PALETTE_GRAY16`: 16 color grayscale palette.\n\n- `#PALETTE_GRAY32`: 32 color grayscale palette.\n\n- `#PALETTE_GRAY64`: 64 color grayscale palette.\n\n- `#PALETTE_GRAY128`: 128 color grayscale palette.\n\n- `#PALETTE_GRAY256`: 256 color grayscale palette.\n\n- `#PALETTE_CGA`: Standard CGA palette (16 colors).\n\n- `#PALETTE_OCS`: Standard OCS palette (32 colors).\n\n- `#PALETTE_EGA`: Standard EGA palette (64 colors).\n\n- `#PALETTE_AGA`: Standard AGA palette (256 colors).\n\n- `#PALETTE_WORKBENCH`: Standard classic Amiga Workbench palette (256 colors).\n\n- `#PALETTE_MACINTOSH`: Standard classic Macintosh palette (256 colors).\n\n- `#PALETTE_WINDOWS`: Standard classic Windows palette (256 colors).\n\n- `#PALETTE_DEFAULT`: Same as `#PALETTE_AGA`.",
    "inputsDocs": "* `id` — identifier of palette to use\n* `type` — desired standard palette to copy to target palette",
    "example": "```\nSetStandardPalette(1, #PALETTE_EGA)\n```\n\nThe code above copies the standard EGA palette to palette 1. The new depth of palette 1 will be 6 (= 64 colors) after the operation.",
    "platforms": ["All"],
    "insertText": "SetStandardPalette(${1:id}, ${2:type})"
  },
  {
    "name": "SetTransparentPen",
    "helpId": "SetTransparentPen",
    "shortDescription": "set transparent pen",
    "version": "9.0",
    "synopsis": "SetTransparentPen(pen[, t])",
    "functionDocs": "This function sets the transparent pen in the currently active palette to the one specified in `pen`. Pens are counted from 0. By default, the current display's palette is the active palette but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). A palette can be made the active one by using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, the specified transparent pen can also be set to a different palette object. To do so, you need to pass the optional table argument to `SetTransparentPen()` and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object whose transparent pen you want to set. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose transparent pen you want to modify. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose transparent pen you want to set. The default is the identifier of the currently active palette selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose transparent pen should be set. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.",
    "inputsDocs": "* `pen` — desired transparent pen (starting from 0)\n* `t` — optional: table for specifying further options (see above)",
    "example": "```\nSetTransparentPen(4, {Type = #BRUSH, ID = 2})\n```\n\nThe code makes pen 4 in brush 2 transparent.",
    "platforms": ["All"],
    "insertText": "SetTransparentPen(${1:pen})"
  },
  {
    "name": "SetTransparentThreshold",
    "helpId": "SetTransparentThreshold",
    "shortDescription": "set alpha mapping threshold",
    "version": "9.0",
    "synopsis": "SetTransparentThreshold(threshold)",
    "functionDocs": "This function can be used to specify a threshold value between 0 and 255 that should be used when quantizing alpha transparency to monochrome transparency. For example, when drawing an RGB brush with alpha transparency to a palette display, Hollywood needs to decide which pixels to remap and draw to the display and which pixels to ignore because they are (partly) transparent.\n\nAll pixels whose alpha value is less than or equal to the threshold value specified in `threshold` will be considered transparent. This defaults to 0 which means that only completely invisible pixels will be considered transparent. Depending on the actual image data you want to quantize, it might be necessary to choose a different threshold value here, however.\n\nThere is no \"one size, fits all\" best threshold value here. It all depends on the source image data you want to quantize. Sometimes you might want to have partially transparent pixels in the destination image, sometimes not. That's why it might be necessary to call this function with different threshold values depending on the actual image that needs to be quantized.",
    "inputsDocs": "* `threshold` — desired transparent pixel threshold (must be between 0 and 255); the default is 0",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetTransparentThreshold(${1:threshold})"
  },
  {
    "name": "SolarizePalette",
    "helpId": "SolarizePalette",
    "shortDescription": "apply solarization effect to palette",
    "version": "9.0",
    "synopsis": "SolarizePalette(id, level)",
    "functionDocs": "This command can be used to apply a solarization effect to the specified palette. The solarization effect tries to simulate the look of photographic film exposed to light. The second argument controls the intensity of the solarization effect and can be any value between 0 and 255, or a percentage specification inside a string.",
    "inputsDocs": "* `id` — palette to solarize\n* `level` — desired solarization level (0 to 255, or a string containing a percentage specification)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SolarizePalette(${1:id}, ${2:level})"
  },
  {
    "name": "TintPalette",
    "helpId": "TintPalette",
    "shortDescription": "tint palette",
    "version": "9.0",
    "synopsis": "TintPalette(id, color, level)",
    "functionDocs": "This function tints all colors in the palette specified by `id` with the [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) specified in `color` using the tint level specified in `level`. The `level` argument must be between 0 (no tinting) to 255 (full tinting). Alternatively, `level` can also be a string containing a percent specification, e.g. \"50%\".",
    "inputsDocs": "* `id` — identifier of the palette to tint\n* `color` — a [RGB color](https://www.hollywood-mal.com/docs/html/hollywood/RGBInfo_.html) to use for tinting\n* `level` — tint level (0 to 255 or percent specification)",
    "example": "```\nTintPalette(1, #RED, 128)\n```\n\nThe code above adds some red to all colors in palette 1.",
    "platforms": ["All"],
    "insertText": "TintPalette(${1:id}, ${2:color}, ${3:level})"
  },
  {
    "name": "WritePen",
    "helpId": "WritePen",
    "shortDescription": "write pen to palette object",
    "version": "9.0",
    "synopsis": "WritePen(x, y, pen[, t])",
    "functionDocs": "This function writes the pen specified by `pen` to the position specified by `x` and `y` in the currently active palette object. By default, the current display is the active palette object but of course only in case the current display is a palette mode display. See [Palette mode displays](https://www.hollywood-mal.com/docs/html/hollywood/PaletteDisplays_.html). You can set the active palette object using the [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html) command.\n\nAlternatively, you can also use `WritePen()` to write a pen to a different palette object. To do so, you need to pass the optional table argument `t` to `WritePen()` and specify the `Type` and `ID` tags. See below for an example.\n\nThe following tags are supported by the optional table argument `t`:\n\n- `Type`: Set this to the type identifier of the object from whose pixel data you want to write to. This can be one of the following object types:\n\n  ```\n  #ANIM\n  #BGPIC\n  #BRUSH\n  #DISPLAY\n  #LAYER\n  #PALETTE\n  #SPRITE\n  ```\n\n  Note that if you use types `#ANIM` or `#SPRITE`, you also need to set the `Frame` tag (see below) to indicate the frame whose pixel data should be used. If you use `#LAYER` and the specified layer is an anim layer, you also need to set the `Frame` tag.\n\n  `Type` defaults to the type of the currently active palette object selected using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `ID`: Set this tag to the identifier of the object whose pixel data should be used. The default is the identifier of the currently active palette object set using [SelectPalette()](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html). See [SelectPalette](https://www.hollywood-mal.com/docs/html/hollywood/SelectPalette_.html).\n\n- `Frame`: If the target type is an animation, sprite, or anim layer, you need to set this tag to specify the frame whose pixel data should be used. Frames are counted from 1. Defaults to 1 when used with anims and sprites and to the current frame when used with anim layers.",
    "inputsDocs": "* `x` — x position to write to\n* `y` — y position to write to\n* `pen` — the pen to write\n* `t` — optional: table for specifying further options (see above)",
    "example": "```\nWritePen(0, 0, 10, {Type = #BRUSH, ID = 2})\n```\n\nThe code plots a pixel that uses pen 10 to the top-left corner in brush 2.",
    "platforms": ["All"],
    "insertText": "WritePen(${1:x}, ${2:y}, ${3:pen})"
  }
]
