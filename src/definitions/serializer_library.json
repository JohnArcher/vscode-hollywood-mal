[
  {
    "name": "DeserializeTable",
    "helpId": "DeserializeTable",
    "shortDescription": "deserialize string to table",
    "version": "9.0",
    "synopsis": "table = DeserializeTable(s$[, t])",
    "functionDocs": "This function deserializes the string specified by `s$` to a table and returns it.\n\nThe optional table argument `t` can be used to specify the following additional options:\n\n- `Adapter`: The table will be deserialized using the deserializer that is specified in the `Adapter` tag. This can be the name of an external deserializer plugin (e.g. `xml`) or it can be one of the following inbuilt deserializers:\n\n  - `Default`: Use Hollywood's default deserializer. This will deserialize data from the JSON format to a Hollywood table. This is also the default if no other default has been set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html).\n\n  - `Inbuilt`: Use Hollywood's legacy deserializer. Using this deserializer is not recommended any longer as the data is in a proprietary, non-human-readable format. Using JSON is a much better choice.\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to serializer plugins. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\n- `Mode`: This tag can be used to set the serialization mode to use for the operation. It defaults to the serialization mode set using [SetSerializeMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). See [SetSerializeMode](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). (V10.0)\n\n- `Options`: This tag can be used to set the serialization options to use for the operation. It defaults to the serialization options set using [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). (V10.0)\n\n- `SrcEncoding`: This tag can be used to specify the source character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `DstEncoding`: This tag can be used to specify the destination character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\nIf the `Adapter` tag isn't specified, it will default to the default set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html).\n\nTables can be serialized to strings using the [SerializeTable()](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html) function. See [SerializeTable](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html).",
    "inputsDocs": "* `s$` — string to deserialize\n* `t` — optional: table specifying further options (see above)",
    "resultsDocs": "* `table` — table deserialized from string",
    "example": "See [SerializeTable](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html)",
    "platforms": ["All"],
    "insertText": "DeserializeTable(${1:s$})"
  },
  {
    "name": "GetSerializeMode",
    "helpId": "GetSerializeMode",
    "shortDescription": "get serialization mode",
    "version": "10.0",
    "synopsis": "mode = GetSerializeMode()",
    "functionDocs": "This function returns the current serialization mode that has been set using [SetSerializeMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). See [SetSerializeMode](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html).",
    "inputsDocs": "none",
    "resultsDocs": "* `mode` — current serialization mode",
    "platforms": ["All"],
    "insertText": "GetSerializeMode()"
  },
  {
    "name": "ReadTable",
    "helpId": "ReadTable",
    "shortDescription": "read table from file",
    "version": "4.0",
    "synopsis": "table = ReadTable(id[, t])",
    "functionDocs": "This function reads a Hollywood table from the file specified by `id` and returns it. Reading starts from the current file cursor position which you can modify using the [Seek()](https://www.hollywood-mal.com/docs/html/hollywood/Seek_.html) command.\n\nStarting with Hollywood 9.0, the data will be deserialized using the deserializer that can be specified in the `Adapter` tag in the optional table argument. Before version 9.0, `ReadTable()` always used Hollywood's legacy deserializer which uses a proprietary, non-human-readable format.\n\nThe following tags are currently recognized in the optional table argument:\n\n- `Adapter`: This table tag can be used to specify the deserializer that should be used to import the data into a Hollywood table. This can be the name of an external deserializer plugin (e.g. `xml`) or it can be one of the following inbuilt deserializers:\n\n  - `Default`: Use Hollywood's default deserializer. This will deserialize data from the JSON format to a Hollywood table. Note that even though the name of this deserializer claims to be the default one, it is actually not. For compatibility reasons, `ReadTable()` will use the `Inbuilt` deserializer by default (see below). If you want `ReadTable()` to use the JSON deserializer, you explicitly have to request it by setting `Adapter` to `Default`.\n\n  - `Inbuilt`: Use Hollywood's legacy deserializer. The only data this deserializer will accept is data written by Hollywood's legacy serializer during the [WriteTable()](https://www.hollywood-mal.com/docs/html/hollywood/WriteTable_.html) call. Note that for compatibility reasons, this is still the default deserializer. However, it is not recommended any longer as the data is in a proprietary, non-human-readable format. Using JSON is a much better choice.\n\n  If the `Adapter` tag isn't specified, it defaults to the default set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). Note that for compatibility reasons, this default isn't `Default` but `Inbuilt`. See above for an explanation.\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to serializer plugins. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\n- `Mode`: This tag can be used to set the serialization mode to use for the operation. It defaults to the serialization mode set using [SetSerializeMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). See [SetSerializeMode](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). (V10.0)\n\n- `Options`: This tag can be used to set the serialization options to use for the operation. It defaults to the serialization options set using [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). (V10.0)\n\n- `SrcEncoding`: This tag can be used to specify the source character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `DstEncoding`: This tag can be used to specify the destination character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)",
    "inputsDocs": "* `id` — file to read from\n* `t` — optional: table containing further options (V9.0)",
    "resultsDocs": "* `table` — the table read from the file",
    "example": "See [WriteTable](https://www.hollywood-mal.com/docs/html/hollywood/WriteTable_.html)",
    "platforms": ["All"],
    "insertText": "ReadTable(${1:id})"
  },
  {
    "name": "SerializeTable",
    "helpId": "SerializeTable",
    "shortDescription": "serialize table to string",
    "version": "9.0",
    "synopsis": "s$ = SerializeTable(table[, t])",
    "functionDocs": "This function serializes the table specified by `table` to a string and returns it.\n\nThe optional table argument `t` can be used to specify additional options. The following tags are currently recognized in the optional table argument:\n\n- `Adapter`: The table will be serialized using the serializer that is specified in the `Adapter` tag. This can be the name of an external serializer plugin (e.g. `xml`) or it can be one of the following inbuilt serializers:\n\n  - `Default`: Use Hollywood's default serializer. This will serialize the table to the JSON format. This is also the default if no other default has been set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html).\n\n  - `Inbuilt`: Use Hollywood's legacy serializer. This will serialize the table to a custom, proprietary format.\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to serializer plugins. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\n- `Mode`: This tag can be used to set the serialization mode to use for the operation. It defaults to the serialization mode set using [SetSerializeMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). See [SetSerializeMode](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). (V10.0)\n\n- `Options`: This tag can be used to set the serialization options to use for the operation. It defaults to the serialization options set using [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). (V10.0)\n\n- `SrcEncoding`: This tag can be used to specify the source character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `DstEncoding`: This tag can be used to specify the destination character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\nIf the `Adapter` tag isn't specified, it will default to the default set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html).\n\nThe string can later be deserialized back to a table by using the [DeserializeTable()](https://www.hollywood-mal.com/docs/html/hollywood/DeserializeTable_.html) function. See [DeserializeTable](https://www.hollywood-mal.com/docs/html/hollywood/DeserializeTable_.html).",
    "inputsDocs": "* `table` — table to serialize\n* `t` — optional: table specifying further options (see above)",
    "example": "```\nmytable = {1, 2, 3, 4, 5,\n  \"Hello World\",\n  x = 100, y = 150,\n  subtable = {10, 9, 8, 7}\n}\n\ns$ = SerializeTable(mytable)\nmytable2 = DeserializeTable(s$)\n```\n\nThe code above serializes `mytable` to a string in the JSON format and then deserializes that string back to a table. In the end, `mytable` and `mytable2` will be two independent tables but with identical contents.",
    "platforms": ["All"],
    "insertText": "SerializeTable(${1:table})"
  },
  {
    "name": "SetSerializeMode",
    "helpId": "SetSerializeMode",
    "shortDescription": "set serialization mode",
    "version": "10.0",
    "synopsis": "SetSerializeMode(mode)",
    "functionDocs": "This function sets the serialization mode to the one specified by `mode`. Currently, the following serialization modes are available: `#SERIALIZEMODE_HOLLYWOOD`, `#SERIALIZEMODE_LIST`, and `#SERIALIZEMODE_NAMED`. How the individual serialization mode are interpreted depends on the serializer.\n\nHollywood's legacy serializer, which serializes to a proprietary format, only supports `#SERIALIZEMODE_HOLLYWOOD`. Hollywood's JSON serializer supports all three serialization modes. Here is how the JSON serializer interprets the different serialization modes:\n\n- `#SERIALIZEMODE_HOLLYWOOD`: This is the default serialization mode. All JSON elements will be serialized to table fields. On top of that, the Hollywood serializer can also serialize binary data and even complete Hollywood functions. Hollywood functions and binary data will be serialized as Base64 data. The Hollywood serializer also supports sparse arrays, i.e. tables whose indices aren't strictly sequential but have gaps between the individual indices. A disadvantage of the Hollywood serializer is that it sometimes uses some special markers in the JSON file to tell Hollywood about the data stored in a JSON element, e.g. whether the data is to be interpreted as a string, as binary data or as a Hollywood function. Consequently, you might not be able to deserialize any arbitrary JSON file with the Hollywood serializer because some things in the JSON might be wrongly interpreted as one of Hollywood's special markers. As long as you only deserialize data written by the Hollywood serializer, you will of course never run into any problems. For example, consider the following table:\n\n  ```\n  t = {foo = \"bar\", seqarray = {1,2,3,4,5}, sparsearray =\n      {1,[2]=2,[4]=3,[6]=4,[8]=5}}\n  ```\n\n  When serializing this to JSON using the Hollywood serializer, the result will look like this:\n\n  ```\n  {\n     \"seqarray\": [1,2,3,4,5],\n     \"sparsearray\": {\"0\": 1, \"2\": 2, \"4\": 3, \"6\": 4, \"8\": 5},\n     \"foo\": \"bar\"\n  }\n  ```\n\n  You can see that sparse arrays are serialized by using named JSON indices. This, on the other hand, means that when deserializing JSON files using the Hollywood serializer named elements that consist of nothing but numbers are interpreted as sparse array fields which is why the Hollywood serializer can't be used to deserialize any arbitrary JSON file but should only be used with JSONs that the Hollywood serializer created.\n\n  Another disadvantage of the Hollywood serializer is that the position of elements in the JSON file can be completely random because they are serialized from Hollywood table fields which don't have any particular order. If you want the JSON elements to keep a fixed order, you'll have to use `#SERIALIZEMODE_LIST` instead.\n\n  By default, `#SERIALIZEMODE_HOLLYWOOD` will convert all JSON key names to lower-case. If you don't want that, you can change the behaviour by setting the `NoLowerCase` tag to `True` in [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html).\n\n- `#SERIALIZEMODE_NAMED`: This is like `#SERIALIZEMODE_HOLLYWOOD` except that it doesn't support any Hollywood extensions. This means that you can only serialize numbers, strings, and tables but no binary data or Hollywood functions. Also, this serializer imposes some restrictions on tables, namely that they must either use string indices or numeric indices but not both. If numeric indices are used, those indices must also be strictly sequential, i.e. table indices must be sequential within a certain range [0..n]. There must not be any gaps like in the example above so it's not possible to serialize sparse arrays with the named serializer. The advantage of `#SERIALIZEMODE_NAMED` over `#SERIALIZEMODE_HOLLYWOOD` is that since the named serializer doesn't support any Hollywood extensions you can use it to deserialize any arbitrary JSON file without issues. This is because the named serializers doesn't use any markers because it doesn't support any Hollywood extensions so there is no risk of clashes between JSON data and Hollywood markers. Just like `#SERIALIZEMODE_HOLLYWOOD`, however, the position of elements in the JSON file can be completely random because they are serialized from Hollywood table fields which don't have any particular order. If you want the JSON elements to keep a fixed order, you'll have to use `#SERIALIZEMODE_LIST` instead.\n\n  By default, `#SERIALIZEMODE_NAMED` will convert all JSON key names to lower-case. If you don't want that, you can change the behaviour by setting the `NoLowerCase` tag to `True` in [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html).\n\n- `#SERIALIZEMODE_LIST`: This mode will serialize JSON elements using lists instead of named table fields. This has the advantage that the order of all JSON elements will be preserved. Also, the spelling of the individual JSON keys will be preserved and you could even use the same key several times. A disadvantage is that it's a bit more difficult to access the JSON data because it is stored in key-value pair tables. For example, consider the following JSON data:\n\n  ```\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"isAlive\": true,\n    \"age\": 27,\n    \"address\": {\n      \"streetAddress\": \"21 2nd Street\",\n      \"city\": \"New York\",\n      \"state\": \"NY\",\n      \"postalCode\": \"10021-3100\"\n    }\n  }\n  ```\n\n  The list serializer will store each key-value in its own table using `key` and `value` as named table indices. So to access data from the JSON above, you'd have to use this code:\n\n  ```\n  Print(t[3].key, t[3].value)                   ; \"age 27\"\n  Print(t[4].value[2].key, t[4].value[2].value) ; \"state NY\"\n  ```\n\n  With the named or Hollywood serializer you could access the JSON data by simply using the key name:\n\n  ```\n  Print(t.age)                   ; prints \"27\"\n  Print(t.address.state)         ; prints \"NY\"\n  ```\n\n  As you can see, using the named or Hollywood serializer leads to code that is more readable but the downside is that the element order in the JSON won't be preserved so that the JSON might be more difficult to read.\n\nNote that if you use an external serializer (e.g. a plugin) the interpretation of the different serialization modes could be completely different. The documentation above is only valid for Hollywood's inbuilt JSON serializer.\n\nAlso note that this function will globally change the serialization mode. You can also change the serialization mode locally by setting the `Mode` tag in the optional table arguments of functions like [SerializeTable()](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html). See [SerializeTable](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html).",
    "inputsDocs": "* `mode` — desired serialization mode",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetSerializeMode(${1:mode})"
  },
  {
    "name": "SetSerializeOptions",
    "helpId": "SetSerializeOptions",
    "shortDescription": "set serialization options",
    "version": "10.0",
    "synopsis": "SetSerializeOptions(t)",
    "functionDocs": "This function can be used to set some options for the serializer. You have to pass a table in `t`. The table can contain the following tags:\n\n- `NoLowerCase`: Set this to `True` if the serializer shouldn't automatically convert all key names to lower case. Hollywood's inbuilt JSON serializer currently converts all key names to lower case when using the serialization modes `#SERIALIZEMODE_HOLLYWOOD` and `#SERIALIZEMODE_NAMED`. External serializers like plugins might interpret this option differently. Defaults to `False`.\n\nNote that this function will globally change the serialization options. You can also change the serialization options locally by setting the `Options` tag in the optional table arguments of functions like [SerializeTable()](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html). See [SerializeTable](https://www.hollywood-mal.com/docs/html/hollywood/SerializeTable_.html).",
    "inputsDocs": "* `t` — table containing serialization options (see above)",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "SetSerializeOptions(${1:t})"
  },
  {
    "name": "WriteTable",
    "helpId": "WriteTable",
    "shortDescription": "write table to file",
    "version": "4.0",
    "synopsis": "WriteTable(id, table[, t])",
    "functionDocs": "This function writes the Hollywood table specified by `table` to the file specified by `id`. The table will be serialized using the serializer that can be specified in the optional arguments. It will be written to the file at the current cursor position which you can modify by using the [Seek()](https://www.hollywood-mal.com/docs/html/hollywood/Seek_.html) command. Tables written to files can later be loaded back into Hollywood tables by using the [ReadTable()](https://www.hollywood-mal.com/docs/html/hollywood/ReadTable_.html) command.\n\nThis function is fully recursive. Your table can contain as many subtables as you need. Additionally, the table can even contain Hollywood functions. See below for an example.\n\n`WriteTable()` supports several optional arguments. Before Hollywood 9.0, those had to be passed as optional parameters (see above). Since Hollywood 9.0, however, it is recommended to use the new syntax, which has a single optional table argument that can be used to pass one or more optional arguments to `WriteTable()`.\n\nThe following table fields are recognized by this function:\n\n- `Adapter`: This table tag can be used to specify the serializer that should be used to export the Hollywood table. This can be the name of an external serializer plugin (e.g. `xml`) or it can be one of the following inbuilt serializers:\n\n  - `Default`: Use Hollywood's default serializer. This will serialize the table data to the JSON format. Note that even though the name of this serializer claims to be the default one, it is actually not. For compatibility reasons, `WriteTable()` will use the `Inbuilt` serializer by default (see below). If you want `WriteTable()` to use the JSON serializer, you explicitly have to request it by setting `Adapter` to `Default`.\n\n  - `Inbuilt`: Use Hollywood's legacy serializer. This will serialize the table into a custom, proprietary format. This is the format `WriteTable()` has used since Hollywood 4.0 and for compatibility reasons, it is still the default serializer. However, it is not recommended any longer as this serializer will output data that is not in a human-readable format. Using the JSON serializer is a much better choice.\n\n  If `Adapter` isn't specified, it defaults to the default set using [SetDefaultAdapter()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultAdapter_.html). Note that for compatibility reasons, this default isn't `Default` but `Inbuilt`. See above for an explanation.\n\n- `TextMode`: When using Hollywood's legacy serializer, which is still the default, this argument can be set to `True` to tell `WriteTable()` to export binary data as text. Note that even if you set this tag to `True`, the text won't be in a human-readable format. If you want to serialize the table into human-readable text, use the JSON serializer (see above). Defaults to `False`.\n\n- `NoLineBreak`: If the `TextMode` tag has been set to `True`, `WriteTable()` will automatically insert line breaks after every 72 characters for better readability. If you don't want that, set `NoLineBreak` to `True`. In that case, no line breaks will be inserted. Note that this tag only affects Hollywood's legacy serializer. It doesn't have any effect on other serializers. Defaults to `False`. (V6.1)\n\n- `UserTags`: This tag can be used to specify additional data that should be passed to serializer plugins. If you use this tag, you must set it to a table of key-value pairs that contain the additional data that should be passed to plugins. See [User tags](https://www.hollywood-mal.com/docs/html/hollywood/UserTagsInfo_.html). (V10.0)\n\n- `Mode`: This tag can be used to set the serialization mode to use for the operation. It defaults to the serialization mode set using [SetSerializeMode()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). See [SetSerializeMode](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeMode_.html). (V10.0)\n\n- `Options`: This tag can be used to set the serialization options to use for the operation. It defaults to the serialization options set using [SetSerializeOptions()](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). See [SetSerializeOptions](https://www.hollywood-mal.com/docs/html/hollywood/SetSerializeOptions_.html). (V10.0)\n\n- `SrcEncoding`: This tag can be used to specify the source character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)\n\n- `DstEncoding`: This tag can be used to specify the destination character encoding. This defaults to the string library's default character encoding as set by [SetDefaultEncoding()](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). See [SetDefaultEncoding](https://www.hollywood-mal.com/docs/html/hollywood/SetDefaultEncoding_.html). (V10.0)",
    "inputsDocs": "* `id` — file to write to\n* `table` — table to write to the file\n* `t` — optional: table containing further arguments (see above) (V9.0)",
    "example": "```\nmytable = {1, 2, 3, 4, 5,\n  \"Hello World\",\n  x = 100, y = 150,\n  subtable = {10, 9, 8, 7},\n  mulfunc = Function(a, b) Return(a*b) EndFunction\n}\n\nOpenFile(1, \"table.json\", #MODE_WRITE)\nWriteTable(1, mytable, {Adapter = \"default\"})\nCloseFile(1)\n\nOpenFile(1, \"table.json\", #MODE_READ)\nnewtable = ReadTable(1, {Adapter = \"default\"})\nCloseFile(1)\n\nPrint(newtable[0], newtable[5], newtable.x, newtable.y,\n      newtable.subtable[0], newtable.mulfunc(9, 9))\n```\n\nThe code above writes the table mytable to file \"table.json\". After that, it opens file \"table.json\" again and reads the table back into Hollywood. The imported table will be stored in the variable `newtable`. Finally, we will access the newly imported table and print some of its data to the screen. The output of the code above will be \"1 Hello World 100 150 10 81\".",
    "platforms": ["All"],
    "insertText": "WriteTable(${1:id}, ${2:table})"
  }
]
