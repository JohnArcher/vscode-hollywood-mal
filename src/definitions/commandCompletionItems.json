[
  {
    "label": "ActivateDisplay",
    "kind": 1,
    "documentation": "This command can be used to activate the specified display. Activating a display just means that Hollywood tells the window manager of the host operating system to give the focus to this display. Activating a display does not make the display the current output device for Hollywood's graphics library. If you want to select a display, as the current output device, you have to use SelectDisplay() which will also activate the display if you do not explicitly forbid this.\n\nSee SelectDisplay for more information on the difference between active displays and displays that are selected as the current output device.\n\nStarting with Hollywood 5.0 there is a new optional argument called nofront. If you set this to True, the display will be activated but it will not be moved to the front of the windows' stacking order. This argument is only handled on AmigaOS compatible systems because active windows in the background are not supported on other operating systems.\n\n@param id identifier of the display that shall be activated\n\n@param nofront optional: True if display should not be brought to the front (defaults to False which means pop display to front) (V5.0)",
    "detail": "display (V4.5) ActivateDisplay(id[, nofront])",
    "insertText": "ActivateDisplay(${1:id})"
  },
  {
    "label": "GetApplicationInfo",
    "kind": 1,
    "documentation": "This function can be used to obtain the information specified in the @APPXXX preprocessor commands. GetApplicationInfo() returns a table that contains the following fields:",
    "detail": "t = GetApplicationInfo()"
  },
  {
    "label": "GetApplicationList",
    "kind": 1,
    "documentation": "This function returns a table containing a list of all applications that have been registered through application.library.\n\nExample\n\nt = GetApplicationList()\nFor Local k = 0 To ListItems(t) - 1 Do DebugPrint(t[k])",
    "detail": "system (V6.0)"
  },
  {
    "label": "Arc",
    "kind": 1,
    "documentation": "This function draws a partial ellipse at the position specified by `x` and `y` using the specified radii and color (RGB value) in the style configured using the [link](SetFormStyle()) and SetFillStyle() commands. The arguments start and end specify the start and end angles of the ellipse and must be specified in degrees. If you want to draw a closed ellipse, the start argument needs to be 0 and the end argument needs to be 360. Using the Ellipse() command is of course easier in this case.\n\nThe width of the partial ellipse will be xradius * 2 + 1 (center point) and the height will be yradius * 2 + 1 (center point).",
    "detail": "Arc(x, y, xradius, yradius, start, end[[, color], table]) - draw (V2.0)\n\ndraw a partial ellipse"
  },
  {
    "label": "Arc",
    "kind": 1,
    "documentation": "This function draws a partial ellipse at the position specified by `x` and `y` using the specified radii and color (RGB value) in the style configured using the [link](SetFormStyle()) and SetFillStyle() commands. The arguments start and end specify the start and end angles of the ellipse and must be specified in degrees. If you want to draw a closed ellipse, the start argument needs to be 0 and the end argument needs to be 360. Using the Ellipse() command is of course easier in this case.\n\nThe width of the partial ellipse will be xradius * 2 + 1 (center point) and the height will be yradius * 2 + 1 (center point).",
    "detail": "Arc(x, y, xradius, yradius, start, end[[, color], table])\n\ndraw a partial ellipse - draw library (V2.0)"
  },
  {
    "label": "MyPony",
    "kind": 1,
    "documentation": "Meine Testfunktion",
    "detail": "system (V6.0)"
  },
  {
    "label": "MyPony2",
    "kind": 2,
    "documentation": "Meine Testfunktion2 [link](x.ts)",
    "detail": "system (V6.0)"
  },
  {
    "label": "HolyCow",
    "kind": 1,
    "documentation": "Heilige Kuh",
    "detail": "graphics (V6.0)"
  }
]
