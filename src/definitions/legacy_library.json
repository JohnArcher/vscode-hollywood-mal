[
  {
    "name": "BreakWhileMouseOn",
    "helpId": "BreakWhileMouseOn",
    "shortDescription": "break next WhileMouseOn() command (V1.9) / OBSOLETE",
    "version": "1.0",
    "synopsis": "BreakWhileMouseOn()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function breaks the next [WhileMouseOn()](https://www.hollywood-mal.com/docs/html/hollywood/WhileMouseOn_.html) command that will be executed. You usually use this function if your ONBUTTONCLICK label shall return immediately to your event loop instead of the [WhileMouseOn()](https://www.hollywood-mal.com/docs/html/hollywood/WhileMouseOn_.html) command in your ONBUTTONOVER label.\n\nNormally, if you have an ONBUTTONCLICK and an ONBUTTONOVER label, Hollywood will return to your ONBUTTONOVER label after the mouse button was released because the mouse is still over your button after the user clicked the mouse. If you want Hollywood to return to your main event loop after a mouse click, use this command.\n\nNote: This command is only required in rare cases.",
    "inputsDocs": "none",
    "example": "```\nWhile(quit = FALSE)\n   WaitEvent\nWend\n\nLabel(ONBUTTONOVER1)\nPrint(\"Mouse over button 1\")\nWhileMouseOn\nPrint(\"Mouse no longer over button 1\")\nReturn\n\nLabel(ONBUTTONCLICK1)\nPrint(\"Mouse click on button 1\")\nWhileMouseDown\nPrint(\"Mouse button released\")\nBreakWhileMouseOn\nReturn\n```\n\nHave a look at the above code. The `BreakWhileMouseOn()` causes Hollywood to return immediately to the [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) loop. If there was no `BreakWhileMouseOn()` in the code above, Hollywood would return to the [WhileMouseOn()](https://www.hollywood-mal.com/docs/html/hollywood/WhileMouseOn_.html) command and wait until the user moves the mouse out of the button area.",
    "platforms": ["All"],
    "insertText": "BreakWhileMouseOn()"
  },
  {
    "name": "ClearEvents",
    "helpId": "ClearEvents",
    "shortDescription": "clear user events (V1.5) / OBSOLETE",
    "version": "1.0",
    "synopsis": "ClearEvents()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function clears all events.",
    "inputsDocs": "none",
    "example": "```\nCreateButton(1,10,10,110,110)\nCreateButton(2,130,130,230,230)\nCreateKeyDown(1,\"ESC\")\nClearEvents\nEnd\n\nLabel(SIZEWINDOW)\nReturn\n\nLabel(ONJOYFIRE1)\nReturn\n\nLabel(CLOSEWINDOW)\nReturn\n```\n\nThe above code defines some events and calls `ClearEvents()`. This function will now clear the following events: Button 1, Button 2 and Keydown 1. The events SIZEWINDOW, ONJOYFIRE1 and CLOSEWINDOW will not be cleared because they are only declared as labels. If you want to get rid of them, you can disable them.",
    "platforms": ["All"],
    "insertText": "ClearEvents()"
  },
  {
    "name": "CreateButton",
    "helpId": "CreateButton",
    "shortDescription": "create a new button / OBSOLETE",
    "version": "1.0",
    "synopsis": "CreateButton(id,x1,y1,x2,y2)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use [MakeButton()](https://www.hollywood-mal.com/docs/html/hollywood/MakeButton_.html) instead.\n\nUse this command to declare a button on your display. The button is defined by the coordinates x1:y1 to x2:y2. If the user moves the mouse over the button, Hollywood will [Gosub()](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html) to the label with the name ONBUTTONOVER and the number you specified for the button. If the user clicks the button, Hollywood will jump to the label with the name ONBUTTONCLICK and the number of your button.",
    "inputsDocs": "* `id` — desired identifier for the button\n* `x1` — source left edge\n* `y1` — source top edge\n* `x2` — destination left edge\n* `y2` — destination top edge",
    "example": "```\nCreateButton(1,0,0,200,200)\nCreateButton(2,201,0,400,200)\nCreateKeyDown(1,\"ESC\")\n\nWhile(quit=FALSE)\n  WaitEvent\nWend\nEnd\n\nLabel(ONBUTTONOVER1)\nPrint(\"Mouse over button 1\")\nWhileMouseOn\nPrint(\"Mouse out of button 1\")\nReturn\n\nLabel(ONBUTTONCLICK1)\nPrint(\"User clicked button 1\")\nWhileMouseDown\nPrint(\"User released left mouse button\")\nReturn\n\nLabel(ONBUTTONRIGHTCLICK1)     ; requires Hollywood 1.5\nPrint(\"User right-clicked button 1\")\nWhileRightMouseDown\nPrint(\"User released right mouse button\")\nReturn\n\nLabel(ONBUTTONOVER2)\nPrint(\"Mouse over button 2\")\nWhileMouseOn\nPrint(\"Mouse out of button 2\")\nReturn\n\nLabel(ONBUTTONCLICK2)\nPrint(\"User clicked button 2\")\nWhileMouseDown\nPrint(\"User released left mouse button\")\nReturn\n\nLabel(ONBUTTONRIGHTCLICK2)\nPrint(\"User right-clicked button 2\")    ; requires Hollywood 1.5\nWhileRightMouseDown\nPrint(\"User released right mouse button\")\nReturn\n\nLabel(ONKEYDOWN1)\nquit=TRUE\nReturn\n```\n\nThe above code creates two buttons on the screen and monitors the user activity. If he presses the escape key, this demo will quit. This example shows a good way of handling the user input: It is advised that you use a loop like\n\n```\nWhile(quit=FALSE)\n   WaitEvent\nWend\n```\n\nto handle the user's input. However you have to make sure that you always return to the [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) in the loop.",
    "platforms": ["All"],
    "insertText": "CreateButton(${1:id}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})"
  },
  {
    "name": "CreateKeyDown",
    "helpId": "CreateKeyDown",
    "shortDescription": "create a new keydown object / OBSOLETE",
    "version": "1.0",
    "synopsis": "CreateKeyDown(id,key$)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nUse this command to declare a key to monitor. If the user presses this key, Hollywood will [Gosub()](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html) to the label called ONKEYDOWN with the number as specified in this command.\n\n`Key$` is a string representing a key on your keyboard. This can be one of the following control keys:\n\n- `\"UP\"` Cursor up\n- `\"DOWN\"` Cursor down\n- `\"RIGHT\"` Cursor right\n- `\"LEFT\"` Cursor left\n- `\"HELP\"` Help key\n- `\"DEL\"` Delete key\n- `\"BACKSPACE\"` Backspace key\n- `\"TAB\"` Tab key\n- `\"RETURN\"` Return/enter key\n- `\"ESC\"` Escape\n- `\"SPACE\"` Space key\n- `\"F1 - F10\"` Function keys\n\nThe other keys can be accessed by just specifying the character of the key in the string, e.g. \"A\", \"!\" or \"-\".\n\nThe following keys cannot be monitored: Alt keys, command keys and the control key.",
    "inputsDocs": "* `id` — desired identifier for the button\n* `key$` — key to monitor",
    "example": "```\nCreateKeydown(1,\"ESC\")\nWhile(quit=FALSE)\n   WaitEvent\nWend\nEnd\n\nLabel(ONKEYDOWN1)\nquit=TRUE\nReturn\n```\n\nThe above code waits for the user to press the escape key. Then it quits. A code structure like above is recommended for your applications.",
    "platforms": ["All"],
    "insertText": "CreateKeyDown(${1:id}, ${2:key$})"
  },
  {
    "name": "DisableEvent",
    "helpId": "DisableEvent",
    "shortDescription": "disable an event / OBSOLETE",
    "version": "1.0",
    "synopsis": "DisableEvent(type,id)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use [DisableButton()](https://www.hollywood-mal.com/docs/html/hollywood/DisableButton_.html) instead.\n\nThis function disables the event specified by type and id. Once an event is disabled, it will not be monitored any longer. However, you can enable it again later by using the [EnableEvent()](https://www.hollywood-mal.com/docs/html/hollywood/EnableEvent_.html).\n\nDo not forget to specify the '#' prefix for all events because you are passing constants!",
    "inputsDocs": "* `type` — event type (e.g. `#ONBUTTONOVER`, `#ONBUTTONCLICK`, `#CLOSEWINDOW`)\n* `id` — event number to disable",
    "example": "```\nDisableEvent(#ONBUTTONOVER,1)\nDisableEvent(#ONBUTTONCLICK,1)\nDisableEvent(#ONBUTTONRIGHTCLICK,1)\n```\n\nThe above code completely disables the monitoring of button 1 (every button has three events `#ONBUTTONOVER`, `#ONBUTTONCLICK` and `#ONBUTTONRIGHTCLICK`). Therefore if you want to disable a button completely you will have to call `DisableEvent()` thrice.",
    "platforms": ["All"],
    "insertText": "DisableEvent(${1:type}, ${2:id})"
  },
  {
    "name": "DisableEventHandler",
    "helpId": "DisableEventHandler",
    "shortDescription": "disable Hollywood's event handler / OBSOLETE",
    "version": "1.0",
    "synopsis": "DisableEventHandler()",
    "functionDocs": "Attention: This function is no longer supported as of Hollywood 1.9. Please use [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html) instead.\n\nThis function disables the internal event handler of Hollywood. See [EnableEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/EnableEventHandler_.html).",
    "inputsDocs": "none",
    "example": "See [EnableEventHandler](https://www.hollywood-mal.com/docs/html/hollywood/EnableEventHandler_.html)",
    "platforms": ["All"],
    "insertText": "DisableEventHandler()"
  },
  {
    "name": "EnableEventHandler",
    "helpId": "EnableEventHandler",
    "shortDescription": "enable Hollywood's event handler / OBSOLETE",
    "version": "1.0",
    "synopsis": "EnableEventHandler()",
    "functionDocs": "Attention: This function is no longer supported as of Hollywood 1.9. Please use [CheckEvent()](https://www.hollywood-mal.com/docs/html/hollywood/CheckEvent_.html) instead.\n\nThis function enables the internal event handler of Hollywood. This means, that you do not have to call [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) any longer because Hollywood will always check if there are any events that occurred. Using the internal event handler is useful if you want to call some functions when there is no input but also monitor user input, e.g. if you are doing a slide show with some effects you cannot call [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) every second but you still want that the user can quit the show by pressing some button on your screen. Then it would be wise to call `EnableEventHandler()`. Once it is enabled, you can do what you want but all events are still monitored.\n\nPlease note: Use this function only when you really need it. It has major disadvantages compared to an input loop together with [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html) because you will never know when an event was raised and from where. If Hollywood's event handler is enabled, events can be raised always. It could even happen, that an event breaks commands that are still busy, e.g. [DisplayTransitionFX()](https://www.hollywood-mal.com/docs/html/hollywood/DisplayTransitionFX_.html). It is not a good idea to use `EnableEventHandler()` in your projects because you will lose the control of your application. `EnableEventHandler()` is also very likely to be removed from Hollywood in future versions. So you should stay on the safe side, which means: Use an input loop with [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html).",
    "inputsDocs": "none",
    "example": "```\nEnableEventHandler\nDisplayBGPic(1)\nWait(200)\nDisplayBGPic(2)\n...\nLabel(ONBUTTONCLICK1)\nEnd\n```\n\nThe above code enables the event handler and then starts a slide show but the user will always be able to press a button although you do not call [WaitEvent()](https://www.hollywood-mal.com/docs/html/hollywood/WaitEvent_.html).",
    "platforms": ["All"],
    "insertText": "EnableEventHandler()"
  },
  {
    "name": "EnableEvent",
    "helpId": "EnableEvent",
    "shortDescription": "enable an event / OBSOLETE",
    "version": "1.0",
    "synopsis": "EnableEvent(type,id)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use [EnableButton()](https://www.hollywood-mal.com/docs/html/hollywood/EnableButton_.html) instead.\n\nThis function enables the event specified by type and id. Once an event is enabled, it will be monitored by Hollywood. You will only have to call this function if you disabled the event before because by default, all events are enabled.\n\nDo not forget to specify the '#' prefix for all events because you are passing constants!",
    "inputsDocs": "* `type` — event type (e.g. `#ONBUTTONOVER`, `#ONBUTTONCLICK`, `#CLOSEWINDOW`)\n* `id` — event number to enable",
    "example": "```\nEnableEvent(#ONBUTTONOVER,1)\nEnableEvent(#ONBUTTONCLICK,1)\nEnableEvent(#ONBUTTONRIGHTCLICK,1)\n```\n\nThe above code completely enables the monitoring of button 1 (every button has three events `#ONBUTTONOVER`, `#ONBUTTONCLICK` and `#ONBUTTONRIGHTCLICK`). Therefore if you want to enable a button completely you will have to call `EnableEvent()` thrice.",
    "platforms": ["All"],
    "insertText": "EnableEvent(${1:type}, ${2:id})"
  },
  {
    "name": "GetEventCode",
    "helpId": "GetEventCode",
    "shortDescription": "get event specific code (V1.5) / OBSOLETE",
    "version": "1.0",
    "synopsis": "code = GetEventCode()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function is used right after Hollywood jumped to an event label. If an event has to tell you additional information, you can get this information through this function.\n\nFor example, [ONBUTTONCLICKALL](https://www.hollywood-mal.com/docs/html/hollywood/ONBUTTONCLICKALL_.html) returns the identifier of the button that caused Hollywood to jump to the label.",
    "inputsDocs": "none",
    "resultsDocs": "* `code` — event specific code",
    "example": "See [ONBUTTONCLICKALL](https://www.hollywood-mal.com/docs/html/hollywood/ONBUTTONCLICKALL_.html)",
    "platforms": ["All"],
    "insertText": "GetEventCode()"
  },
  {
    "name": "Gosub",
    "helpId": "Gosub",
    "shortDescription": "call a subroutine / OBSOLETE",
    "version": "1.0",
    "synopsis": "Gosub(label)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x library. You should not use it any longer. Please use [functions](https://www.hollywood-mal.com/docs/html/hollywood/PrgFunctions_.html) instead of labels.\n\nThis function jumps to the subroutine specified by label. The subroutine can call [Return()](https://www.hollywood-mal.com/docs/html/hollywood/Return_.html) to return to the point from where it was called.",
    "inputsDocs": "* `label` — identifier of a label (defined with [Label()](https://www.hollywood-mal.com/docs/html/hollywood/Label_.html))",
    "example": "```\na$=\"Hello World\"\nGosub(PRINTTEXT)\nWaitLeftMouse\nEnd\n\nLabel(PRINTTEXT)\nPrint(a$)\nReturn\n```\n\nThe above code prints the text \"Hello World\" on the screen and waits for the left mouse. Then quits.",
    "platforms": ["All"],
    "insertText": "Gosub(${1:label})"
  },
  {
    "name": "Goto",
    "helpId": "Goto",
    "shortDescription": "jump to a new location / OBSOLETE",
    "version": "1.0",
    "synopsis": "Goto(label)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x library. You should not use it any longer. Please use [functions](https://www.hollywood-mal.com/docs/html/hollywood/PrgFunctions_.html) instead of labels.\n\nThis function jumps to the location specified by label. Execution will continue there and it is not possible to get back to the point from where the label was called. If you need this, use the [Gosub()](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html) command.",
    "inputsDocs": "* `label` — identifier of a label (defined with [Label()](https://www.hollywood-mal.com/docs/html/hollywood/Label_.html))",
    "example": "```\na$=\"Hello World\"\nGoto(PRINTTEXT)\nWaitLeftMouse         ; this code will never be reached\nEnd                   ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nLabel(PRINTTEXT)\nPrint(a$)\nWaitLeftMouse\nEnd\n```\n\nThe above code prints the text \"Hello World\" on the screen and waits for the left mouse. Then quits.",
    "platforms": ["All"],
    "insertText": "Goto(${1:label})"
  },
  {
    "name": "Label",
    "helpId": "Label",
    "shortDescription": "declare a new label / OBSOLETE",
    "version": "1.0",
    "synopsis": "Label(name)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x library. You should not use it any longer. Please use [functions](https://www.hollywood-mal.com/docs/html/hollywood/PrgFunctions_.html) instead of labels.\n\nThis function declares a new label with the specified name. You can jump to this label with the [Gosub()](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html) and [Goto()](https://www.hollywood-mal.com/docs/html/hollywood/Goto_.html) commands then. Please note that name is not a string! You need to specify a variable name that will be used as the reference for this label.",
    "inputsDocs": "* `name` — identifier to use",
    "example": "See [Gosub](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html)\nSee [Goto](https://www.hollywood-mal.com/docs/html/hollywood/Goto_.html)",
    "platforms": ["All"],
    "insertText": "Label(${1:name})"
  },
  {
    "name": "ModifyButton",
    "helpId": "ModifyButton",
    "shortDescription": "modify button data / OBSOLETE",
    "version": "1.0",
    "synopsis": "ModifyButton(id,x1,y1,x2,y2)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function changes the configuration of the button specified by `id`.",
    "inputsDocs": "* `id` — identifier of the button\n* `x1` — desired new left edge position\n* `y1` — desired new top edge position\n* `x2` — desired new destination left edge position\n* `y2` — desired new destination top edge position",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ModifyButton(${1:id}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})"
  },
  {
    "name": "ModifyKeyDown",
    "helpId": "ModifyKeyDown",
    "shortDescription": "modify keydown object data / OBSOLETE",
    "version": "1.0",
    "synopsis": "ModifyKeyDown(id,key$)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function changes the configuration of the keydown specified by `id`.\n\nSee [CreateKeyDown](https://www.hollywood-mal.com/docs/html/hollywood/CreateKeyDown_.html).",
    "inputsDocs": "* `id` — identifier of the button\n* `key$` — desired new key to monitor",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "ModifyKeyDown(${1:id}, ${2:key$})"
  },
  {
    "name": "RemoveButton",
    "helpId": "RemoveButton",
    "shortDescription": "remove a button / OBSOLETE",
    "version": "1.0",
    "synopsis": "RemoveButton(id)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use [DeleteButton()](https://www.hollywood-mal.com/docs/html/hollywood/DeleteButton_.html) instead.\n\nThis function will remove the button specified by `id` from Hollywood's button database. Events of this button will no longer be received.",
    "inputsDocs": "* `id` — button to delete",
    "example": "```\nRemoveButton(1)\n```\n\nDeletes button 1.",
    "platforms": ["All"],
    "insertText": "RemoveButton(${1:id})"
  },
  {
    "name": "RemoveKeyDown",
    "helpId": "RemoveKeyDown",
    "shortDescription": "remove a keydown object / OBSOLETE",
    "version": "1.0",
    "synopsis": "RemoveKeyDown(id)",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function will remove the keydown object specified by `id` from Hollywood's keydown database. Events of this keydown will no longer be received.",
    "inputsDocs": "* `id` — keydown to delete",
    "example": "```\nRemoveKeydown(1)\n```\n\nDeletes keydown object 1.",
    "platforms": ["All"],
    "insertText": "RemoveKeyDown(${1:id})"
  },
  {
    "name": "Return",
    "helpId": "Return",
    "shortDescription": "return to last Gosub() / OBSOLETE",
    "version": "1.0",
    "synopsis": "Return()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x library. You should not use it any longer. Please use [functions](https://www.hollywood-mal.com/docs/html/hollywood/PrgFunctions_.html) instead of labels.\n\nThis function will return to the point where the last routine was gosub'ed from.",
    "inputsDocs": "none",
    "example": "See [Gosub](https://www.hollywood-mal.com/docs/html/hollywood/Gosub_.html)",
    "platforms": ["All"],
    "insertText": "Return()"
  },
  {
    "name": "WhileKeyDown",
    "helpId": "WhileKeyDown",
    "shortDescription": "halt until key is up (V1.5) / OBSOLETE",
    "version": "1.0",
    "synopsis": "WhileKeyDown()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function can be used after an [ONKEYDOWN](https://www.hollywood-mal.com/docs/html/hollywood/ONKEYDOWN_.html) event occurred. If you call this function, Hollywood will wait until the user releases the key which caused the event.\n\nIf you do not call this function after your Label(ONKEYDOWNx) you may receive several events if the user holds down the key a bit longer.",
    "inputsDocs": "none",
    "resultsDocs": "none",
    "platforms": ["All"],
    "insertText": "WhileKeyDown()"
  },
  {
    "name": "WhileMouseDown",
    "helpId": "WhileMouseDown",
    "shortDescription": "halt until the mouse button is up / OBSOLETE",
    "version": "1.0",
    "synopsis": "WhileMouseDown()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function must be called after a ONBUTTONCLICK event occurred. If you call this function, Hollywood will wait until the user has finished his mouse button click. It is absolutely necessary to call this function right after the ONBUTTONCLICK event occurred because even if the user clicks the mouse only once, several events may be generated. To prevent this, call this function right after the ONBUTTONCLICK occurred.",
    "inputsDocs": "none",
    "example": "See [CreateButton](https://www.hollywood-mal.com/docs/html/hollywood/CreateButton_.html)",
    "platforms": ["All"],
    "insertText": "WhileMouseDown()"
  },
  {
    "name": "WhileMouseOn",
    "helpId": "WhileMouseOn",
    "shortDescription": "halt until the user moves mouse out of a button / OBSOLETE",
    "version": "1.0",
    "synopsis": "WhileMouseOn()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function can be called after a ONBUTTONOVER event occurred. If you call this function, Hollywood will wait until the user moves the mouse out of the button it is currently over. This is useful when you want to display a brush when the mouse is over a button (hover effect).\n\nThis function is optional after an ONBUTTONOVER event (other than the [WhileMouseDown()](https://www.hollywood-mal.com/docs/html/hollywood/WhileMouseDown_.html) function which is required after a ONBUTTONCLICK event!)",
    "inputsDocs": "none",
    "example": "See [CreateButton](https://www.hollywood-mal.com/docs/html/hollywood/CreateButton_.html)",
    "platforms": ["All"],
    "insertText": "WhileMouseOn()"
  },
  {
    "name": "WhileRightMouseDown",
    "helpId": "WhileRightMouseDown",
    "shortDescription": "halt until the right mouse button is up (V1.5) / OBSOLETE",
    "version": "1.0",
    "synopsis": "WhileRightMouseDown()",
    "functionDocs": "Attention: This function is part of the Hollywood 1.x event library. You should not use it any longer. Please use the functions of the new library from Hollywood 2.0 which is much better.\n\nThis function must be called after a ONBUTTONRIGHTCLICK event occurred. If you call this function, Hollywood will wait until the user has finished his mouse button click. It is absolutely necessary to call this function right after the ONBUTTONRIGHTCLICK event occurred because even if the user clicks the mouse only once, several events may be generated. To prevent this, call this function right after the ONBUTTONRIGHTCLICK occurred.",
    "inputsDocs": "none",
    "example": "See [CreateButton](https://www.hollywood-mal.com/docs/html/hollywood/CreateButton_.html)",
    "platforms": ["All"],
    "insertText": "WhileRightMouseDown()"
  }
]
